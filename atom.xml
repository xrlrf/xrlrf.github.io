<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaorui&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wustxiao.cn/"/>
  <updated>2017-10-30T09:27:20.403Z</updated>
  <id>http://wustxiao.cn/</id>
  
  <author>
    <name>Xiao Rui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jQuery基础二－(DOM篇)</title>
    <link href="http://wustxiao.cn/2017/10/30/jQuery%E5%9F%BA%E7%A1%80%E4%BA%8C%EF%BC%8D-DOM%E7%AF%87/"/>
    <id>http://wustxiao.cn/2017/10/30/jQuery基础二－-DOM篇/</id>
    <published>2017-10-30T09:25:21.000Z</published>
    <updated>2017-10-30T09:27:20.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DOM创建节点及节点属性"><a href="#DOM创建节点及节点属性" class="headerlink" title="DOM创建节点及节点属性"></a>DOM创建节点及节点属性</h3><pre><code>通过JavaScript可以很方便的获取DOM节点，从而进行一系列的DOM操作。但实际上一般开发者都习惯性的先定义好HTML结构，但这样就非常不灵活了。</code></pre><blockquote><p>试想下这样的情况：如果我们通过AJAX获取到数据之后然后才能确定结构的话，这种情况就需要动态的处理节点了</p></blockquote><p>本文向大家介绍一下如何使用JavaScript创建div节点元素，主要包括创建div节点元素的属性和创建div节点元素的样式两大部分内容，相信本文介绍一定会让你有所收获。</p><p>先介绍下需要用到的浏览器提供的一些原生的方法（这里不处理低版本的IE兼容问题）</p><p>创建流程比较简单，大体如下：</p><ol><li>创建节点(常见的：元素、属性和文本)</li><li>添加节点的一些属性</li><li>加入到文档中</li></ol><p>流程中涉及的一点方法：</p><ol><li>创建元素：document.createElement</li><li>设置属性：setAttribute</li><li>添加文本：innerHTML</li><li>加入文档：appendChild</li></ol><p>如右边代码所示，写一个最简单的元素创建，我们会发现几个问题：</p><ol><li>每一个元素节点都必须单独创建</li><li>节点是属性需要单独设置，而且设置的接口不是很统一</li><li>添加到指定的元素位置不灵活</li><li>最后还有一个最重要的：浏览器兼容问题处理</li></ol><h3 id="jQuery节点创建与属性的处理"><a href="#jQuery节点创建与属性的处理" class="headerlink" title="jQuery节点创建与属性的处理"></a>jQuery节点创建与属性的处理</h3><pre><code>上一节介绍了通过JavaScript原生接口创建节点，在处理上是非常复杂与繁琐的。我们可以通过使用jQuery来简化了这个过程</code></pre><p>创建元素节点：</p><p>可以有几种方式，后面会慢慢接触。常见的就是直接把这个节点的结构给通过HTML标记字符串描述出来，通过$()函数处理，$(“html结构”)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>)</span></div></pre></td></tr></table></figure><p>创建为本节点：</p><p>与创建元素节点类似，可以直接把文本内容一并描述</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">(<span class="string">"&lt;div&gt;我是文本节点&lt;/div&gt;"</span>)</span></div></pre></td></tr></table></figure><p>创建为属性节点：</p><p>与创建元素节点同样的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$("<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'test'</span> <span class="attr">class</span>=<span class="string">'aaron'</span>&gt;</span>我是文本节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span>")</div></pre></td></tr></table></figure><p>我们通过jQuery把上一届的代码改造一下，如右边代码所示</p><p>一条一句就搞定了，跟写HTML结构方式是一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$("<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'aaron'</span>&gt;</span>动态创建DIV元素节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>")</div></pre></td></tr></table></figure><p>这就是jQuery创建节点的方式，让我们保留HTML的结构书写方式，非常的简单、方便和灵活</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.left</span>,</span></div><div class="line"><span class="css"><span class="selector-class">.right</span>&#123;</span></div><div class="line"><span class="undefined">width: 300px;</span></div><div class="line"><span class="undefined">height: 120px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.left</span> <span class="selector-tag">div</span>,</span></div><div class="line"><span class="css"><span class="selector-class">.right</span> <span class="selector-tag">div</span>&#123;</span></div><div class="line"><span class="undefined">width: 100px;</span></div><div class="line"><span class="undefined">height: 90px;</span></div><div class="line"><span class="undefined">padding: 5px;</span></div><div class="line"><span class="undefined">margin: 5px;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.left</span> <span class="selector-tag">div</span>&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#bbffaa</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.right</span> <span class="selector-tag">div</span>&#123;</span></div><div class="line"><span class="undefined">background: yellow;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>动态创建元素节点<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击通过jQuery动态创建元素节点<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> $body = $(<span class="string">'body'</span>);</span></div><div class="line"><span class="actionscript">$body.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// 通过jQuery生成div元素节点</span></span></div><div class="line"><span class="handlebars"><span class="xml">var div = $("<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'right'</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>动态创建DIV元素节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>");</span></span></div><div class="line"><span class="undefined">$body.append(div);</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// // 通过JavaScript原生接口创建节点</span></span></div><div class="line"><span class="actionscript"><span class="comment">// var body = document.querySelector('body');</span></span></div><div class="line"><span class="actionscript"><span class="comment">// document.addEventListener('click',function()&#123;</span></span></div><div class="line"><span class="actionscript"><span class="comment">// // 创建２个div元素</span></span></div><div class="line"><span class="actionscript"><span class="comment">// var rightdiv = document.createElement('div');</span></span></div><div class="line"><span class="actionscript"><span class="comment">// var rightaaron = document.createElement("div");</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// // 给２个div设置不同的属性</span></span></div><div class="line"><span class="actionscript"><span class="comment">// rightdiv.setAttribute("class",'right');</span></span></div><div class="line"><span class="actionscript"><span class="comment">// rightaaron.className = 'aaron';</span></span></div><div class="line"><span class="actionscript"><span class="comment">// rightaaron.innerHTML = "动态创建DIV元素节点";</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// // 2个div合并成包含关系</span></span></div><div class="line"><span class="actionscript"><span class="comment">// rightdiv.appendChild(rightaaron);</span></span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// // 绘制到页面body</span></span></div><div class="line"><span class="actionscript"><span class="comment">// body.appendChild(rightdiv);</span></span></div><div class="line"><span class="actionscript"><span class="comment">// &#125;,false)</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="DOM内部插入append-与appendTo"><a href="#DOM内部插入append-与appendTo" class="headerlink" title="DOM内部插入append()与appendTo()"></a>DOM内部插入append()与appendTo()</h3><pre><code>动态创建的元素是不够的，它只是临时存放在内存中，最终我们需要放到页面文档并呈现出来。那么问题来了，怎么放到文档上？</code></pre><p>这里就涉及到一个位置关系，常见的就是把这个新创建的元素，当作页面某一个元素的子元素放到其内部。针对这样的处理，jQuery就定义2个操作的方法</p><p><img src="http://img.blog.csdn.net/20171030163531647?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>append：这个操作与对指定的元素执行原生的appendChild方法，将它们添加到文档中的情况类似。</p><p>appendTo：实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。</p><p>简单的总结就是：</p><p>.append()和.appendTo()两种方法功能相同，主要的不同是语法——内容和目标的位置不同</p><pre><code>append()前面是被插入的对象，后面是要在对象内插入的元素内容appendTo()前面是要插入的元素内容，而后面是被插入的对象</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.content</span>&#123;</span></div><div class="line"><span class="undefined">width: 300px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.append</span>&#123;</span></div><div class="line"><span class="undefined">background-color: blue;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.appendTo</span>&#123;</span></div><div class="line"><span class="undefined">background-color: red;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过append与appendTo添加元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt1"</span>&gt;</span>点击通过jQuery的append添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt2"</span>&gt;</span>点击通过jQuery的appendTo添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// .append(),内容在方法的后面</span></span></div><div class="line"><span class="javascript">$(<span class="string">'.content'</span>).append(<span class="string">'&lt;div class="append"&gt;通过append方法添加的元素&lt;/div&gt;'</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// .appendTo()刚好相反，内容在方法前面</span></span></div><div class="line"><span class="actionscript"><span class="comment">// 无论是一个选择器表达式，或创建作为标记上的标记</span></span></div><div class="line"><span class="actionscript"><span class="comment">// 它都将被插入到目标容器末尾</span></span></div><div class="line"><span class="javascript">$(<span class="string">'&lt;div class="appendTo"&gt;通过appendTo方法添加的元素&lt;/div&gt;'</span>).appendTo(<span class="string">'.content'</span>);</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="DOM外部插入after-与before"><a href="#DOM外部插入after-与before" class="headerlink" title="DOM外部插入after()与before()"></a>DOM外部插入after()与before()</h3><pre><code>节点与节点之前有各种关系，除了父子，祖辈关系，还可以是兄弟关系。之前我们在处理节点插入的时候，接触到了内部插入的几个方法，这节我们开始讲外部插入的处理，也就是兄弟之间的关系处理，这里jQuery引入了2个方法，可以用来在匹配I的元素前后插入内容</code></pre><p>选择器的描述：</p><p><img src="http://img.blog.csdn.net/20171030165358765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>before与after都是用来对相对选中元素外部增加相邻的兄弟节点</li><li>2个方法都是都可以接收HTML字符串，DOM 元素，元素数组，或者jQuery对象，用来插入到集合中每个匹配元素的前面或者后面</li><li>2个方法都支持多个参数传递after(div1,div2,….) 可以参考右边案例代码</li></ul><p>注意点：</p><ul><li>after向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入</li><li>before向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.aaron</span>&#123;</span></div><div class="line"><span class="undefined">border: 1px solid red;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过before与after添加元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt1"</span>&gt;</span>点击通过jQuery的before添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt2"</span>&gt;</span>点击通过jQuery的after添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>测试before<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span>测试after<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// 在匹配test1元素集合中的每个元素前面插入p元素</span></span></div><div class="line"><span class="handlebars"><span class="xml">$(".test1").before('<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>before,在匹配元素之前添加<span class="tag">&lt;/<span class="name">p</span>&gt;</span>','<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span>');</span></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// 在匹配test1元素集合中的每个元素前面插入p元素</span></span></div><div class="line"><span class="handlebars"><span class="xml">$(".test2").after('<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>after,在匹配元素之后添加<span class="tag">&lt;/<span class="name">p</span>&gt;</span>','<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span>');</span></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>DOM内部插入prepend()与prependTo()<br>在元素内部进行操作的方法，除了在被选元素的结尾（仍然在内部）通过append与appendTo插入指定内容外，相应的还可以在被选元素之前插入，jQuery提供的方法是prepend与prependTo</p><p>选择器的描述：</p><p> <img src="http://img.blog.csdn.net/20171030170459104?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>通过右边代码可以看到prepend与prependTo的使用及区别：</p><ul><li>.prepend()方法将指定元素插入到匹配元素里面作为它的第一个子元素 (如果要作为最后一个子元素插入用.append()).</li><li>.prepend()和.prependTo()实现同样的功能，主要的不同是语法，插入的内容和目标的位置不同</li><li>对于.prepend() 而言，选择器表达式写在方法的前面，作为待插入内容的容器，将要被插入的内容作为方法的参数</li><li>而.prependTo() 正好相反，将要被插入的内容写在方法的前面，可以是选择器表达式或动态创建的标记，待插入内容的容器作为参数。</li></ul><p>这里总结下内部操作四个方法的区别：</p><ul><li>append()向每个匹配的元素内部追加内容</li><li>prepend()向每个匹配的元素内部前置内容</li><li>appendTo()把所有匹配的元素追加到另一个指定元素的集合中</li><li>prependTo()把所有匹配的元素前置到另一个指定的元素集合中</li></ul><h3 id="DOM外部插入insertAfter-与insertBefore"><a href="#DOM外部插入insertAfter-与insertBefore" class="headerlink" title="DOM外部插入insertAfter()与insertBefore()"></a>DOM外部插入insertAfter()与insertBefore()</h3><pre><code>与内部插入处理一样，jQuery由于内容目标的位置不同，然增加了2个新的方法insertAfter与insertBefore</code></pre><p><img src="http://img.blog.csdn.net/20171030171119684?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>.before()和.insertBefore()实现同样的功能。主要的区别是语法——内容和目标的位置。 对于before()选择表达式在函数前面，内容作为参数，而.insertBefore()刚好相反，内容在方法前面，它将被放在参数里元素的前面</li><li>.after()和.insertAfter() 实现同样的功能。主要的不同是语法——特别是（插入）内容和目标的位置。 对于after()选择表达式在函数的前面，参数是将要插入的内容。对于 .insertAfter(), 刚好相反，内容在方法前面，它将被放在参数里元素的后面</li><li>before、after与insertBefore。insertAfter的除了目标与位置的不同外，<strong>后面的不支持多参数处理</strong></li></ul><p>注意事项：</p><ul><li>insertAfter将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入；</li><li>insertBefore将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.test1</span>&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#bbffaa</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.test2</span>&#123;</span></div><div class="line"><span class="undefined">background: yellow;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过insertBefore与insertAfter添加元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt1"</span>&gt;</span>点击通过jQuery的insertBefore添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt2"</span>&gt;</span>点击通过jQuery的insertAfter添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>测试insertBefore,不支持多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span>测试insertAfter,不支持多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// 在test1元素后面插入集合中每个匹配的元素</span></span></div><div class="line"><span class="actionscript"><span class="comment">// 不支持多参数</span></span></div><div class="line"><span class="handlebars"><span class="xml">$('<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>测试insertBefore方法增加<span class="tag">&lt;/<span class="name">p</span>&gt;</span>','<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span>').insertBefore($(".test1"));</span></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">$(<span class="string">'#bt2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="actionscript"><span class="comment">// 在test1元素后面插入集合中每个匹配的元素</span></span></div><div class="line"><span class="actionscript"><span class="comment">// 不支持多参数</span></span></div><div class="line"><span class="handlebars"><span class="xml">$('<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>测试insertAfter方法增加<span class="tag">&lt;/<span class="name">p</span>&gt;</span>','<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span>').insertAfter($(".test2"));</span></span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><div id="disqus_thread"></div><br>  <script></p><p>  /**</p><ul><li>RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</li><li><p>LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: <a href="https://disqus.com/admin/universalcode/#configuration-variables*/">https://disqus.com/admin/universalcode/#configuration-variables*/</a></p><p>(function() { // DON’T EDIT BELOW THIS LINE<br>var d = document, s = d.createElement(‘script’);<br>s.src = ‘<a href="https://https-xrlrf-github-io.disqus.com/embed.js">https://https-xrlrf-github-io.disqus.com/embed.js</a>‘;<br>s.setAttribute(‘data-timestamp’, +new Date());<br>(d.head || d.body).appendChild(s);<br>})();<br></script></p><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div><br><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script></p><!-- UY END -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DOM创建节点及节点属性&quot;&gt;&lt;a href=&quot;#DOM创建节点及节点属性&quot; class=&quot;headerlink&quot; title=&quot;DOM创建节点及节点属性&quot;&gt;&lt;/a&gt;DOM创建节点及节点属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;通过JavaScript可以很方便的获取DO
      
    
    </summary>
    
      <category term="jQuery学习" scheme="http://wustxiao.cn/categories/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="jQuery" scheme="http://wustxiao.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>DOM事件探秘</title>
    <link href="http://wustxiao.cn/2017/10/26/DOM%E4%BA%8B%E4%BB%B6%E6%8E%A2%E7%A7%98/"/>
    <id>http://wustxiao.cn/2017/10/26/DOM事件探秘/</id>
    <published>2017-10-26T10:21:58.000Z</published>
    <updated>2017-10-26T10:46:25.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><blockquote><p>即事件最开始由最具体的元素（文档中嵌套层次最深的节点元素）</p></blockquote><h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><blockquote><p>和事件冒泡相反的概念</p></blockquote><h3 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h3><h3 id="DOM０级事件处理程序"><a href="#DOM０级事件处理程序" class="headerlink" title="DOM０级事件处理程序"></a>DOM０级事件处理程序</h3><blockquote><p>事件以HTML的属性出现</p></blockquote><h3 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(id3);</div><div class="line">btn3.addEventListener(<span class="string">'click'</span>,showMes,<span class="keyword">false</span>);</div><div class="line">btn3.removeEventListener(<span class="string">'click'</span>,showMes,<span class="keyword">false</span>);</div></pre></td></tr></table></figure><p>优点：</p><ol><li>为同一个按钮添加多个函数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;事件冒泡&quot;&gt;&lt;a href=&quot;#事件冒泡&quot; class=&quot;headerlink&quot; title=&quot;事件冒泡&quot;&gt;&lt;/a&gt;事件冒泡&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;即事件最开始由最具体的元素（文档中嵌套层次最深的节点元素）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript学习" scheme="http://wustxiao.cn/categories/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://wustxiao.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>C++GUI Programming with QT学习笔记day04</title>
    <link href="http://wustxiao.cn/2017/10/22/C-GUI-Programming-with-QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day04/"/>
    <id>http://wustxiao.cn/2017/10/22/C-GUI-Programming-with-QT学习笔记day04/</id>
    <published>2017-10-22T13:21:11.000Z</published>
    <updated>2017-10-23T14:34:58.961Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4077777-c50e74a923d98320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建Qt项目"></p><p>选择基类有三个选项</p><ul><li>QMainWindow 　　　　　　　　　＃带菜单栏的，主要是在PC下使用</li><li>QWidget　　　　　　　　　　　　# 空白窗口</li><li>QDialog　　　　　　　　　　　　# 对话框</li></ul><h3 id="Qt4与Qt5信号与槽机制的区别"><a href="#Qt4与Qt5信号与槽机制的区别" class="headerlink" title="Qt4与Qt5信号与槽机制的区别"></a>Qt4与Qt5信号与槽机制的区别</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">Qt4:</span> <span class="string">QObject:</span>:connect(button,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(quit()));</div><div class="line"><span class="string">Qt5:</span> connect(button,&amp;<span class="string">QPushButton:</span>:clicked,<span class="keyword">this</span>,&amp;<span class="string">QWidget:</span>:close);</div></pre></td></tr></table></figure><h3 id="自定义槽函数"><a href="#自定义槽函数" class="headerlink" title="自定义槽函数"></a>自定义槽函数</h3><ol><li>在Qt4里面，自定义槽函数只能放在<code>public slots</code>下面</li><li>在Qt5里面，没有那么严格，普通的成员函数或者全局函数，静态函数都可以作为槽函数。</li><li>在Qt5里面，槽函数还可以是lambda匿名函数表达式</li></ol><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">connect(<span class="name">button</span>,<span class="symbol">&amp;QPushButton</span>:<span class="symbol">:clicked</span>,</div><div class="line">              []()</div><div class="line">              &#123;</div><div class="line">              &#125;</div><div class="line">)</div></pre></td></tr></table></figure><p><strong>[]的作用是把外部变量传进来</strong><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="string">b4</span>](<span class="link"></span>)</div><div class="line">&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><code>[=]: 把外部所有局部变量，类中所有成员通过值传递方式，默认为只读</code></li><li><code>[&amp;]: 把外部所有局部变量，通过址传递</code></li><li><code>[this]: 类中所有成员以值传递方式</code></li></ul><blockquote><p>Qt头文件没有.h<br>头文件和类名一样</p></blockquote><h3 id="Qt项目文件"><a href="#Qt项目文件" class="headerlink" title="Qt项目文件"></a>Qt项目文件</h3><p>.pro</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 模块</span></div><div class="line">QT　　　　　　　＋＝　core gui</div><div class="line"><span class="comment"># 高于４版本，添加QT+=widgets,为了兼容Qt4</span></div><div class="line"><span class="section">greaterThan(QT_MAJOR_VERSION,4):QT +=widgets</span></div><div class="line"><span class="comment"># 应用程序的名字</span></div><div class="line">TARGET=  mike</div><div class="line"><span class="comment"># 指定makefile的类型,app|lib</span></div><div class="line">TEMPLATE = app</div><div class="line"><span class="comment"># 源文件</span></div><div class="line">SOURCE += main.cpp\</div></pre></td></tr></table></figure><blockquote><p>自定义槽，普通函数的用法<br>Qt5: 任意的成员函数，普通全局函数，静态函数<br>槽函数需要和信号一致（参数，返回值）<br>由于信号都是没有返回值的，所以，槽函数一定没有返回值<br>信号的参数可以多于槽，但槽的参数不能多于信号的参数</p></blockquote><p><strong>注意：引用lambda表达式时，需要在项目文件中末尾添加CONFIG += C++11</strong></p><h3 id="Qt样式表"><a href="#Qt样式表" class="headerlink" title="Qt样式表"></a>Qt样式表</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">ui</span>-&gt;</span><span class="function"><span class="title">label</span>-&gt;</span>setStyleSheet(<span class="string">"QLabel&#123;"</span></div><div class="line">                         <span class="string">"color:red;"</span></div><div class="line">                         <span class="string">"background-color:black&#125;"</span>);</div></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><ul><li><p>局部布局</p><blockquote><p>选中要局部布局的部件进行勾选</p></blockquote></li><li><p>全局布局</p></li></ul><p>注意：<br><strong>先局部布局，再全局布局<br>布局时，借用容器来分成多个模块</strong></p><p>使用自定义控件时，在需要的地方，右击提升为，选择自己写的部件类。</p><p><img src="http://upload-images.jianshu.io/upload_images/4077777-8807b610bb3376d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提升为.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4077777-c50e74a923d98320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="Qt学习" scheme="http://wustxiao.cn/categories/Qt%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Qt" scheme="http://wustxiao.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>jQuery基础</title>
    <link href="http://wustxiao.cn/2017/10/22/jQuery%E5%9F%BA%E7%A1%80/"/>
    <id>http://wustxiao.cn/2017/10/22/jQuery基础/</id>
    <published>2017-10-22T05:27:37.000Z</published>
    <updated>2017-10-24T12:50:12.381Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jQueryHelloWorld体验"><a href="#jQueryHelloWorld体验" class="headerlink" title="jQueryHelloWorld体验"></a>jQueryHelloWorld体验</h3><p>当页面加载完成后，在页面中以居中的方式显示“您好！Hello World!”字样。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个简单的jQuery程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        div&#123;</span></div><div class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:8px</span> 0<span class="selector-tag">px</span>;</span></div><div class="line"><span class="css">            <span class="selector-tag">font-size</span><span class="selector-pseudo">:12px</span>;</span></div><div class="line"><span class="css">            <span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span></div><div class="line"><span class="css">            <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#888</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">            $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    $(<span class="string">"div"</span>).html(<span class="string">"您好！Hello World!"</span>);</span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>代码分析：</p><blockquote><p><code>$(document).ready</code>的作用是等页面的文档（document）中的节点都加载完毕后，再执行后续的代码，因为我们在执行代码的时候，可能会依赖页面的某一个元素，我们要确保这个元素真正的的被加载完毕后才能正确的使用。</p></blockquote><h3 id="jQuery对象与DOM对象"><a href="#jQuery对象与DOM对象" class="headerlink" title="jQuery对象与DOM对象"></a>jQuery对象与DOM对象</h3><pre><code>对于才开始接触jQuery库的初学者，我们需要清楚认识一点：jQuery对象与DOM对象是不一样的</code></pre><p>可能一时半会分不清楚哪些是jQuery对象，哪些是DOM对象，下面重点介绍一下jQuery对象，以及两者相互间的转换。</p><p>通过一个简单的例子，简单区分下jQuery对象与DOM对象：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">”imooc”</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>我们要获取页面上这个id为imooc的p元素，然后给这个文本节点增加一段文字：“您好！通过慕课网学习jQuery才是最佳的途径”，并且让文字颜色变成红色。</p><p>普通处理，通过标准<strong>JavaScript处理：</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">'imooc'</span>);</div><div class="line">p.innerHTML = <span class="string">'您好！通过慕课网学习jQuery才是最佳的途径'</span>;</div><div class="line">p.style.color = <span class="string">'red'</span>;</div></pre></td></tr></table></figure><p>通过原生DOM模型提供的document.getElementById(“imooc”) 方法获取的DOM元素就是一个DOM对象，再通过innerHTML与style属性处理文本与颜色。</p><p><strong>jQuery的处理：</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="variable">$p</span> = <span class="variable">$(</span><span class="string">'#imooc'</span>);</div><div class="line"><span class="variable">$p</span>.html(<span class="string">'您好！通过慕课网学习jQuery才是最佳的途径'</span>).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</div></pre></td></tr></table></figure><ol><li><p>通过<code>$(&#39;#imooc&#39;)</code>方法会得到一个<code>$p的jQuery对象</code>，<code>$p</code>是一个类数组对象。这个对象里面包含了DOM对象的信息，然后封装了很多操作方法，调用自己的方法html与css，得到的效果与标准的JavaScript处理结果是一致的。</p></li><li><p>通过标准的JavaScript操作DOM与jQuyer操作DOM的对比，我们不难发现：</p></li></ol><ul><li>通过jQuery方法包装后的对象，是一个类数组对象。它与DOM对象<strong>完全不同</strong>，唯一相似的是它们都能操作DOM。</li><li>通过jQuery处理DOM的操作，可以让开发者更专注业务逻辑的开发，而<strong>不需要我们具体知道哪个DOM节点有那些方法</strong>，也不需要关心不同浏览器的兼容性问题，我们通过jQuery提供的API进行开发，代码也会更加精短。</li></ul><h3 id="jQuery对象转化成DOM对象"><a href="#jQuery对象转化成DOM对象" class="headerlink" title="jQuery对象转化成DOM对象"></a>jQuery对象转化成DOM对象</h3><pre><code>jQuery库本质上还是JavaScript代码，它只是对JavaScript语言进行包装处理，为的是提供更好更方便快捷的DOM处理与开发中经常使用的功能。我们使用jQuery的同时也能混合JavaScript原生代码一起使用。在很多场景中，我们需要jQuery与DOM能够相互的转换，它们都是可以操作的DOM元素，jQuery是一个类数组对象，而DOM对象就是一个单独的DOM元素。</code></pre><p><strong>如何把jQuery对象转成DOM对象？</strong></p><p>利用数组下标的方式读取到jQuery中的DOM对象</p><p>HTML代码</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span>&gt;元素一&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span>&gt;元素二&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span>&gt;元素三&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure><p>JavaScript代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="variable">$div</span> = $(<span class="string">'div'</span>) <span class="comment">//jQuery对象</span></div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">div</span> = <span class="variable">$div</span>[<span class="number">0</span>] <span class="comment">//转化成DOM对象</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'red'</span> <span class="comment">//操作dom对象的属性</span></div></pre></td></tr></table></figure><blockquote><p>用jQuery找到所有的div元素（3个），因为jQuery对象也是一个数组结构，可以通过数组下标索引找到第一个div元素，通过返回的div对象，调用它的style属性修改第一个div元素的颜色。这里需要注意的一点是，数组的索引是从0开始的，也就是第一个元素下标是0</p></blockquote><p>通过jQuery自带的get()方法</p><p>jQuery对象自身提供一个.get() 方法允许我们直接访问jQuery对象中相关的DOM节点，get方法中提供一个元素的索引：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> <span class="variable">$div</span> = $(<span class="string">'div'</span>) <span class="comment">//jQuery对象</span></div><div class="line"><span class="selector-tag">var</span> <span class="selector-tag">div</span> = <span class="variable">$div</span>.get(<span class="number">0</span>) <span class="comment">//通过get方法，转化成DOM对象</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">'red'</span> <span class="comment">//操作dom对象的属性</span></div></pre></td></tr></table></figure><p>其实我们翻开源码，看看就知道了，get方法就是利用的第一种方式处理的，只是包装成一个get让开发者更直接方便的使用。</p><h3 id="DOM对象转化成jQuery对象"><a href="#DOM对象转化成jQuery对象" class="headerlink" title="DOM对象转化成jQuery对象"></a>DOM对象转化成jQuery对象</h3><pre><code>相比较jQuery转化成DOM，开发中更多的情况是把一个dom对象加工成jQuery对象。$(参数)是一个多功能的方法，通过传递不同的参数而产生不同的作用。</code></pre><p>如果传递给$(DOM)函数的参数是一个DOM对象，jQuery方法会把这个DOM对象给包装成一个新的jQuery对象<br>通过$(dom)方法将普通的dom对象加工成jQuery对象之后，我们就可以调用jQuery的方法了</p><p>HTML代码</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span>&gt;元素一&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span>&gt;元素二&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span>&gt;元素三&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure><p>JavaScript代码</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">div</span> = document.getElementsByTagName(<span class="string">'div'</span>); <span class="comment">//dom对象</span></div><div class="line"><span class="keyword">var</span> $<span class="keyword">div</span> = $(<span class="keyword">div</span>); <span class="comment">//jQuery对象</span></div><div class="line"><span class="keyword">var</span> $first = $<span class="keyword">div</span>.first(); <span class="comment">//找到第一个div元素</span></div><div class="line">$first.css(<span class="string">'color'</span>, <span class="string">'red'</span>); <span class="comment">//给第一个元素设置颜色</span></div></pre></td></tr></table></figure><pre><code>通过getElementsByTagName获取到所有div节点的元素，结果是一个dom合集对象，不过这个对象是一个数组合集(3个div元素)。通过$(div)方法转化成jQuery对象，通过调用jQuery对象中的first与css方法查找第一个元素并且改变其颜色。</code></pre><h3 id="jQuery选择器之id选择器"><a href="#jQuery选择器之id选择器" class="headerlink" title="jQuery选择器之id选择器"></a>jQuery选择器之id选择器</h3><pre><code>页面的任何操作都需要节点的支撑，开发者如何快速高效的找到指定的节点也是前端开发中的一个重点。jQuery提供了一系列的选择器帮助开发者达到这一目的，让开发者可以更少的处理复杂选择过程与性能优化，更多专注业务逻辑的编写。</code></pre><p>jQuery几乎支持主流的css1~css3选择器的写法，我们从最简单的也是最常用的开始学起</p><p>id选择器：一个用来查找的ID，即元素的id属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">( <span class="string">"#id"</span> )</span></div></pre></td></tr></table></figure><p>id选择器也是基本的选择器，jQuery内部使用JavaScript函数document.getElementById()来处理ID的获取。原生语法的支持总是非常高效的，所以在操作DOM的获取上，如果能采用id的话尽然考虑用这个选择器</p><p>值得注意：</p><pre><code>id是唯一的，每个id值在一个页面中只能使用一次。如果多个元素分配了相同的id，将只匹配该id选择集合的第一个DOM元素。但这种行为不应该发生;有超过一个元素的页面使用相同的id是无效的</code></pre><h3 id="jQuery选择器之类选择器"><a href="#jQuery选择器之类选择器" class="headerlink" title="jQuery选择器之类选择器"></a>jQuery选择器之类选择器</h3><pre><code>类选择器，顾名思义，通过class样式类名来获取节点</code></pre><p>描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">( <span class="string">".class"</span> )</span></div></pre></td></tr></table></figure><p>类选择器，相对id选择器来说，效率相对会低一点，但是优势就是可以多选</p><p><strong>同样的jQuery在实现上，对于类选择器，如果浏览器支持，jQuery使用JavaScript的原生getElementsByClassName()函数来实现的</strong></p><p>右边实现一个原生getElementsByClassName()函数的实现代码与jQuery实现代码的比较</p><p>我们不难发现：</p><blockquote><p>jQuery除了选择上的简单，而且没有再次使用循环处理<br>不难想到$(“.imooc”).css()方法内部肯定是带了一个隐式的循环处理，所以使用jQuery选择节点，不仅仅只是选择上的简单，同时还增加很多关联的便利操作，后续我们还会慢慢的学到其他的优势。</p></blockquote><h3 id="jQuery选择器之元素选择器"><a href="#jQuery选择器之元素选择器" class="headerlink" title="jQuery选择器之元素选择器"></a>jQuery选择器之元素选择器</h3><pre><code>元素选择器：根据给定（html）标记名称选择所有的元素</code></pre><p>描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">( <span class="string">"element"</span> )</span></div></pre></td></tr></table></figure><p>搜索指定元素标签名的所有节点，这个是一个合集的操作。同样的也有原生方法<strong>getElementsByTagName()</strong>函数支持</p><p>右边编辑器代码所示：</p><p>第一组：通过getElementsByTagName方法得到页面所有的<div>元素</div></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</div></pre></td></tr></table></figure><pre><code>divs是dom合集对象，通过循环给每一个合集中的&lt;div&gt;元素赋予新的boder样式</code></pre><p>第二组：同样的效果，$(“p”)选取所有的<code>&lt;p&gt;</code>元素，通过css方法直接赋予样式</p><h3 id="jQuery选择器之全选择器（-选择器）"><a href="#jQuery选择器之全选择器（-选择器）" class="headerlink" title="jQuery选择器之全选择器（*选择器）"></a>jQuery选择器之全选择器（*选择器）</h3><pre><code>在CSS中，经常会在第一行写下这样一段样式</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* &#123;<span class="attribute">padding</span>: <span class="number">0</span>; <span class="attribute">margin</span>: <span class="number">0</span>;&#125;</div></pre></td></tr></table></figure><p>通配符<em>意味着给所有的元素设置默认的边距。jQuery中我们也可以通过传递</em>选择器来选中文档页面中的元素</p><p>描述：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">( <span class="string">"*"</span> )</span></div></pre></td></tr></table></figure><p>抛开jQuery，如果要获取文档中所有的元素，通过document.getElementsByTagName()中传递”*”同样可以获取到</p><p>不难发现，id、class、tag都可以通过原生的方法获取到对应的节点，但是我们还需要考虑一个兼容性的问题，我这里顺便提及一下，比如:</p><blockquote><p>IE会将注释节点实现为元素，所以在IE中调用getElementsByTagName里面会包含注释节点，这个通常是不应该的<br>getElementById的参数在IE8及较低的版本不区分大小写<br>IE7及较低的版本中，表单元素中，如果表单A的name属性名用了另一个元素B的ID名并且A在B之前，那么getElementById会选中A<br>IE8及较低的版本，浏览器不支持getElementsByClassName<br>看到了吧，作为一名合格的前端不是那么简单的，就一个基本的选择器上面都需要做这么多兼容，幸好有jQuery的出现，让我们省了很多功夫，如果大家对jQuery的实现感兴趣，可以看我另一个门课程<br>《jQuery源码解析》</p></blockquote><h3 id="jQuery选择器之层级选择器"><a href="#jQuery选择器之层级选择器" class="headerlink" title="jQuery选择器之层级选择器"></a>jQuery选择器之层级选择器</h3><blockquote><p>文档中的所有的节点之间都是有这样或者那样的关系。我们可以把节点之间的关系可以用传统的家族关系来描述，可以把文档树当作一个家谱，那么节点与节点直接就会存在父子，兄弟，祖孙的关系了。</p></blockquote><pre><code>选择器中的层级选择器就是用来处理这种关系子元素 后代元素 兄弟元素 相邻元素</code></pre><p>通过一个列表，对比层级选择器的区别</p><p><img src="http://img.blog.csdn.net/20171022105331607?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="jQuery选择器之基本筛选选择器"><a href="#jQuery选择器之基本筛选选择器" class="headerlink" title="jQuery选择器之基本筛选选择器"></a>jQuery选择器之基本筛选选择器</h3><blockquote><p>很多时候我们不能直接通过基本选择器与层级选择器找到我们想要的元素，为此jQuery提供了一系列的筛选选择器用来更快捷的找到所需的DOM元素。筛选选择器很多都不是CSS的规范，而是jQuery自己为了开发者的便利延展出来的选择器</p></blockquote><p>筛选选择器的用法与CSS中的伪元素相似，选择器用冒号“：”开头，通过一个列表，看看基本筛选器的描述：</p><p><img src="http://img.blog.csdn.net/20171022110252963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意事项：</p><ol><li><code>:eq(), :lt(), :gt(), :even, :odd</code> 用来筛选他们前面的匹配表达式的集合元素，根据之前匹配的元素在进一步筛选，<strong>注意jQuery合集都是从0开始索引</strong></li><li>gt是一个段落筛选，从指定索引的下一个开始，gt(1) 实际从2开始</li></ol><h3 id="jQuery选择器之内容筛选选择器"><a href="#jQuery选择器之内容筛选选择器" class="headerlink" title="jQuery选择器之内容筛选选择器"></a>jQuery选择器之内容筛选选择器</h3><pre><code>基本筛选选择器针对的都是元素DOM节点，如果我们要通过内容来过滤，jQuery也提供了一组内容筛选选择器，当然其规则也会体现在它所包含的子元素或者文本内容上</code></pre><p>内容过滤器描述如下表：</p><p><img src="http://img.blog.csdn.net/20171022111948487?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意事项：</p><ol><li>:contains与:has都有查找的意思，但是contains查找包含“指定文本”的元素，has查找包含“指定元素”的元素</li><li>如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。</li><li>:parent与:empty是相反的，两者所涉及的子元素，包括文本节点</li></ol><h3 id="jQuery选择器之可见性筛选选择器"><a href="#jQuery选择器之可见性筛选选择器" class="headerlink" title="jQuery选择器之可见性筛选选择器"></a>jQuery选择器之可见性筛选选择器</h3><pre><code>元素有显示状态与隐藏状态，jQuery根据元素的状态扩展了可见性筛选选择器:visible与:hidden</code></pre><p>描述如下：</p><p><img src="http://img.blog.csdn.net/20171022113500855?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>这2个选择器都是 jQuery 延伸出来的，看起来比较简单，但是元素可见性依赖于适用的样式</p><blockquote><p>:hidden选择器，不仅仅包含样式是display=”none”的元素，还包括隐藏表单、visibility等等</p></blockquote><p>我们有几种方式可以隐藏一个元素：</p><ol><li>CSS display的值是none。</li><li>type=”hidden”的表单元素。</li><li>宽度和高度都显式设置为0。</li><li>一个祖先元素是隐藏的，该元素是不会在页面上显示</li><li>CSS visibility的值是hidden</li><li>CSS opacity的指是0</li></ol><p>如果元素中占据文档中一定的空间,元素被认为是可见的。<br>可见元素的宽度或高度，是大于零。<br><strong>元素的visibility: hidden 或 opacity: 0被认为是可见的，因为他们仍然占用空间布局。</strong><br>不在文档中的元素是被认为是不可见的，如果当他们被插入到文档中，jQuery没有办法知道他们是否是可见的，因为元素可见性依赖于适用的样式</p><h3 id="jQuery选择器之属性筛选选择器"><a href="#jQuery选择器之属性筛选选择器" class="headerlink" title="jQuery选择器之属性筛选选择器"></a>jQuery选择器之属性筛选选择器</h3><pre><code>属性选择器让你可以基于属性来定位一个元素。可以只指定该元素的某个属性，这样所有使用该属性而不管它的值，这个元素都将被定位，也可以更加明确并定位在这些属性上使用特定值的元素，这就是属性选择器展示它们的威力的地方。</code></pre><p>描述如下：</p><p><img src="http://img.blog.csdn.net/20171022131245098?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>浏览器支持：</p><p>[att=val]、[att]、[att|=val]、[att~=val]  属于CSS 2.1规范<br>[ns|attr]、[att^=val]、[att*=val]、[att$=val] 属于CSS3规范<br>[name!=”value”]  属于jQuery 扩展的选择器</p><pre><code>CSS选择器无论CSS2.1版本还是CSS3版本，IE7和IE8都支持，webkit、Gecko核心及Opera也都支持，只有IE6以下浏览器才不支持在这么多属性选择器中[attr=&quot;value&quot;]和[attr*=&quot;value&quot;]是最实用的[attr=&quot;value&quot;]能帮我们定位不同类型的元素，特别是表单form元素的操作，比如说input[type=&quot;text&quot;],input[type=&quot;checkbox&quot;]等[attr*=&quot;value&quot;]能在网站中帮助我们匹配不同类型的文件</code></pre><h3 id="jQuery选择器之子元素筛选选择器"><a href="#jQuery选择器之子元素筛选选择器" class="headerlink" title="jQuery选择器之子元素筛选选择器"></a>jQuery选择器之子元素筛选选择器</h3><pre><code>子元素筛选选择器不常使用，其筛选规则比起其它的选择器稍微要复杂点</code></pre><p>  子元素筛选选择器描述表：</p><p>  <img src="http://img.blog.csdn.net/20171022231716234?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>  <strong>注意事项</strong>：</p><ol><li>:first只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)</li><li>:last 只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素</li><li>如果子元素只有一个的话，:first-child与:last-child是同一个</li><li>:only-child匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配</li><li>jQuery实现:nth-child(n)是严格来自CSS规范，所以n值是“索引”，也就是说，从1开始计数，:nth-child(index)从1开始的，而eq(index)是从0开始的</li><li>nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算</li></ol><h3 id="jQuery选择器之表单元素选择器"><a href="#jQuery选择器之表单元素选择器" class="headerlink" title="jQuery选择器之表单元素选择器"></a>jQuery选择器之表单元素选择器</h3><pre><code>无论是提交还是传递数据，表单元素在动态交互页面的作用是非常重要的。jQuery中专门加入了表单选择器，从而能够极其方便地获取到某个类型的表单元素</code></pre><p>  表单选择器的具体方法描述：</p><p>  <img src="http://img.blog.csdn.net/20171022232357653?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>  注意事项：</p><p>  除了input筛选选择器，几乎每个表单类别筛选器都对应一个input元素的type值。大部分表单类别筛选器可以使用属性筛选器替换。比如 <code>$(&#39;:password&#39;) == $(&#39;[type=password]&#39;)</code></p><h3 id="jQuery选择器之表单对象属性筛选选择器"><a href="#jQuery选择器之表单对象属性筛选选择器" class="headerlink" title="jQuery选择器之表单对象属性筛选选择器"></a>jQuery选择器之表单对象属性筛选选择器</h3><pre><code>除了表单元素选择器外，表单对象属性筛选选择器也是专门针对表单元素的选择器，可以附加在其他选择器的后面，主要功能是对所选择的表单元素进行筛选</code></pre><p>  表单筛选选择器的描述：</p><p>  <img src="http://img.blog.csdn.net/20171022232820569?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>  注意事项：</p><blockquote><p>选择器适用于复选框和单选框，对于下拉框元素, 使用 :selected 选择器<br>在某些浏览器中，选择器:checked可能会错误选取到<code>&lt;option&gt;</code>元素，所以保险起见换用选择器input:checked，确保只会选取<code>&lt;input&gt;</code>元素</p></blockquote><h3 id="jQuery选择器之特殊选择器this"><a href="#jQuery选择器之特殊选择器this" class="headerlink" title="jQuery选择器之特殊选择器this"></a>jQuery选择器之特殊选择器this</h3><pre><code>相信很多刚接触jQuery的人，很多都会对$(this)和this的区别模糊不清，那么这两者有什么区别呢？</code></pre><p>  this是JavaScript中的关键字，指的是当前的上下文对象，简单的说就是方法/属性的所有者</p><p>  下面例子中，imooc是一个对象，拥有name属性与getName方法,在getName中this指向了所属的对象imooc</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imooc = &#123;</div><div class="line">    name:<span class="string">"慕课网"</span>,</div><div class="line">    getName:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//this,就是imooc对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">imooc.getName(); <span class="comment">//慕课网</span></div></pre></td></tr></table></figure><pre><code>当然在JavaScript中this是动态的，也就是说这个上下文对象都是可以被动态改变的(可以通过call,apply等方法)，具体的大家可以查阅相关资料同样的在DOM中this就是指向了这个html元素对象，因为this就是DOM元素本身的一个引用</code></pre><p>  假如给页面一个P元素绑定一个事件:</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//this === p</span></div><div class="line">    <span class="comment">//以下两者的修改都是等价的</span></div><div class="line">    <span class="keyword">this</span>.style.color = <span class="string">"red"</span>;</div><div class="line">    p.style.color = <span class="string">"red"</span>;</div><div class="line">&#125;,<span class="literal">false</span>);</div></pre></td></tr></table></figure><p>  通过addEventListener绑定的事件回调中，this指向的是当前的dom对象，所以再次修改这样对象的样式，只需要通过this获取到引用即可</p>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this<span class="selector-class">.style</span><span class="selector-class">.color</span> = <span class="string">"red"</span></div></pre></td></tr></table></figure><p>  但是这样的操作其实还是很不方便的，这里面就要涉及一大堆的样式兼容，如果通过jQuery处理就会简单多了，我们只需要把this加工成jQuery对象</p><p>  换成jQuery的做法：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'p'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//把p元素转化成jQuery的对象</span></div><div class="line">    <span class="keyword">var</span> $<span class="keyword">this</span>= $(<span class="keyword">this</span>)</div><div class="line">    $<span class="keyword">this</span>.css(<span class="string">'color'</span>,<span class="string">'red'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><pre><code>通过把$()方法传入当前的元素对象的引用this，把这个this加工成jQuery对象，我们就可以用jQuery提供的快捷方法直接处理样式了</code></pre><p>  总体：</p><blockquote><p>this，表示当前的上下文对象是一个html对象，可以调用html对象所拥有的属性和方法。<br>$(this),代表的上下文对象是一个jquery的上下文对象，可以调用jQuery的方法和属性值。</p></blockquote><h3 id="jQuery的属性与样式之-attr-与-removeAttr"><a href="#jQuery的属性与样式之-attr-与-removeAttr" class="headerlink" title="jQuery的属性与样式之.attr()与.removeAttr()"></a>jQuery的属性与样式之.attr()与.removeAttr()</h3><pre><code>每个元素都有一个或者多个特性，这些特性的用途就是给出相应元素或者其内容的附加信息。如：在img元素中，src就是元素的特性，用来标记图片的地址。</code></pre><p>  操作特性的DOM方法主要有3个，getAttribute方法、setAttribute方法和removeAttribute方法，就算如此在实际操作中还是会存在很多问题，这里先不说。而在jQuery中用一个attr()与removeAttr()就可以全部搞定了，包括兼容问题</p><p>  jQuery中用attr()方法来获取和设置元素属性,attr是attribute（属性）的缩写，在jQuery DOM操作中会经常用到attr()</p><p>  <strong>attr()有4个表达式</strong></p><ol><li>attr(传入属性名)：获取属性的值</li><li>attr(属性名, 属性值)：设置属性的值</li><li>attr(属性名,函数值)：设置属性的函数值</li><li><p>attr(attributes)：给指定元素设置多个属性值，即：{属性名一: “属性值一” , 属性名二: “属性值二” , … … }</p><p><strong>removeAttr()删除方法</strong></p><p>.removeAttr( attributeName ) : 为匹配的元素集合中的每个元素中移除一个属性（attribute）</p><p>优点：</p><p> attr、removeAttr都是jQuery为了属性操作封装的，直接在一个 jQuery 对象上调用该方法，很容易对属性进行操作，也不需要去特意的理解浏览器的属性名不同的问题</p><p><strong>注意的问题：</strong></p><p>dom中有个概念的区分：Attribute和Property翻译出来都是“属性”，《js高级程序设计》书中翻译为“特性”和“属性”。简单理解，Attribute就是dom节点自带的属性</p><p>例如：html中常用的id、class、title、align等：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"immooc"</span> title=<span class="string">"慕课网"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure><p>而Property是这个DOM元素作为对象，其附加的内容，例如,tagName, nodeName, nodeType,, defaultChecked, 和 defaultSelected 使用.prop()方法进行取值或赋值等</p><p><strong>获取Attribute就需要用attr，获取Property就需要用prop</strong></p><h3 id="jQuery的属性与样式之html-及-text"><a href="#jQuery的属性与样式之html-及-text" class="headerlink" title="jQuery的属性与样式之html()及.text()"></a>jQuery的属性与样式之html()及.text()</h3><p> 读取、修改元素的html结构或者元素的文本内容是常见的DOM操作，jQuery针对这样的处理提供了2个便捷的方法.html()与.text()</p><p>.html()方法</p><p> 获取集合中第一个匹配元素的HTML内容 或 设置每一个匹配元素的html内容，具体有3种用法：</p></li><li><p>.html() 不传入值，就是获取集合中第一个匹配元素的HTML内容</p></li><li>.html( htmlString )  设置每一个匹配元素的html内容</li><li><p>.html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数</p><p>注意事项：</p><p> .html()方法内部使用的是DOM的innerHTML属性来处理的，所以在设置与获取上需要注意的一个最重要的问题，这个操作是针对整个HTML内容（不仅仅只是文本内容）</p><p>.text()方法</p><p> 得到匹配元素集合中每个元素的文本内容结合，包括他们的后代，或设置匹配元素集合中每个元素的文本内容为指定的文本内容。，具体有3种用法：</p></li><li><p>.text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代</p></li><li>.text( textString ) 用于设置匹配元素内容的文本</li><li><p>.text( function(index, text) ) 用来返回设置文本内容的一个函数<br>注意事项：</p><p>.text()结果返回一个字符串，包含所有匹配元素的合并文本</p><p><strong>.html与.text的异同:</strong></p></li><li><p>.html与.text的方法操作是一样，只是在具体针对处理对象不同</p></li><li>.html处理的是元素内容，.text处理的是文本内容</li><li>.html只能使用在HTML文档中，.text 在XML 和 HTML 文档中都能使用</li><li>如果处理的对象只有一个子文本节点，那么html处理的结果与text是一样的</li><li><p>火狐不支持innerText属性，用了类似的textContent属性，.text()方法综合了2个属性的支持，所以可以兼容所有浏览器</p><h3 id="jQuery的属性与样式之-val"><a href="#jQuery的属性与样式之-val" class="headerlink" title="jQuery的属性与样式之.val()"></a>jQuery的属性与样式之.val()</h3><p> jQuery中有一个.val()方法主要是用于处理表单元素的值，比如 input, select 和 textarea。</p><p>.val()方法</p><p> .val()无参数，获取匹配的元素集合中第一个元素的当前值<br> .val( value )，设置匹配的元素集合中每个元素的值<br> .val( function ) ，一个用来返回设置值的函数</p><p>注意事项：</p></li><li><p>通过.val()处理select元素， 当没有选择项被选中，它返回null</p></li><li>.val()方法多用来设置表单的字段的值</li><li>如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值</li></ol><p>  .html(),.text()和.val()的差异总结：  </p><ol><li><font color="red">.html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，.val()是用来读取表单元素的”value”值。其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，如果其应用在多个元素上时，只能读取第一个表单元素的”value”值，但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。</font></li><li><font color="red">.html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。</font></li><li><font color="red">.html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容。</font><h3 id="jQuery的属性与样式之增加样式-addClass"><a href="#jQuery的属性与样式之增加样式-addClass" class="headerlink" title="jQuery的属性与样式之增加样式.addClass()"></a>jQuery的属性与样式之增加样式.addClass()</h3><p> 通过动态改变类名（class），可以让其修改元素呈现出不同的效果。在HTML结构中里，多个class以空格分隔，当一个节点（或称为一个标签）含有多个class时，DOM元素响应的className属性获取的不是class名称的数组，而是一个含有空格的字符串，这就使得多class操作变得很麻烦。同样的jQuery开发者也考虑到这种情况，增加了一个.addClass()方法，用于动态增加class类名</p><p>.addClass( className )方法</p></li><li><p>.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名</p></li><li><p>.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名<br>注意事项：</p><p>.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上</p><p>简单的描述下：在p元素增加一个newClass的样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"orgClass"</span>&gt;</div><div class="line">$(<span class="string">"p"</span>).addClass(<span class="string">"newClass"</span>)</div></pre></td></tr></table></figure><p><strong>那么p元素的class实际上是 class=”orgClass newClass”样式只会在原本的类上继续增加，通过空格分隔</strong></p><h3 id="jQuery的属性与样式之删除样式-removeClass"><a href="#jQuery的属性与样式之删除样式-removeClass" class="headerlink" title="jQuery的属性与样式之删除样式.removeClass()"></a>jQuery的属性与样式之删除样式.removeClass()</h3><p> jQuery通过.addClass()方法可以很便捷的增加样式。如果需要样式之间的切换，同样jQuery提供了一个很方便的.removeClass()，它的作用是从匹配的元素中删除全部或者指定的class</p><p>.removeClass( )方法</p></li><li><p>.removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名</p></li><li><p>.removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名</p><p>注意事项</p><p><strong>如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除</strong></p><h3 id="jQuery的属性与样式之切换样式-toggleClass"><a href="#jQuery的属性与样式之切换样式-toggleClass" class="headerlink" title="jQuery的属性与样式之切换样式.toggleClass()"></a>jQuery的属性与样式之切换样式.toggleClass()</h3><p> 在做某些效果的时候，可能会针对同一节点的某一个样式不断的切换，也就是addClass与removeClass的互斥切换，比如隔行换色效果</p><p>jQuery提供一个toggleClass方法用于简化这种互斥的逻辑，通过toggleClass方法动态添加删除Class，一次执行相当于addClass，再次执行相当于removeClass</p><blockquote><p>.toggleClass(<br>)方法：在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类</p></blockquote></li><li><p>.toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名</p></li><li>.toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除</li><li>.toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值</li><li><p>.toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数</p><p>注意事项：</p></li><li><p>toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加</p></li><li><p>toggleClass会保留原有的Class名后新增，通过空格隔开</p><h3 id="jQuery的属性与样式之样式操作-css"><a href="#jQuery的属性与样式之样式操作-css" class="headerlink" title="jQuery的属性与样式之样式操作.css()"></a>jQuery的属性与样式之样式操作.css()</h3><p> 通过JavaScript获取dom元素上的style属性，我们可以动态的给元素赋予样式属性。在jQuery中我们要动态的修改style属性我们只要使用css()方法就可以实现了</p><p>.css() 方法：获取元素样式属性的计算值或者设置元素的CSS属性</p><p>获取：</p></li><li><p>.css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值</p></li><li><p>.css( propertyNames )：传递一组数组，返回一个对象结果</p><p>设置：</p></li><li><p>.css(propertyName, value )：设置CSS</p></li><li>.css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理</li><li><p>.css( properties )：可以传一个对象，同时设置多个样式</p><p>注意事项：</p></li><li><p>浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px</p></li><li>.css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理</li><li><p>当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css(“width”,50}) 与 .css(“width”,”50px”})一样</p><h3 id="jQuery的属性与样式之-css-与-addClass-设置样式的区别"><a href="#jQuery的属性与样式之-css-与-addClass-设置样式的区别" class="headerlink" title="jQuery的属性与样式之.css()与.addClass()设置样式的区别"></a>jQuery的属性与样式之.css()与.addClass()设置样式的区别</h3><p> 对于样式的设置，我们学了addClass与css方法，那么两者之间有什么区别？</p><p><strong>可维护性：</strong></p></li><li><p>.addClass()的本质是通过定义个class类的样式规则，给元素添加一个或多个类。css方法是通过JavaScript大量代码进行改变元素的样式</p></li><li><p>通过.addClass()我们可以批量的给相同的元素设置统一规则，变动起来比较方便，可以统一修改删除。如果通过.css()方法就需要指定每一个元素是一一的修改，日后维护也要一一的修改，比较麻烦</p><p><strong>灵活性：</strong></p><p> 通过.css()方式可以很容易动态的去改变一个样式的属性，不需要在去繁琐的定义个class类的规则。一般来说在不确定开始布局规则，通过动态生成的HTML代码结构中，都是通过.css()方法处理的</p><p><strong>样式值：</strong></p><p> .addClass()本质只是针对class的类的增加删除，不能获取到指定样式的属性的值，.css()可以获取到指定的样式值。</p><p><strong>样式的优先级：</strong></p><p>css的样式是有优先级的，当外部样式、内部样式和内联样式同一样式规则同时应用于同一个元素的时候，优先级如下</p><p><strong>外部样式 &lt; 内部样式 &lt; 内联样式</strong></p><p> .addClass()方法是通过增加class名的方式，那么这个样式是在外部文件或者内部样式中先定义好的，等到需要的时候在附加到元素上<br> 通过.css()方法处理的是内联样式，直接通过元素的style属性附加到元素上的<br> 通过.css方法设置的样式属性优先级要高于.addClass方法</p><p>总结：</p><font color="red">.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则<br>如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式</font></li></ol><h3 id="jQuery的属性与样式之元素的数据存储"><a href="#jQuery的属性与样式之元素的数据存储" class="headerlink" title="jQuery的属性与样式之元素的数据存储"></a>jQuery的属性与样式之元素的数据存储</h3><pre><code>html5 dataset是新的HTML5标准，允许你在普通的元素标签里嵌入类似data-*的属性，来实现一些简单数据的存取。它的数量不受限制，并且也能由JavaScript动态修改，也支持CSS选择器进行样式设置。这使得data属性特别灵活，也非常强大。有了这样的属性我们能够更加有序直观的进行数据预设或存储。那么在不支持HTML5标准的浏览器中，我们如何实现数据存取?  jQuery就提供了一个.data()的方法来处理这个问题</code></pre><p>  使用jQuery初学者一般不是很关心data方式，这个方法是jquery内部预用的，可以用来做性能优化，比如sizzle选择中可以用来缓存部分结果集等等。当然这个也是非常重要的一个API了，常常用于我们存放临时的一些数据，因为它是直接跟DOM元素对象绑定在一起的</p><p>  jQuery提供的存储接口</p>  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">jQuery</span>.<span class="class"><span class="keyword">data</span>( <span class="title">element</span>, <span class="title">key</span>, <span class="title">value</span> )   //静态接口,存数据</span></div><div class="line"><span class="title">jQuery</span>.<span class="class"><span class="keyword">data</span>( <span class="title">element</span>, <span class="title">key</span> )  //静态接口,取数据   </span></div><div class="line">.<span class="class"><span class="keyword">data</span>( <span class="title">key</span>, <span class="title">value</span> ) //实例接口,存数据</span></div><div class="line">.<span class="class"><span class="keyword">data</span>( <span class="title">key</span> ) //实例接口,存数据</span></div></pre></td></tr></table></figure><p>  2个方法在使用上存取都是通一个接口，传递元素，键值数据。在jQuery的官方文档中，建议用.data()方法来代替。</p><p>  我们把DOM可以看作一个对象，那么我们往对象上是可以存在基本类型，引用类型的数据的，但是这里会引发一个问题，可能会存在循环引用的内存泄漏风险</p><p>  通过jQuery提供的数据接口，就很好的处理了这个问题了，我们不需要关心它底层是如何实现，只需要按照对应的data方法使用就行了</p><p>  同样的也提供2个对应的删除接口，使用上与data方法其实是一致的，只不过是一个是增加一个是删除罢了</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">jQuery</span><span class="selector-class">.removeData</span>( <span class="selector-tag">element</span> <span class="selector-attr">[, name ]</span> )</div><div class="line"><span class="selector-class">.removeData</span>( <span class="selector-attr">[name ]</span> )</div></pre></td></tr></table></figure><p>  <div id="disqus_thread"></div><br>  <script></p><p>  /**</p><ul><li>RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</li><li><p>LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: <a href="https://disqus.com/admin/universalcode/#configuration-variables*/">https://disqus.com/admin/universalcode/#configuration-variables*/</a></p><p>(function() { // DON’T EDIT BELOW THIS LINE<br>var d = document, s = d.createElement(‘script’);<br>s.src = ‘<a href="https://https-xrlrf-github-io.disqus.com/embed.js">https://https-xrlrf-github-io.disqus.com/embed.js</a>‘;<br>s.setAttribute(‘data-timestamp’, +new Date());<br>(d.head || d.body).appendChild(s);<br>})();<br></script></p><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div><br><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script></p><!-- UY END -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jQueryHelloWorld体验&quot;&gt;&lt;a href=&quot;#jQueryHelloWorld体验&quot; class=&quot;headerlink&quot; title=&quot;jQueryHelloWorld体验&quot;&gt;&lt;/a&gt;jQueryHelloWorld体验&lt;/h3&gt;&lt;p&gt;当页面加载完
      
    
    </summary>
    
      <category term="jQuery学习" scheme="http://wustxiao.cn/categories/jQuery%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="jQuery" scheme="http://wustxiao.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>C++GUI Programming with QT学习笔记day03</title>
    <link href="http://wustxiao.cn/2017/10/21/C-GUI-Programming-with-QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day03/"/>
    <id>http://wustxiao.cn/2017/10/21/C-GUI-Programming-with-QT学习笔记day03/</id>
    <published>2017-10-21T10:23:51.000Z</published>
    <updated>2017-10-21T14:13:34.249Z</updated>
    
    <content type="html"><![CDATA[<center>创建主窗口</center><p>一个应用程序的完整用户界面，包括菜单，工具栏，状态栏以及应用程序所需的足够多的对话框</p><h3 id="子类化QMainWindow"><a href="#子类化QMainWindow" class="headerlink" title="子类化QMainWindow"></a>子类化QMainWindow</h3><blockquote><p>通过子类化QMainWindow，可以创建一个应用程序的主窗口。由于QDialog和QMainWindow都派生自QWidget。</p></blockquote><p>mainwindow.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QMainWindow&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAction</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLabel</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindDialog</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>:</span><span class="keyword">public</span> QMainWindow</div><div class="line">&#123;</div><div class="line">Q_OBJECT</div><div class="line"><span class="keyword">public</span>:</div><div class="line">MainWindow();</div><div class="line"><span class="keyword">protected</span>:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent *event)</span></span>;</div><div class="line"><span class="keyword">private</span> slots:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">newFile</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">save</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveAs</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">goToCell</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">about</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">openRecentFile</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateStatusBar</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spreadsheetModified</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createActions</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMenus</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createContextMenu</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createToolBars</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readSettings</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeSettings</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">okToContinue</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">loadFile</span><span class="params">(<span class="keyword">const</span> QString &amp;fileName)</span></span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">saveFile</span><span class="params">(<span class="keyword">const</span> QString &amp;fileName)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCurrentFile</span><span class="params">(<span class="keyword">const</span> QString &amp;fileName)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateRecentFileActions</span><span class="params">()</span></span>;</div><div class="line"><span class="function">QString <span class="title">strippedName</span><span class="params">(<span class="keyword">const</span> QString &amp;fullFileName)</span></span>;</div><div class="line">Spreadsheet *spreadsheet;</div><div class="line">FindDialog *findDialog;</div><div class="line">QLabel *locationLabel;</div><div class="line">QLabel *formulaLabel;</div><div class="line">QStringList recentFiles;</div><div class="line">QString curFile;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> &#123;MaxRecentFiles = <span class="number">5</span>&#125;;</div><div class="line">QAction *recentFileActions[MaxRecentFiles];</div><div class="line">QAction *separatorAction;</div><div class="line"></div><div class="line">QMenu *fileMenu;</div><div class="line">QMenu *editMenu;</div><div class="line"></div><div class="line">QToolBar *fileToolBar;</div><div class="line">QToolBar *editToolBar;</div><div class="line">QAction *newAction;</div><div class="line">QAction *openAction;</div><div class="line">QAction *aboutQtAction;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><blockquote><p>当槽作为一个信号的相应函数而被设计时，就会忽略他的返回值。当把槽作为函数来调用时，和普通的C++函数的作用是一样的。</p></blockquote><p>gotocelldialog.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> GOTOCELLDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GOTOCELLDIALOG_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_gotocelldialog.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoToCellDialog</span> :</span> <span class="keyword">public</span> QDialog, <span class="keyword">public</span> Ui::GoToCellDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    GoToCellDialog(QWidget *parent = <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_lineEdit_textChanged</span><span class="params">()</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><p>finddialog.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FINDDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FINDDIALOG_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QCheckBox</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLabel</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEdit</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPushButton</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindDialog</span> :</span> <span class="keyword">public</span> QDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    FindDialog(QWidget *parent = <span class="number">0</span>);</div><div class="line"></div><div class="line">signals:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findNext</span><span class="params">(<span class="keyword">const</span> QString &amp;str, Qt::CaseSensitivity cs)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findPrevious</span><span class="params">(<span class="keyword">const</span> QString &amp;str, Qt::CaseSensitivity cs)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findClicked</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enableFindButton</span><span class="params">(<span class="keyword">const</span> QString &amp;text)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    QLabel *label;</div><div class="line">    QLineEdit *lineEdit;</div><div class="line">    QCheckBox *caseCheckBox;</div><div class="line">    QCheckBox *backwardCheckBox;</div><div class="line">    QPushButton *findButton;</div><div class="line">    QPushButton *closeButton;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p><p>sortdialog.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SORTDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SORTDIALOG_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_sortdialog.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortDialog</span> :</span> <span class="keyword">public</span> QDialog, <span class="keyword">public</span> Ui::SortDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    SortDialog(QWidget *parent = <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColumnRange</span><span class="params">(QChar first, QChar last)</span></span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><p>mainwindow.cpp</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"finddialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"gotocelldialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"sortdialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"spreadsheet.h"</span></span></div><div class="line"></div><div class="line"><span class="symbol">MainWindow:</span>:MainWindow()</div><div class="line">&#123;</div><div class="line">spread = new Spreadsheet;</div><div class="line">setCentralWidget(spreadsheet);</div><div class="line"></div><div class="line">createActions();</div><div class="line">createMenus();</div><div class="line">createContextMenu();</div><div class="line">createToolBars();</div><div class="line">createStatusBar();</div><div class="line"></div><div class="line">readSettings();</div><div class="line"></div><div class="line">findDialog = <span class="number">0</span>;</div><div class="line"></div><div class="line">setWindowIcon();</div><div class="line">setCurrentFile(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;创建主窗口&lt;/center&gt;


&lt;p&gt;一个应用程序的完整用户界面，包括菜单，工具栏，状态栏以及应用程序所需的足够多的对话框&lt;/p&gt;
&lt;h3 id=&quot;子类化QMainWindow&quot;&gt;&lt;a href=&quot;#子类化QMainWindow&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Qt学习" scheme="http://wustxiao.cn/categories/Qt%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Qt" scheme="http://wustxiao.cn/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>软考复习：数据结构基础(1.1线性表)</title>
    <link href="http://wustxiao.cn/2017/10/17/%E8%BD%AF%E8%80%83%E5%A4%8D%E4%B9%A0%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80-1-1%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://wustxiao.cn/2017/10/17/软考复习：数据结构基础-1-1线性表/</id>
    <published>2017-10-17T06:30:38.000Z</published>
    <updated>2017-10-17T14:58:45.039Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-线性表"><a href="#1-1-线性表" class="headerlink" title="1.1 线性表"></a>1.1 线性表</h3><h4 id="线性表的基本运算"><a href="#线性表的基本运算" class="headerlink" title="线性表的基本运算"></a>线性表的基本运算</h4><p>１. 查找运算<br>  在线性表中查找具有给定键值的结点<br>２. 插入运算<br>  在线性表第i(0&lt;=i&lt;=n-1)个结点的前面或者后面插入一个新的结点</p><ol><li>删除运算<br>删除线性表的第i(0&lt;=i&lt;=n-1)个结点。<br>４. 其他运算<ul><li>统计线性表中节点的个数</li><li>输出线性表各节点的值</li><li>复制线性表</li><li>线性表分拆</li><li>线性表合并</li><li>线性表排序</li><li>按某种规则整理线性表</li></ul></li></ol><h4 id="线性表的存储"><a href="#线性表的存储" class="headerlink" title="线性表的存储"></a>线性表的存储</h4><ol><li><p>顺序存储<br>顺序存储通常用一个数组。<br>优点：能随机存取线性表中的任何一个结点<br>缺点：１，数组大小通常是固定的，不利于任意增加或减少线性表节点的个数</p><pre><code>２，插入和删除线性表的结点时，要移动数组中的其他元素，操作复杂</code></pre></li><li><p>链式存储<br>链式存储是用链表存储线性表<br>优点：每个结点的实际存储位置是任意的，插入和删除操作方便，不需要移动表元<br>缺点：１，每个节点增加了一个后继指针成分，增加了存储空间<br>　　　２，不便随机访问线性表的任一结点</p></li></ol><h4 id="在线性表中插入新结点"><a href="#在线性表中插入新结点" class="headerlink" title="在线性表中插入新结点"></a>在线性表中插入新结点</h4><ol><li>顺序存储</li></ol><blockquote><p>设线性表结点类型为整形，插入之前有n个结点，把值为x的结点插入线性表的第i个位置上</p></blockquote><p>插入步骤为：</p><ol><li>检查插入要求的有关参数的合理性</li><li>把原来的第n个结点到第i个结点依次往后移动一个数组元素位置</li><li>把新结点放在第i个位置上</li><li><p>修正线性表的结点个数</p></li><li><p>链式存储</p></li></ol><blockquote><p>在廉洁存储线性表中插入一个键值为x的新结点，分为如下４种情况</p></blockquote><ul><li>在某指针p所指结点之后插入</li><li>插在首结点之前，使待插入结点成为新的首结点</li><li>接在线性表的末尾</li><li>在有序链表中插入，使新的线性表任然有序</li></ul><h4 id="删除线性表的结点"><a href="#删除线性表的结点" class="headerlink" title="删除线性表的结点"></a>删除线性表的结点</h4><ol><li>顺序存储</li></ol><p>删除步骤：</p><ol><li>检查删除要求的有关参数的合理性</li><li>把原来第i+1个表元至第n个结点依次向前移动一个数组元素位置</li><li><p>修正线性表结点个数</p></li><li><p>链式存储</p></li></ol><p>删除步骤：</p><ol><li>如链表为空链表，则不执行删除操作</li><li>如链表的首结点的值为指定值，更改表的头指针为指向首结点的后继结点</li><li>在链表中寻找指定值的结点</li><li>将找到的结点删除</li></ol><h4 id="1-1-1-栈"><a href="#1-1-1-栈" class="headerlink" title="1.1.1 栈"></a>1.1.1 栈</h4><ol><li><p>顺序存储<br>可以用顺序存储线性表来表示栈，为了指明当前执行插入和删除运算的栈顶位置，需要一个地址变量top<br>指出栈顶结点在数组中的下标</p></li><li><p>链式存储<br>可以用链表实现。</p></li></ol><h4 id="1-1-2-队列"><a href="#1-1-2-队列" class="headerlink" title="1.1.2 队列"></a>1.1.2 队列</h4><p>  具有先进先出的特征</p><ol><li><p>顺序存储<br>随着一系列进队和出队运算，会出现前端空着，而队列空间已用完的情况<br>一种可行的方法是把队列中的结点一刀队列的前端，修改头指针和尾指针<br>另一种更好的解决方法是采用循环队列</p><blockquote><p>循环队列就是将队列数组的第一个元素与最后一个元素连接起来。<br>由于其中会造成队空和队满的条件同为head==tail。因此可采用只剩下一个空闲结点，就认为队列已满</p></blockquote></li><li><p>链式存储</p></li></ol><h4 id="1-1-3-稀疏矩阵"><a href="#1-1-3-稀疏矩阵" class="headerlink" title="1.1.3 稀疏矩阵"></a>1.1.3 稀疏矩阵</h4><p>如果一个矩阵的元素绝大部分都为零，则称为稀疏矩阵。若直接用一个二维数组表示稀疏矩阵会浪费大量的<br>内存空间，通常采用三元组数组或者十字链表两种方法来表示稀疏矩阵</p><ol><li><p>三元组数组</p><p>稀疏矩阵中的每个非零元素都用一个三元组来表示，即非零元素的 <strong>行号，列号，和他的值</strong><br>然后按照某种顺序将全部非零元素的三元组存入一个数组中</p></li></ol><blockquote><p>如果只对稀疏矩阵的某些单个元素进行处理，则宜采用三元组表示</p></blockquote><p>相关代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//三元组数值有一个特点：那就是在不同位置上的行值相同的元素  </span></div><div class="line"><span class="comment">//一定是按照列值升序出现的。  </span></div><div class="line"></div><div class="line"><span class="comment">//三元组数值有一个特点：那就是在不同位置上的行值相同的元素  </span></div><div class="line"><span class="comment">//一定是按照列值升序出现的。  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS  </span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TRIPLE</span>//三元组成员  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="keyword">int</span> row;  </div><div class="line">    <span class="keyword">int</span> col;  </div><div class="line">    <span class="keyword">int</span> value;  </div><div class="line">&#125;TRIPLE;  </div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TRIPLE_HEAD</span>//三元组头  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="keyword">int</span> rowCount;  </div><div class="line">    <span class="keyword">int</span> colCount;  </div><div class="line">    <span class="keyword">int</span> elementCount;  </div><div class="line">    TRIPLE *values;  </div><div class="line">&#125;TRIPLE_HEAD;  </div><div class="line"></div><div class="line"><span class="function">TRIPLE_HEAD *<span class="title">initTriple</span><span class="params">()</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryTriple</span><span class="params">(TRIPLE_HEAD *triHd)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTriple</span><span class="params">(TRIPLE_HEAD triHd)</span></span>;  </div><div class="line"><span class="function">TRIPLE_HEAD *<span class="title">revange</span><span class="params">(TRIPLE_HEAD trip)</span></span>;  </div><div class="line"></div><div class="line"><span class="function">TRIPLE_HEAD *<span class="title">revange</span><span class="params">(TRIPLE_HEAD trip)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    TRIPLE_HEAD *ntrip = <span class="literal">NULL</span>; <span class="comment">//new  </span></div><div class="line">    <span class="keyword">int</span> p,q,col;</div><div class="line"></div><div class="line">    ntrip = (TRIPLE_HEAD *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TRIPLE_HEAD));  </div><div class="line">    ntrip-&gt;rowCount = trip.colCount;</div><div class="line">    ntrip-&gt;colCount = trip.rowCount;</div><div class="line">    ntrip-&gt;elementCount = trip.elementCount;</div><div class="line">    ntrip-&gt;values = (TRIPLE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TRIPLE)*ntrip-&gt;elementCount);  </div><div class="line"></div><div class="line">    <span class="keyword">if</span>(ntrip-&gt;elementCount != <span class="number">0</span>)</div><div class="line">    &#123;<span class="comment">// 有非零元素则转换</span></div><div class="line">      q = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(col = <span class="number">1</span>;col &lt;=(trip.colCount);col++)</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">for</span>(p = <span class="number">0</span>;p &lt; (trip.elementCount);p++)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">if</span>(trip.values[p].col == col)&#123;</div><div class="line">            ntrip-&gt;values[q].row = trip.values[p].col;</div><div class="line">            ntrip-&gt;values[q].col = trip.values[p].row;</div><div class="line">            ntrip-&gt;values[q].value = trip.values[p].value;</div><div class="line">            q++;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> ntrip;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTriple</span><span class="params">(TRIPLE_HEAD triHd)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i, j, t = <span class="number">0</span>;  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= triHd.rowCount; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= triHd.colCount; j++)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> (t &lt; triHd.elementCount &amp;&amp; i == triHd.values[t].row &amp;&amp; j == triHd.values[t].col)&#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d "</span>, triHd.values[t++].value);  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>&#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0 "</span>);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destoryTriple</span><span class="params">(TRIPLE_HEAD *triHd)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="built_in">free</span>(triHd-&gt;values);  </div><div class="line">    <span class="built_in">free</span>(triHd);  </div><div class="line">&#125;  </div><div class="line"><span class="function">TRIPLE_HEAD *<span class="title">initTriple</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    TRIPLE_HEAD *th;  </div><div class="line">    <span class="keyword">int</span> row;  </div><div class="line">    <span class="keyword">int</span> col;  </div><div class="line">    <span class="keyword">int</span> value;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line"></div><div class="line">    th = (TRIPLE_HEAD *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TRIPLE_HEAD));  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入矩阵的阶数（行 列）:"</span>);  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;th-&gt;rowCount, &amp;th-&gt;colCount);  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入有效元素的个数:\n"</span>);  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;th-&gt;elementCount);  </div><div class="line"></div><div class="line">    th-&gt;values = (TRIPLE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TRIPLE)* th-&gt;elementCount);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; th-&gt;elementCount; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个元素(行 列 值)(共%d个):"</span>, i+<span class="number">1</span>, th-&gt;elementCount);  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;row, &amp;col, &amp;value);  </div><div class="line">        th-&gt;values[i].row = row;  </div><div class="line">        th-&gt;values[i].col = col;  </div><div class="line">        th-&gt;values[i].value = value;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> th;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    TRIPLE_HEAD *trip, *revTrip;  </div><div class="line"></div><div class="line">    trip = initTriple();  </div><div class="line"></div><div class="line">    showTriple(*trip);  </div><div class="line">    revTrip = revange(*trip);  </div><div class="line"></div><div class="line">    showTriple(*revTrip);<span class="comment">//转置之后的稀疏矩阵  </span></div><div class="line">    destoryTriple(trip);  </div><div class="line">    destoryTriple(revTrip);  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>２. 十字链表</p><p>  在十字链表中，同一行的结点和同一列的结点分别顺序循环连接，每个结点既在他所在行的循环链表中又在他所在列的循环链表中<br>  每个结点含有五个域　<strong>行号，列号，值，该结点所在行链表后继结点指针，所在列链表后继结点指针</strong></p><p>  为了处理方便，通常对每个行链表和列链表分别设置一个头结点，并把它们构成带表头结点的循环链表。<br>  为了引用某行某列方便，全部行链表的表头结点和全部列链表的表头结点分别组成数组，这两个数组的首结点指针存于<br>  一个十字链表的头结点中，最后由一个指针指向该头结点。</p><p>  <img src="http://img.blog.csdn.net/20171017214206878?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>  相关代码为：<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  </span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix_ELEMENT</span> //稀疏矩阵成员，值 并指向下一个值  </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="keyword">int</span> row;  </div><div class="line">    <span class="keyword">int</span> col;  </div><div class="line"></div><div class="line">    <span class="keyword">int</span> value;  </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Matrix_ELEMENT</span> *<span class="title">rowLink</span>;</span>  </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Matrix_ELEMENT</span> *<span class="title">colLink</span>;</span>  </div><div class="line">&#125;;  </div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix_ELEMENT</span> <span class="title">MELEMENT</span>;</span>  </div><div class="line"></div><div class="line"><span class="keyword">typedef</span> MELEMENT *LINKS;    <span class="comment">//指向一行或者一列的指针  </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CROSS_LINK</span>   </span></div><div class="line"><span class="class">&#123;</span>  </div><div class="line">    <span class="keyword">int</span> rowCount;  </div><div class="line">    <span class="keyword">int</span> colCount;  </div><div class="line">    <span class="comment">/*LINKS *rowLinks;</span></div><div class="line"><span class="comment">    LINKS *colLinks;*/</span> <span class="comment">//上下两句等价  </span></div><div class="line"></div><div class="line">    MELEMENT **rowLinks;  </div><div class="line">    MELEMENT **colLinks;  </div><div class="line"></div><div class="line">&#125;CROSS_LINK;  </div><div class="line"></div><div class="line"><span class="function">CROSS_LINK *<span class="title">initCrossLink</span><span class="params">(<span class="keyword">void</span>)</span></span>;  </div><div class="line"><span class="function">MELEMENT *<span class="title">findPreCol</span><span class="params">(MELEMENT *rowLink, <span class="keyword">int</span> col)</span></span>;  </div><div class="line"><span class="function">MELEMENT *<span class="title">findPreRow</span><span class="params">(MELEMENT *colLink, <span class="keyword">int</span> row)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyCrossLink</span><span class="params">(CROSS_LINK *cross)</span></span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showCrossLink</span><span class="params">(CROSS_LINK *cross)</span></span>;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showCrossLink</span><span class="params">(CROSS_LINK *cross)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i, j;  </div><div class="line">    MELEMENT *p;  </div><div class="line"></div><div class="line">    <span class="comment">//输出的技巧  </span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"矩阵如下：\n"</span>);  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cross-&gt;rowCount; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">for</span> (p = cross-&gt;rowLinks[i], j = <span class="number">0</span>; p; p = p-&gt;rowLink)  </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">while</span> (j++ &lt; p-&gt;col)  </div><div class="line">            &#123;  </div><div class="line">                <span class="built_in">printf</span>(<span class="string">"0 "</span>);  </div><div class="line">            &#125;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;value);  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">while</span> (j++ &lt; cross-&gt;colCount)  </div><div class="line">        &#123;  </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0 "</span>);  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroyCrossLink</span><span class="params">(CROSS_LINK *cross)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="comment">//先释放每行指针形成的链表  </span></div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    MELEMENT *p;  </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cross-&gt;rowCount; i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">while</span> (p = cross-&gt;rowLinks[i])  </div><div class="line">        &#123;  </div><div class="line">            p = cross-&gt;rowLinks[i];  </div><div class="line">            cross-&gt;rowLinks[i] = p-&gt;rowLink;  </div><div class="line">            <span class="built_in">free</span>(p);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">//再释放行链数组和列连数组  </span></div><div class="line">    <span class="built_in">free</span>(cross-&gt;colLinks);  </div><div class="line">    <span class="built_in">free</span>(cross-&gt;rowLinks);  </div><div class="line">    <span class="comment">//最后释放头  </span></div><div class="line">    <span class="built_in">free</span>(cross);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function">MELEMENT *<span class="title">findPreRow</span><span class="params">(MELEMENT *colLink, <span class="keyword">int</span> row)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    MELEMENT *p, *q = <span class="literal">NULL</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">for</span> (p = colLink; p &amp;&amp; row &gt;= p-&gt;row; p = p-&gt;colLink)  </div><div class="line">    &#123;  </div><div class="line">        q = p;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> q;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function">MELEMENT *<span class="title">findPreCol</span><span class="params">(MELEMENT *rowLink, <span class="keyword">int</span> col)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    MELEMENT *p, *q = <span class="literal">NULL</span>;  </div><div class="line"></div><div class="line">    <span class="keyword">for</span> (p = rowLink; p &amp;&amp; col &gt;= p-&gt;col; p = p-&gt;rowLink)  </div><div class="line">    &#123;  </div><div class="line">        q = p;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> q;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function">CROSS_LINK *<span class="title">initCrossLink</span><span class="params">()</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    CROSS_LINK *head;  </div><div class="line">    MELEMENT *mElement, *q;  </div><div class="line">    <span class="keyword">int</span> row, col;  </div><div class="line">    <span class="keyword">int</span> value;  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入稀疏矩阵的阶数（行 列）："</span>);  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;row, &amp;col);  </div><div class="line"></div><div class="line">    head = (CROSS_LINK *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CROSS_LINK));  </div><div class="line"></div><div class="line">    head-&gt;rowCount = row;  </div><div class="line">    head-&gt;colCount = col;  </div><div class="line">    head-&gt;rowLinks = (LINKS *)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(LINKS),row);  </div><div class="line">    head-&gt;colLinks = (MELEMENT **)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(MELEMENT *), col);  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"请输入(行 列 值)(行值输入为-1，结束输入):"</span>);  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;row, &amp;col, &amp;value);  </div><div class="line">    <span class="keyword">while</span> (row != <span class="number">-1</span>) <span class="comment">//(row != EOF)  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="comment">//将row、col、he value的值对应到相应的元素  </span></div><div class="line">        mElement = (MELEMENT *)<span class="built_in">calloc</span>(<span class="keyword">sizeof</span>(MELEMENT), <span class="number">1</span>);  </div><div class="line">        <span class="comment">//mElement-&gt;rowLink = NULL;  </span></div><div class="line">        <span class="comment">//mElement-&gt;colLink = NULL;  </span></div><div class="line">        mElement-&gt;row = row;  </div><div class="line">        mElement-&gt;col = col;  </div><div class="line">        mElement-&gt;value = value;  </div><div class="line"></div><div class="line">        <span class="keyword">if</span> (head-&gt;rowLinks[row] == <span class="literal">NULL</span>)  </div><div class="line">            head-&gt;rowLinks[row] = mElement;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            q = findPreCol(head-&gt;rowLinks[row], col);  </div><div class="line">            <span class="keyword">if</span> (q == <span class="literal">NULL</span>)  </div><div class="line">            &#123;  </div><div class="line">                mElement-&gt;rowLink = head-&gt;rowLinks[row];  </div><div class="line">                head-&gt;rowLinks[row] = mElement;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                mElement-&gt;rowLink = q-&gt;rowLink;  </div><div class="line">                q-&gt;rowLink = mElement;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">if</span> (head-&gt;colLinks[col] == <span class="literal">NULL</span>)  </div><div class="line">            head-&gt;colLinks[col] = mElement;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            q = findPreRow(head-&gt;colLinks[col], row);  </div><div class="line">            <span class="keyword">if</span> (q == <span class="literal">NULL</span>)  </div><div class="line">            &#123;  </div><div class="line">                mElement-&gt;colLink = head-&gt;colLinks[col];  </div><div class="line">                head-&gt;colLinks[col] = mElement;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">else</span>  </div><div class="line">            &#123;  </div><div class="line">                mElement-&gt;colLink = q-&gt;colLink;  </div><div class="line">                q-&gt;colLink = mElement;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"请输入(行 列 值)(行值输入为-1，结束输入):"</span>);  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;row, &amp;col, &amp;value);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">return</span> head;  </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    CROSS_LINK *cLink;  </div><div class="line"></div><div class="line">    cLink = initCrossLink();  </div><div class="line">    showCrossLink(cLink);  </div><div class="line">    destroyCrossLink(cLink);  </div><div class="line"></div><div class="line">    system(<span class="string">"pause"</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>如果对稀疏矩阵某行或某列整体做某处理，可能会使原来为零的元素变为非零，而原来非零的元素变为零，<br>对于这种场合，稀疏矩阵应该采用十字链表来表示</p></blockquote><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><p>相关代码为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> next[<span class="number">32</span>] = &#123;<span class="number">-999</span>&#125;;  </div><div class="line"></div><div class="line"><span class="comment">/* 返回模式串T在母串S中第pos个字符的位置 */</span>  </div><div class="line"><span class="comment">/* 调试小技巧 print x = value 或 set var x = value 可以改变gdb运行时变量的值 */</span>  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">index_BM</span><span class="params">(<span class="keyword">char</span> *S, <span class="keyword">char</span> *T, <span class="keyword">int</span> pos)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="keyword">int</span> j;  </div><div class="line"></div><div class="line">    i = pos;  </div><div class="line">    j = <span class="number">0</span>;   </div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( (i &lt; <span class="built_in">strlen</span>(S)) &amp;&amp; (j &lt; <span class="built_in">strlen</span>(T)) )  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> (S[i] == T[j])  </div><div class="line">        &#123;  </div><div class="line">            i++;  </div><div class="line">            j++;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            i = i - j + <span class="number">1</span>;   </div><div class="line">            j = <span class="number">0</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="comment">/* 注意strlen(T)意味着j的取值范围为0 ~ (strlen(T) - 1) */</span>  </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(T) == j)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> i - <span class="built_in">strlen</span>(T);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> *T, <span class="keyword">int</span> *next)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>;  </div><div class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;  </div><div class="line"></div><div class="line">    next[j] = k;  </div><div class="line"></div><div class="line">    <span class="keyword">while</span> (j &lt; <span class="built_in">strlen</span>(T))  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> ( (k == <span class="number">-1</span>) || (T[j] == T[k]) ) <span class="comment">//注意等号是==，而不是=  </span></div><div class="line">        &#123;  </div><div class="line">            ++k; <span class="comment">// 注意是先加后使用  </span></div><div class="line">            ++j;  </div><div class="line">            next[j] = k;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            k = next[k];   </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">index_KMP</span><span class="params">(<span class="keyword">char</span> *S, <span class="keyword">char</span> *T, <span class="keyword">int</span> pos)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">int</span> i;  </div><div class="line">    <span class="keyword">int</span> j;  </div><div class="line"></div><div class="line">    i = pos;  </div><div class="line">    j = <span class="number">0</span>;   </div><div class="line"></div><div class="line">    <span class="keyword">while</span> ( (i &lt; <span class="built_in">strlen</span>(S)) &amp;&amp; (j &lt; <span class="built_in">strlen</span>(T)) )  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">/* j = -1 表示next[0], 说明失配处在模式串T的第0个字符。所以这里特殊处理，然后令i+1和j+1。*/</span>  </div><div class="line">        <span class="keyword">if</span> ( (j == <span class="number">-1</span>)  || S[i] == T[j])  </div><div class="line">        &#123;  </div><div class="line">            i++;  </div><div class="line">            j++;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">        &#123;  </div><div class="line">            j = next[j];  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(T) == j)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> i - <span class="built_in">strlen</span>(T);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">else</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_next</span><span class="params">(<span class="keyword">int</span> next[], <span class="keyword">int</span> n)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">   <span class="keyword">int</span> i;  </div><div class="line"></div><div class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)   </div><div class="line">   &#123;  </div><div class="line">       <span class="built_in">printf</span>(<span class="string">"next[%d] = %d\n"</span>, i, next[i]);  </div><div class="line">   &#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span>  </span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="keyword">char</span> *s = <span class="string">"ababcabcacbab"</span>;  </div><div class="line">    <span class="keyword">char</span> *t = <span class="string">"abcac"</span>;  </div><div class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">int</span> index;  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================ BM ==============\n"</span>);  </div><div class="line">    index = index_BM(s, t, pos);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"index = %d\n"</span>, index);  </div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"================ KMP ==============\n"</span>);  </div><div class="line">    get_next(t, next);  </div><div class="line">    print_next(next, <span class="built_in">strlen</span>(t));  </div><div class="line"></div><div class="line">    index = index_KMP(s, t, pos);  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"index = %d\n"</span>, index);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>求next函数的值</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">next[j]</span> = <span class="number">0</span>         j = <span class="number">1</span>;</div><div class="line"><span class="attr">next[j]</span> = max&#123;k|<span class="number">1</span> &lt; k &lt; j,<span class="string">'p1p2...pk-1'</span> = <span class="string">'pj-k+1pj-k+2...pj-1'</span>&#125;</div><div class="line"><span class="attr">next[j]</span> = <span class="number">1</span> 其他情况</div></pre></td></tr></table></figure><h3 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h3><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-线性表&quot;&gt;&lt;a href=&quot;#1-1-线性表&quot; class=&quot;headerlink&quot; title=&quot;1.1 线性表&quot;&gt;&lt;/a&gt;1.1 线性表&lt;/h3&gt;&lt;h4 id=&quot;线性表的基本运算&quot;&gt;&lt;a href=&quot;#线性表的基本运算&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="软考" scheme="http://wustxiao.cn/categories/%E8%BD%AF%E8%80%83/"/>
    
    
      <category term="数据结构 软件设计师" scheme="http://wustxiao.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>C++GUI Programming with QT学习笔记day01</title>
    <link href="http://wustxiao.cn/2017/10/14/C-GUI-Programming-with-QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day01/"/>
    <id>http://wustxiao.cn/2017/10/14/C-GUI-Programming-with-QT学习笔记day01/</id>
    <published>2017-10-14T14:52:45.000Z</published>
    <updated>2017-10-21T06:13:00.123Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1,从HelloQt开始</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"> <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</div><div class="line"> QLabel *label = <span class="keyword">new</span> QLabel(<span class="string">"Hello Qt!"</span>);</div><div class="line"> label-&gt;show();</div><div class="line"> <span class="keyword">return</span> app.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>第一,二行:是代码中需要使用的类的头文件。在 Qt4 中,可以写成&lt;QApplication&gt;的格式,当然也可写成“QApplication.h”。第三行:是 main 函数的标准写法第五行:创建一个 QApplication 对象,管理应用程序的资源。第六行:QLabel 对象,QLabel 是一个 Qt 提供的小控件,显示一行文本。第七行:显示 QLabel。第八行:QApplication.exec(),让程序进入消息循环。等待可能的菜单,工具条,鼠标等的输入,进行响应。将以上代码放到名为 hello.cpp 中,保存,编译过程如下:qmake -project,qmake 命令创建 hello.pro,是平台无关的工程文件。在 hello.pro 所在目录下,运行 make(unix)或者 nmake(windows)。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir Hello</div><div class="line"><span class="built_in">cd</span> Hello</div><div class="line">vim hello.cpp</div><div class="line">qmake -project</div><div class="line">qmake Hello.pro</div><div class="line">make</div><div class="line">./Hello</div></pre></td></tr></table></figure><pre><code>第 6 行代码还可以如下替换:</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QLabel *label = new QLabel("<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">i</span>&gt;</span> "</div><div class="line">"<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>Qt!<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>");</div></pre></td></tr></table></figure><pre><code>这里面包含了 html 文本,显示的字体,颜色会改变。实际程序中,下面两行是比不可少的。</code></pre><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</div><div class="line"><span class="function"><span class="keyword">return</span> app.<span class="title">exec</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure><p><strong>2,连接信号和相应函数</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#include &lt;QApplication&gt;</div><div class="line">#include &lt;QPushButton&gt;</div><div class="line">int main(<span class="name">int</span> argc, char *argv[])</div><div class="line">&#123;</div><div class="line"> QApplication app(argc, argv);</div><div class="line"> QPushButton *button = new QPushButton(<span class="string">"Quit"</span>)<span class="comment">;</span></div><div class="line"> QObject:<span class="symbol">:connect</span>(<span class="name">button</span>, SIGNAL(<span class="name">clicked</span>()),<span class="symbol">&amp;app</span>, SLOT(<span class="name">quit</span>()))<span class="comment">;</span></div><div class="line"></div><div class="line"> button-&gt;show()<span class="comment">;</span></div><div class="line"> return app.exec()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>当有所动作或者状态改变,qt 的控件会发出消息(signal),例如,当点击按钮时,按钮会发送 clicked()消息,这个消息可以连接到一个函数上(这个函数在这里成为 slot)。这样,当一个消息发送时,slot 函数可以自动执行。在这个例子中,我们连接了按钮的 clicked信号和 QApplication 的 quit 函数</code></pre><p><strong>3，控件排列</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#include &lt;QApplication&gt;</div><div class="line">#include &lt;QHBoxLayout&gt;</div><div class="line">#include &lt;QSlider&gt;</div><div class="line">#include &lt;QSpinBox&gt;</div><div class="line">int main(<span class="name">int</span> argc, char *argv[])</div><div class="line">&#123;</div><div class="line"> QApplication app(argc, argv);</div><div class="line"> QWidget *window = new QWidget<span class="comment">;</span></div><div class="line"> window-&gt;setWindowTitle(<span class="string">"Enter Your Age"</span>)<span class="comment">;</span></div><div class="line"></div><div class="line"> QSpinBox *spinBox = new QSpinBox;</div><div class="line">  QSlider *slider = new QSlider(<span class="name">Qt</span>:<span class="symbol">:Horizontal</span>)<span class="comment">;</span></div><div class="line"> spinBox-&gt;setRange(<span class="number">0</span>, <span class="number">130</span>)<span class="comment">;</span></div><div class="line"> slider-&gt;setRange(<span class="number">0</span>, <span class="number">130</span>)<span class="comment">;</span></div><div class="line"> QObject:<span class="symbol">:connect</span>(<span class="name">spinBox</span>, SIGNAL(<span class="name">valueChanged</span>(<span class="name">int</span>)),slider, SLOT(<span class="name">setValue</span>(<span class="name">int</span>)))<span class="comment">;</span></div><div class="line"> QObject:<span class="symbol">:connect</span>(<span class="name">slider</span>, SIGNAL(<span class="name">valueChanged</span>(<span class="name">int</span>)),spinBox, SLOT(<span class="name">setValue</span>(<span class="name">int</span>)))<span class="comment">;</span></div><div class="line"> spinBox-&gt;setValue(<span class="number">35</span>)<span class="comment">;</span></div><div class="line"> QHBoxLayout *layout = new QHBoxLayout;</div><div class="line"> layout-&gt;addWidget(spinBox);</div><div class="line"> layout-&gt;addWidget(slider);</div><div class="line"> window-&gt;setLayout(layout);</div><div class="line"> window-&gt;show();</div><div class="line"> return app.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>程序中使用了三个控件:QSpinBox,QSlider 和 QWidget。QWidget 是这个程序的主窗口。QSpinBox 和 QSlider 被放在 QWidget 中;他们是 QWidget 的 children。反过来,我们也可以称 QWidget 是 QSpinBox 和 QSlider 的 parent。QWidget 没有 parent,因为它是程序的顶层窗口。在 QWidget 及其子类的构造函数中,都有一个 QWidget*参数,用来指定它们的父控件。</code></pre><p><strong>Qt 有三个主要的布局管理器:</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">QHBoxLayout:</span>水平排列控件。</div><div class="line"><span class="symbol">QVBoxLayout:</span>垂直排列控件。</div><div class="line"><span class="symbol">QGridLayout:</span>按矩阵方式排列控件</div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1,从HelloQt开始&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
      
    
    </summary>
    
      <category term="QT学习" scheme="http://wustxiao.cn/categories/QT%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="QT" scheme="http://wustxiao.cn/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>C++GUI Programming with QT学习笔记day02</title>
    <link href="http://wustxiao.cn/2017/10/14/C-GUI-Programming-with-QT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0day02/"/>
    <id>http://wustxiao.cn/2017/10/14/C-GUI-Programming-with-QT学习笔记day02/</id>
    <published>2017-10-14T08:19:12.000Z</published>
    <updated>2017-10-21T09:50:13.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建对话框"><a href="#创建对话框" class="headerlink" title="创建对话框"></a>创建对话框</h3><h4 id="派生对话框类"><a href="#派生对话框类" class="headerlink" title="派生对话框类"></a>派生对话框类</h4><blockquote><p>第一个例子是一个用 C++实现的查找对话框。我们把这个对话框实现为一个类,这样<br>它就是一个独立的控件,并有自己的信号(signal)和 slot 函数<br>类的源代码分别放在 finddialog.h 和 finddialog.cpp 中。</p></blockquote><p>首先看 finddialog.h 的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FINDDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FINDDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QCheckBox</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLabel</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineEdit</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPushButton</span>;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FindDialog</span>:</span><span class="keyword">public</span> QDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    FindDialog(QWidget *parent = <span class="number">0</span>);</div><div class="line">signals:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findNext</span><span class="params">(<span class="keyword">const</span> QString &amp;str,Qt::CaseSensitivity cs)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findPrevious</span><span class="params">(<span class="keyword">const</span> QString &amp;str,Qt::CaseSensitivity cs)</span></span>;</div><div class="line"><span class="keyword">private</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findClicked</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enableFindButton</span><span class="params">(<span class="keyword">const</span> QString &amp;text)</span></span>;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    QLabel *label;</div><div class="line">    QLineEdit *lineEdit;</div><div class="line">    QCheckBox *caseCheckBox;</div><div class="line">    QCheckBox *backwardCheckBox;</div><div class="line">    QPushButton *findButton;</div><div class="line">    QPushButton *closeButton;</div><div class="line">&#125;;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// FINDDIALOG_H</span></span></div></pre></td></tr></table></figure><p>一共 27 行,第 1,2,27 行是为了避免头文件被多次包含。</p><ol><li><p>第 3 行包含 QDialog 头文件,这个类从 QDialog 继承,QDialog 从 QWidget 继承。</p></li><li><p>第 10 行,Q_OBJECT 是一个宏定义,如果类里面用到了 signal 或者 slots,就要声<br>明这个宏。</p></li><li><p>第 12 行, FindDialog(QWidget *parent = 0);构造函数是 Qt 控件类的标准格式,<br>默认的父参数为 NULL,说明没有父控件。</p></li><li><p>第 13 行,signal 声明了这个对话框发出的两个信号,如果选择向前查找,那么对话框<br>就发出 findPrevious()信号,否则,发出 findNext()信号。signal 也是一个宏,在编译之<br>前,C++预处理把它变成标准的 c++代码。Qt::CaseSensitivity 是一个枚举类型,有<br>Qt::CaseSensitive 和 Qt::CaseInsensitive 两个值。</p></li><li><p>在类的私有部分,声明有两个 slot 函数。为了实现这两个函数,需要用到对话框的其<br>他控件的信息,所以保存了一些控件的指针。slot 关键字和 signal 一样,也是一个宏。<br>对于私有成员变量,我们只是使用了它们的指针,没有对它们进行存取操作,编译器<br>不需要知道它们的详细定义,所以只使用了这些类的前向声明。</p></li></ol><p>下面看一下 finddialog.cpp 源文件代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#include &lt;QtGui&gt;</span></div><div class="line"><span class="comment">#include "finddialog.h"</span></div><div class="line">FindDialog::FindDialog(QWidget *<span class="keyword">parent</span>):QDialog(<span class="keyword">parent</span>)</div><div class="line">&#123;</div><div class="line">    label = <span class="keyword">new</span> QLabel(tr(<span class="string">"Find &amp;what:"</span>));</div><div class="line">    lineEdit = <span class="keyword">new</span> QLineEdit;</div><div class="line">    label-&gt;setBuddy(lineEdit);</div><div class="line">    caseCheckBox = <span class="keyword">new</span> QCheckBox(tr(<span class="string">"Match &amp;case"</span>));</div><div class="line">    backwardCheckBox = <span class="keyword">new</span> QCheckBox(tr(<span class="string">"Search &amp;backward"</span>));</div><div class="line">    findButton = <span class="keyword">new</span> QPushButton(tr(<span class="string">"&amp;Find"</span>));</div><div class="line">    findButton-&gt;setDefault(<span class="keyword">true</span>);</div><div class="line">    findButton-&gt;setEnabled(<span class="keyword">false</span>);</div><div class="line">    closeButton = <span class="keyword">new</span> QPushButton(tr(<span class="string">"Close"</span>));</div><div class="line">    connect(lineEdit,SIGNAL(textChanged(<span class="keyword">const</span> QString &amp;)),</div><div class="line">            this,SLOT(enableFindButton(<span class="keyword">const</span> QString &amp;)));</div><div class="line">    connect(findButton,SIGNAL(clicked()),</div><div class="line">            this,SLOT(findClicked()));</div><div class="line">    connect(closeButton,SIGNAL(clicked()),</div><div class="line">            this,SLOT(close()));</div><div class="line">    QHBoxLayout *topLeftLayout = <span class="keyword">new</span> QHBoxLayout;</div><div class="line">    topLeftLayout-&gt;addWidget(label);</div><div class="line">    topLeftLayout-&gt;addWidget(lineEdit);</div><div class="line">    QVBoxLayout *leftLayout = <span class="keyword">new</span> QVBoxLayout;</div><div class="line">    leftLayout-&gt;addLayout(topLeftLayout);</div><div class="line">    leftLayout-&gt;addWidget(caseCheckBox);</div><div class="line">    leftLayout-&gt;addWidget(backwardCheckBox);</div><div class="line">    QVBoxLayout *rightLayout = <span class="keyword">new</span> QVBoxLayout;</div><div class="line">    rightLayout-&gt;addWidget(findButton);</div><div class="line">    rightLayout-&gt;addWidget(closeButton);</div><div class="line">    rightLayout-&gt;addStretch();</div><div class="line">    QHBoxLayout *mainLayout = <span class="keyword">new</span> QHBoxLayout;</div><div class="line">    mainLayout-&gt;addLayout(leftLayout);</div><div class="line">    mainLayout-&gt;addLayout(rightLayout);</div><div class="line">    setLayout(mainLayout);</div><div class="line">    setWindowTitle(tr(<span class="string">"Find"</span>));</div><div class="line">    setFixedHeight(sizeHint().height());</div><div class="line">&#125;</div><div class="line">void FindDialog::findClicked()</div><div class="line">&#123;</div><div class="line">    QString text = lineEdit-&gt;text();</div><div class="line">    Qt::CaseSensitivity cs =</div><div class="line">            caseCheckBox-&gt;isChecked()?Qt::CaseSensitive</div><div class="line">                            :Qt::CaseInsensitive;</div><div class="line">    <span class="keyword">if</span>(backwardCheckBox-&gt;isChecked())&#123;</div><div class="line">        emit findPrevious(text,cs);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        emit findNext(text,cs);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">void FindDialog::enableFindButton(<span class="keyword">const</span> QString &amp;text)</div><div class="line">&#123;</div><div class="line">    findButton-&gt;setEnabled(!text.isEmpty());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>第四行，把parent参数传递给了基类的构造函数。然后创建子窗口部件。</li><li>使用tr()函数来包含字符串是一个很不错的习惯。在这些字符串中，使用了表示“与”操作的符号”&amp;”来<br>表示快捷键。例如，在第11行创建了一个Find按钮，用户可在哪些支持快捷键的平台下通过 <strong>Alt+F</strong> 来激活它。</li><li>在第８行设置了行编辑器作为标签的伙伴。所谓”伙伴”就是一个窗口部件，它可以在按下标签的快捷键时<br>接收焦点。所以当用户按下该标签的快捷键时，焦点就会移动到这个行编辑器上。</li><li>布局中既可以包含多个窗口部件，也可以包含其他子布局 </li></ol><blockquote><p>当用户点击 findButton 按钮,findClicked()就会调用,根据 backwardCheckBox<br>状态,他发出 findPrevious()或者 findNext()信号。emit 也是一个 Qt 的宏。<br>当用户改变 lineEdit 中的文本, enableFindButton()slot 函数就会调用。如果输入了文本,<br>那么让 findButton 有效,否则就无效。</p></blockquote><h4 id="深入信号和槽"><a href="#深入信号和槽" class="headerlink" title="深入信号和槽"></a>深入信号和槽</h4><p>在目前有的例子中,我们已经连接了不同的信号和槽。实际使用中还要考虑如下一些<br>规则:</p><ol><li>一个信号可以连接到多个槽:<br>connect(slider, SIGNAL(valueChanged(int)),spinBox, SLOT(setValue(int)));<br>connect(slider, SIGNAL(valueChanged(int)),this,<br>SLOT(updateStatusBarIndicator(int)));<br>当信号发出后,槽函数都会被调用,但是调用的顺序是随机的,不确定的。</li><li>多个信号可以连接到一个槽<br>connect(lcd, SIGNAL(overflow()), this, SLOT(handleMathError()));<br>connect(calculator, SIGNAL(divisionByZero()),this, SLOT(handleMathError()));<br>任何一个信号发出,槽函数都会执行。</li><li>一个信号可以和另一个信号相连<br>connect(lineEdit, SIGNAL(textChanged(const QString &amp;)),<br>this, SIGNAL(updateRecord(const QString &amp;)));<br>第一个信号发出后,第二个信号也同时发送。除此之外,信号与信号连接上和信号和槽连<br>接相同。</li><li>连接可以被删除<br>disconnect(lcd, SIGNAL(overflow()),this, SLOT(handleMathError()));<br>这个函数很少使用,一个对象删除后,Qt 自动删除这个对象的所有连接。</li></ol><p><strong>信号和槽函数必须有着相同的参数类型,这样信号和槽函数才能成功连接:</strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">connect(<span class="name">ftp</span>, SIGNAL(<span class="name">rawCommandReply</span>(<span class="name">int</span>, const QString &amp;)),this,</div><div class="line">SLOT(<span class="name">processReply</span>(<span class="name">int</span>, const QString &amp;)))<span class="comment">;</span></div></pre></td></tr></table></figure></p><p><strong>如果信号里的参数个数多于槽函数的参数,多余的参数被忽略:</strong><br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">connect(<span class="name">ftp</span>, SIGNAL(<span class="name">rawCommandReply</span>(<span class="name">int</span>, const QString &amp;)),this,</div><div class="line">SLOT(<span class="name">checkErrorCode</span>(<span class="name">int</span>)))<span class="comment">;</span></div></pre></td></tr></table></figure></p><p><strong>如果参速类型不匹配,或者信号和槽不存在,在 debug 状态时,Qt 会在运行期间给出<br>警告。如果信号和槽连接时包含了参数的名字,Qt 将会给出警告。</strong></p><p>以前我们列举的例子中都是控件的信号和槽。但是信号和槽机制在 QObject 中就实现了,<br>可以实现在任何从 QObject 继承的子类中。</p><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建对话框&quot;&gt;&lt;a href=&quot;#创建对话框&quot; class=&quot;headerlink&quot; title=&quot;创建对话框&quot;&gt;&lt;/a&gt;创建对话框&lt;/h3&gt;&lt;h4 id=&quot;派生对话框类&quot;&gt;&lt;a href=&quot;#派生对话框类&quot; class=&quot;headerlink&quot; title=&quot;派
      
    
    </summary>
    
      <category term="QT学习" scheme="http://wustxiao.cn/categories/QT%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="QT" scheme="http://wustxiao.cn/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript进阶篇</title>
    <link href="http://wustxiao.cn/2017/10/11/JavaScript%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <id>http://wustxiao.cn/2017/10/11/JavaScript进阶篇/</id>
    <published>2017-10-11T13:20:20.000Z</published>
    <updated>2017-10-19T14:25:45.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>创建数组语法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarray=<span class="keyword">new</span> <span class="type">Array</span>();</div></pre></td></tr></table></figure><p>我们创建数组的同时，还可以为数组指定长度，长度可任意指定。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarray= <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">8</span>); <span class="comment">//创建数组，存储8个数据。</span></div></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong><br>1.创建的新数组是空数组，没有值，如输出，则显示undefined。<br>2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外。</p></blockquote><p>下面创建一个数组，用于存储5个人的数学成绩。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var myarray=new Array(); <span class="comment">//创建一个新的空数组</span></div><div class="line">myarray[<span class="number">0</span>]=<span class="number">66</span>; <span class="comment">//存储第1个人的成绩</span></div><div class="line">myarray[<span class="number">1</span>]=<span class="number">80</span>; <span class="comment">//存储第2个人的成绩</span></div><div class="line">myarray[<span class="number">2</span>]=<span class="number">90</span>; <span class="comment">//存储第3个人的成绩</span></div><div class="line">myarray[<span class="number">3</span>]=<span class="number">77</span>; <span class="comment">//存储第4个人的成绩</span></div><div class="line">myarray[<span class="number">4</span>]=<span class="number">59</span>; <span class="comment">//存储第5个人的成绩</span></div></pre></td></tr></table></figure><blockquote><p>注意：数组每个值有一个索引号，从0开始。</p></blockquote><p>我们还可以用简单的方法创建上面的数组和赋值：</p><p>第一种方法：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myarray = new Array(<span class="number">66</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">77</span>,<span class="number">59</span>);<span class="comment">//创建数组同时赋值</span></div></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myarray = [<span class="number">66</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">77</span>,<span class="number">59</span>];<span class="comment">//直接输入一个数组（称 “字面量数组”）</span></div></pre></td></tr></table></figure><blockquote><p>注意：数组存储的数据可以是任何类型（数字、字符、布尔值等）</p></blockquote><p>如果我们想知道数组的大小，只需引用数组的一个属性length。Length属性表示数组的长度，即数组中元素的个数。</p><p>语法：</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myarray.<span class="built_in">length</span>; <span class="comment">//获得数组myarray的长度</span></div></pre></td></tr></table></figure><p>注意：因为数组的索引总是由0开始，所以一个数组的上下限分别是：0和length-1。如数组的长度是5，数组的上下限分别是0和4。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr=[<span class="number">55</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">90</span>,<span class="number">60</span>,<span class="number">98</span>,<span class="number">76</span>,<span class="number">54</span>];<span class="comment">//包含8个数值的数组arr</span></div><div class="line">document.write(arr.length); <span class="comment">//显示数组长度8</span></div><div class="line">document.write(arr[<span class="number">7</span>]); <span class="comment">//显示第8个元素的值54</span></div></pre></td></tr></table></figure><p>同时，JavaScript数组的length属性是可变的，这一点需要特别注意。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.<span class="built_in">length</span>=<span class="number">10</span>;<span class="comment"> //增大数组的长度</span></div><div class="line">document.<span class="built_in">write</span>(arr.<span class="built_in">length</span>);<span class="comment"> //数组长度已经变为10</span></div></pre></td></tr></table></figure><p>数组随元素的增加，长度也会改变，如下:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr=[<span class="number">98</span>,<span class="number">76</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">76</span>]; <span class="comment">// 包含5个数值的数组</span></div><div class="line">document.write(arr.length); <span class="comment">//显示数组的长度5</span></div><div class="line">arr[<span class="number">15</span>]=<span class="number">34</span>;  <span class="comment">//增加元素，使用索引为15,赋值为34</span></div><div class="line">alert(arr.length); <span class="comment">//显示数组的长度16</span></div></pre></td></tr></table></figure><p>1.二维数组的定义方法一</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr=<span class="keyword">new</span> <span class="type">Array</span>();  <span class="comment">//先声明一维</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)&#123;   <span class="comment">//一维长度为2</span></div><div class="line">   myarr[i]=<span class="keyword">new</span> <span class="type">Array</span>();  <span class="comment">//再声明二维</span></div><div class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;   <span class="comment">//二维长度为3</span></div><div class="line">   myarr[i][j]=i+j;   <span class="comment">// 赋值，每个数组元素的值为i+j</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>2.二维数组的定义方法二</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var Myarr = [[<span class="number">0</span> , <span class="number">1</span> , <span class="number">2</span> ],[<span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span>]]</div></pre></td></tr></table></figure><p>3.赋值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myarr[<span class="string">0</span>][<span class="symbol">1</span>]=5; //将5的值传入到数组中，覆盖原有值。</div></pre></td></tr></table></figure><p>说明: myarr[0][1] ,0 表示表的行，1表示表的列。</p><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><h4 id="switch语法"><a href="#switch语法" class="headerlink" title="switch语法:"></a>switch语法:</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span>(表达式)</div><div class="line">&#123;</div><div class="line"><span class="keyword">case</span>值<span class="number">1</span>:</div><div class="line">  执行代码块 <span class="number">1</span></div><div class="line">  <span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span>值<span class="number">2</span>:</div><div class="line">  执行代码块 <span class="number">2</span></div><div class="line">  <span class="keyword">break</span>;</div><div class="line">...</div><div class="line"><span class="keyword">case</span>值<span class="string">n:</span></div><div class="line">  执行代码块 n</div><div class="line">  <span class="keyword">break</span>;</div><div class="line"><span class="string">default:</span></div><div class="line">  与 <span class="keyword">case</span>值<span class="number">1</span> 、 <span class="keyword">case</span>值<span class="number">2.</span>..<span class="keyword">case</span>值n 不同时执行的代码</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Switch<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> myscore = <span class="number">6</span>;</span></div><div class="line"><span class="actionscript"><span class="keyword">switch</span>(myscore)</span></div><div class="line"><span class="undefined">&#123;</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">0</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">1</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">2</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">3</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">4</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">5</span>:</span></div><div class="line"><span class="actionscript">degree = <span class="string">"继续努力！"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"评语："</span>+degree+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">6</span>:</span></div><div class="line"><span class="actionscript">degree = <span class="string">"及格，加油！"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"评语："</span>+degree+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">7</span>:</span></div><div class="line"><span class="actionscript">degree = <span class="string">"凑合，奋进！"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"评语："</span>+degree+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">8</span>:</span></div><div class="line"><span class="actionscript">degree = <span class="string">"很棒，很棒!"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"评语："</span>+degree+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">break</span>;</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">9</span>:</span></div><div class="line"><span class="actionscript"><span class="keyword">case</span> <span class="number">10</span>:</span></div><div class="line"><span class="actionscript">degree = <span class="string">"高手，大牛！"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"评语："</span>+degree+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">break</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="for语句结构："><a href="#for语句结构：" class="headerlink" title="for语句结构："></a>for语句结构：</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">for</span><span class="params">(初始化变量;循环条件;循环迭代)</span></span></div><div class="line">&#123;     </div><div class="line">    循环语句</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>假如，一个盒子里有6个球，我们每次取一个，重复从盒中取出球，直到球取完为止。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">var</span> <span class="built_in">num</span>=<span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">num</span>=<span class="number">1</span>;<span class="built_in">num</span>&lt;=<span class="number">6</span>;<span class="built_in">num</span>++)  <span class="comment">//初始化值；循环条件；循环后条件值更新</span></div><div class="line">&#123;   <span class="built_in">document</span>.write(<span class="string">"取出第"</span>+<span class="built_in">num</span>+<span class="string">"个球&lt;br /&gt;"</span>);</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>####while循环<br>完成从盒子里取球的动作，每次取一个，共6个球。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="keyword">var</span> <span class="built_in">num</span>=<span class="number">0</span>;  <span class="comment">//初始化值</span></div><div class="line"><span class="keyword">while</span> (<span class="built_in">num</span>&lt;=<span class="number">6</span>)   <span class="comment">//条件判断</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">document</span>.write(<span class="string">"取出第"</span>+<span class="built_in">num</span>+<span class="string">"个球&lt;br /&gt;"</span>);</div><div class="line">  <span class="built_in">num</span>=<span class="built_in">num</span>+<span class="number">1</span>;  <span class="comment">//条件值更新</span></div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><p>我们试着输出5个数字。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">   num= 1;</span></div><div class="line"><span class="actionscript">   <span class="keyword">do</span></span></div><div class="line"><span class="undefined">   &#123;</span></div><div class="line"><span class="javascript">     <span class="built_in">document</span>.write(<span class="string">"数值为:"</span> +  num+<span class="string">"&lt;br /&gt;"</span>);</span></div><div class="line"><span class="actionscript">     num++; <span class="comment">//更新条件</span></span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="actionscript">   <span class="keyword">while</span> (num&lt;=<span class="number">5</span>)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>格式如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(初始条件;判断条件;循环后条件值更新)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(特殊情况)</div><div class="line">  &#123;<span class="keyword">break</span>;&#125;</div><div class="line">  循环代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(初始条件;判断条件;循环后条件值更新)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span>(特殊情况)</div><div class="line">  &#123; <span class="keyword">continue</span>; &#125;</div><div class="line"> 循环代码</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="有参数的函数"><a href="#有参数的函数" class="headerlink" title="有参数的函数"></a>有参数的函数</h4><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span></span> add2(x,y)</div><div class="line">&#123;</div><div class="line">   <span class="built_in">sum</span> = x + y;</div><div class="line">   document.<span class="built_in">write</span>(<span class="built_in">sum</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="返回值的函数"><a href="#返回值的函数" class="headerlink" title="返回值的函数"></a>返回值的函数</h4><figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span><span class="params">(x,y)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="built_in">sum</span> = x + y;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">sum</span>; <span class="comment">//返回函数值,return后面的值叫做返回值。</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还可以通过变量存储调用函数的返回值，代码如下:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = add2(<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//语句执行后,result变量中的值为7。</span></div></pre></td></tr></table></figure><blockquote><p>注意:函数中参数和返回值不只是数字，还可以是字符串等其它类型。</p></blockquote><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h5 id="鼠标单击事件-onclick-）"><a href="#鼠标单击事件-onclick-）" class="headerlink" title="鼠标单击事件( onclick ）"></a>鼠标单击事件( onclick ）</h5><p>比如，我们单击按钮时，触发 onclick 事件，并调用两个数和的函数add2()。代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">add2</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">        <span class="keyword">var</span> numa,numb,sum;</span></div><div class="line"><span class="undefined">        numa=6;</span></div><div class="line"><span class="undefined">        numb=8;</span></div><div class="line"><span class="undefined">        sum=numa+numb;</span></div><div class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"两数和为:"</span>+sum);  &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击提交"</span> <span class="attr">onclick</span>=<span class="string">"add2()"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>####　鼠标经过事件（onmouseover）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onmouseover<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">confirm(<span class="string">"请输入姓名后，在单击确定！"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">onmouseover</span>=<span class="string">"info()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="鼠标移开事件（onmouseout）"><a href="#鼠标移开事件（onmouseout）" class="headerlink" title="鼠标移开事件（onmouseout）"></a>鼠标移开事件（onmouseout）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onmouseout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">confirm(<span class="string">"不要离开，只要输入密码，再单击登录，就ok了"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"登录"</span> <span class="attr">onmouseout</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="光标聚焦事件（onfocus）"><a href="#光标聚焦事件（onfocus）" class="headerlink" title="光标聚焦事件（onfocus）"></a>光标聚焦事件（onfocus）</h4><p>当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onfocus<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"请输入姓名！"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入姓名！"</span> <span class="attr">onfocus</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="失焦事件（onblur）"><a href="#失焦事件（onblur）" class="headerlink" title="失焦事件（onblur）"></a>失焦事件（onblur）</h4><p>onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。</p><p>如下代码, 网页中有用户和密码两个文本框。当前光标在用户文本框内时（即焦点在文本框），在光标离开该文本框后（即失焦时），触发onblur事件，并调用函数message()。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onblur失焦事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"请确定已输入用户名后，在离开！"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入用户名！"</span> <span class="attr">onblur</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"请输入密码！"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="内容选中事件（onselect）"><a href="#内容选中事件（onselect）" class="headerlink" title="内容选中事件（onselect）"></a>内容选中事件（onselect）</h4><p>选中事件，当文本框或者文本域中的文字被选中时，触发onselect事件，同时调用的程序就会被执行。</p><p>如下代码,当选中用户文本框内的文字时，触发onselect 事件，并调用函数message()。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onselect<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"您触发了选中事件！"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span> <span class="attr">onselect</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="文本框内容改变事件（onchange）"><a href="#文本框内容改变事件（onchange）" class="headerlink" title="文本框内容改变事件（onchange）"></a>文本框内容改变事件（onchange）</h4><p>通过改变文本框的内容来触发onchange事件，同时执行被调用的程序。</p><p>如下代码,当用户将文本框内的文字改变后，弹出对话框“您改变了文本内容！”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onchange<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"您改变了文本内容！"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"请输入用户名！"</span> <span class="attr">onchange</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="加载事件（onload）"><a href="#加载事件（onload）" class="headerlink" title="加载事件（onload）"></a>加载事件（onload）</h4><p>事件会在页面加载完成后，立即发生，同时执行被调用的程序。<br>注意：</p><pre><code>1.加载页面时，触发onload事件，事件写在`&lt;body&gt;`标签内。2.此节的加载页面，可理解为打开一个新页面时。</code></pre><p>如下代码,当加载一个新页面时，弹出对话框“加载中，请稍等…”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"加载中，请稍等。。。"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"message()"</span>&gt;</span></div><div class="line">欢迎学习JavaScript.</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="卸载事件（onunload）"><a href="#卸载事件（onunload）" class="headerlink" title="卸载事件（onunload）"></a>卸载事件（onunload）</h4><p>当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，同时执行被调用的程序。</p><p>注意：不同浏览器对onunload事件支持不同。</p><p>如下代码,当退出页面时，弹出对话框“您确定离开该网页吗？”。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>onunload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.onunload = onunload_message();</span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">onunload_message</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">alert(<span class="string">"您确定离开该网页吗？"</span>);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">欢迎学习JavaScript.</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><blockquote><p>卸载事件</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h4><p>JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有属性和方法。</p><p>对象的属性：反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等；</p><p>对象的方法：能够在对象上执行的动作。例如，表单的“提交”(Submit)，时间的“获取”(getYear)等；</p><p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等，使用对象前先定义，如下使用数组对象：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objectName =<span class="keyword">new</span> <span class="type">Array</span>();<span class="comment">//使用new关键字定义对象</span></div></pre></td></tr></table></figure><p>或者</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var objectName</span> =[];</div></pre></td></tr></table></figure><p>访问对象属性的语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">objectName</span><span class="selector-class">.propertyName</span></div></pre></td></tr></table></figure><p>如使用 Array 对象的 length 属性来获得数组的长度：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarray=<span class="keyword">new</span> <span class="type">Array</span>(<span class="number">6</span>);<span class="comment">//定义数组对象</span></div><div class="line"><span class="keyword">var</span> myl=myarray.length;<span class="comment">//访问数组长度length属性</span></div></pre></td></tr></table></figure><p>以上代码执行后，myl的值将是：6</p><p>访问对象的方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">objectName</span><span class="selector-class">.methodName</span>()</div></pre></td></tr></table></figure><p>如使用string 对象的 toUpperCase() 方法来将文本转换为大写：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mystr=<span class="string">"Hello world!"</span>;<span class="comment">//创建一个字符串</span></div><div class="line"><span class="keyword">var</span> request=mystr.toUpperCase(); <span class="comment">//使用字符串对象方法</span></div></pre></td></tr></table></figure><p>以上代码执行后，request的值是：HELLO WORLD!</p><h4 id="Date-日期对象"><a href="#Date-日期对象" class="headerlink" title="Date 日期对象"></a>Date 日期对象</h4><p>日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。</p><p>定义一个时间对象 :</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Udate=<span class="keyword">new</span> <span class="type">Date</span>();</div></pre></td></tr></table></figure><p>注意:使用关键字new，Date()的首字母必须大写。</p><p>使 Udate 成为日期对象，并且已有初始值：当前时间(当前电脑系统时间)。</p><p>如果要自定义初始值，可以用以下方法：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="type">Date</span>(<span class="number">2012</span>, <span class="number">10</span>, <span class="number">1</span>);  <span class="comment">//2012年10月1日</span></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="type">Date</span>(<span class="string">'Oct 1, 2012'</span>); <span class="comment">//2012年10月1日</span></div></pre></td></tr></table></figure><p>我们最好使用下面介绍的“方法”来严格定义时间。</p><p>访问方法语法：“&lt;日期对象&gt;.&lt;方法&gt;”</p><p>Date对象中处理时间和日期的常用方法：</p><p><img src="http://img.blog.csdn.net/20171011212616208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>返回/设置年份方法<br>get/setFullYear() 返回/设置年份，用四位数表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mydate=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间2014年3月6日</span></div><div class="line"><span class="built_in">document</span>.write(mydate+<span class="string">"&lt;br&gt;"</span>);<span class="comment">//输出当前时间</span></div><div class="line"><span class="built_in">document</span>.write(mydate.getFullYear()+<span class="string">"&lt;br&gt;"</span>);<span class="comment">//输出当前年份</span></div><div class="line">mydate.setFullYear(<span class="number">81</span>); <span class="comment">//设置年份</span></div><div class="line"><span class="built_in">document</span>.write(mydate+<span class="string">"&lt;br&gt;"</span>); <span class="comment">//输出年份被设定为 0081年。</span></div></pre></td></tr></table></figure><blockquote><p>注意:不同浏览器， mydate.setFullYear(81)结果不同，年份被设定为 0081或81两种情况。</p></blockquote><p>返回星期方法<br>getDay() 返回星期，返回的是0-6的数字，0 表示星期天。如果要返回相对应“星期”，通过数组完成，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mydate=<span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//定义日期对象</span></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> weekday=[<span class="string">"星期日"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>];</span></div><div class="line"><span class="actionscript"><span class="comment">//定义数组对象,给每个数组项赋值</span></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> mynum=mydate.getDay();<span class="comment">//返回值存储在变量mynum中</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mydate.getDay());<span class="comment">//输出getDay()获取值</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">"今天是："</span>+ weekday[mynum]);<span class="comment">//输出星期几</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>返回/设置时间方法<br>get/setTime() 返回/设置时间，单位毫秒数，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。</p><p>如果将目前日期对象的时间推迟1小时，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mydate=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">"当前时间："</span>+mydate+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="undefined">  mydate.setTime(mydate.getTime() + 60 * 60 * 1000);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">"推迟一小时时间："</span> + mydate);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>结果:</p><p>当前时间：Thu Mar 6 11:46:27 UTC+0800 2014</p><p>推迟一小时时间：Thu Mar 6 12:46:27 UTC+0800 2014</p><blockquote><p><strong>注意:</strong></p><ol><li>一小时 60 分，一分 60 秒，一秒 1000 毫秒</li><li>时间推迟 1 小时,就是: “x.setTime(x.getTime() + 60 <em> 60 </em> 1000);”</li></ol></blockquote><h4 id="String-字符串对象"><a href="#String-字符串对象" class="headerlink" title="String 字符串对象"></a>String 字符串对象</h4><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>charAt()</td><td>返回指定位置的字符</td></tr><tr><td>indexOf()</td><td>返回指定字符首次出现的位置</td></tr><tr><td>split()</td><td>字符串分割</td></tr><tr><td>substring()</td><td>提取字符串</td></tr><tr><td>substr()</td><td>提取指定数目的字符串</td></tr></tbody></table><pre><code>1.访问字符串对象的属性length:</code></pre><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var mystr</span>=<span class="string">"Hello World!"</span>;</div><div class="line"><span class="attribute">var myl</span>=mystr.length;</div></pre></td></tr></table></figure><p>以上代码执行后，myl 的值将是：12</p><pre><code>2.访问字符串对象的方法：</code></pre><p>使用 String 对象的 toUpperCase() 方法来将字符串小写字母转换为大写：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var mystr</span>=<span class="string">"Hello world!"</span>;</div><div class="line"><span class="attribute">var mynum</span>=mystr.toUpperCase();</div></pre></td></tr></table></figure><p>以上代码执行后，mynum 的值是：HELLO WORLD!</p><h4 id="返回指定位置的字符charAt"><a href="#返回指定位置的字符charAt" class="headerlink" title="返回指定位置的字符charAt"></a>返回指定位置的字符charAt</h4><p>charAt() 方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。</p><p>语法:<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.charAt(<span class="keyword">index</span>)</div></pre></td></tr></table></figure></p><p>参数说明：</p><blockquote><p>注意：1.字符串中第一个字符的下标是 0。最后一个字符的下标为字符串长度减一（string.length-1）。</p><p>2.如果参数 index 不在 0 与 string.length-1 之间，该方法将返回一个空字符串。</p></blockquote><p>如:在字符串 “I love JavaScript!” 中，返回位置2的字符：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> mystr=<span class="string">"I love JavaScript!"</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mystr.charAt(<span class="number">2</span>));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>注意：一个空格也算一个字符。</strong></p><h4 id="返回指定的字符串首次出现的位置-indexOf"><a href="#返回指定的字符串首次出现的位置-indexOf" class="headerlink" title="返回指定的字符串首次出现的位置(indexOf)"></a>返回指定的字符串首次出现的位置(indexOf)</h4><pre><code>indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</code></pre><p>语法</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">stringObject.indexOf(substring, </span>startpos)</div></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>说明：</p><p>1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 substring。</p><p>2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。</p><p>3.如果找到一个 substring，则返回 substring 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</p></blockquote><p><strong>注意：</strong></p><ol><li>indexOf() 方法区分大小写。</li><li>如果要检索的字符串值没有出现，则该方法返回 -1。</li></ol><p>例如: 对 “I love JavaScript!” 字符串内进行不同的检索：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> str=<span class="string">"I love JavaScript!"</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(str.indexOf(<span class="string">"I"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(str.indexOf(<span class="string">"v"</span>) + <span class="string">"&lt;br /&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(str.indexOf(<span class="string">"v"</span>,<span class="number">8</span>));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>以上代码的输出：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure><h4 id="字符串分割split"><a href="#字符串分割split" class="headerlink" title="字符串分割split()"></a>字符串分割split()</h4><p>知识讲解：</p><p>split() 方法将字符串分割为字符串数组，并返回此数组。</p><p>语法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.<span class="built_in">split</span>(separator,<span class="built_in">limit</span>)</div></pre></td></tr></table></figure><p>参数说明:<br><img src="http://img.blog.csdn.net/20171012140547937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>注意：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。</strong></p><pre><code>我们将按照不同的方式来分割字符串：</code></pre><p>使用指定符号分割字符串，代码如下:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mystr = <span class="string">"www.imooc.com"</span>;</div><div class="line"><span class="built_in">document</span>.write(mystr.split(<span class="string">"."</span>)+<span class="string">"&lt;br&gt;"</span>);</div><div class="line"><span class="built_in">document</span>.write(mystr.split(<span class="string">"."</span>, <span class="number">2</span>)+<span class="string">"&lt;br&gt;"</span>);</div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">www,</span>imooc,com</div><div class="line"><span class="built_in">www,</span>imooc</div></pre></td></tr></table></figure><p>将字符串分割为字符，代码如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">document.<span class="built_in">write</span>(mystr.split(<span class="string">""</span>)+<span class="string">"&lt;br&gt;"</span>);</div><div class="line">document.<span class="built_in">write</span>(mystr.split(<span class="string">""</span>, <span class="number">5</span>));</div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">w,</span>w,w,.,i,m,o,o,c,.,c,o,m</div><div class="line"><span class="built_in">w,</span>w,w,.,i</div></pre></td></tr></table></figure><h4 id="提取字符串substring"><a href="#提取字符串substring" class="headerlink" title="提取字符串substring()"></a>提取字符串substring()</h4><p>substring用于提取字符串中介于两个指定下标之间的字符</p><p>语法：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.substring(startP<span class="keyword">os</span>,stopP<span class="keyword">os</span>)</div></pre></td></tr></table></figure><p>参数说明</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>startPos</td><td>必需。一个非负的整数，开始位置</td></tr><tr><td>stopPos</td><td>可选。一个非负的整数，结束位置，如果省略该参数，那么返回的子串会一直到字符串对象的结尾。</td></tr></tbody></table><blockquote><p>注意：</p><ol><li><p>返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。</p></li><li><p>如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。</p></li><li><p>如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。</p></li></ol></blockquote><p>使用 substring() 从字符串中提取字符串，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> mystr=<span class="string">"I love JavaScript"</span>;</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mystr.substring(<span class="number">7</span>));</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mystr.substring(<span class="number">2</span>,<span class="number">6</span>));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">JavaScript</span></div><div class="line"><span class="attribute">love</span></div></pre></td></tr></table></figure><h4 id="提取指定数目的字符substr"><a href="#提取指定数目的字符substr" class="headerlink" title="提取指定数目的字符substr()"></a>提取指定数目的字符substr()</h4><p>substr() 方法从字符串中提取从 startPos位置开始的指定数目的字符串。</p><p>语法:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.substr(startPos,<span class="built_in">length</span>)</div></pre></td></tr></table></figure><p>参数说明:<br><img src="http://img.blog.csdn.net/20171012143314237?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><blockquote><p>注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2<br>指倒数第二个字符，以此类推。</p><p>如果startPos为负数且绝对值大于字符串长度，startPos为0。</p></blockquote><p>使用 substr() 从字符串中提取一些字符，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> mystr=<span class="string">"I love JavaScript!"</span>;</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mystr.substr(<span class="number">7</span>));</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mystr.substr(<span class="number">2</span>,<span class="number">4</span>));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JavaScript!</div><div class="line">love</div></pre></td></tr></table></figure><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><p>Math对象，提供对数据的数学计算。</p><p>使用 Math 的属性和方法，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mypi=<span class="built_in">Math</span>.PI;</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> myabs=<span class="built_in">Math</span>.abs(<span class="number">-15</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mypi);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myabs);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3.141592653589793</span></div><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure><blockquote><p>注意：Math 对象是一个固有的对象，无需创建它，直接把 Math<br>作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。</p></blockquote><p>Math 对象属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>E</td><td>返回算数常量e,即自然对数的底数（约等于2.718…）</td></tr><tr><td>LN2</td><td>返回２的自然对数（约等于０.693）</td></tr><tr><td>LN10</td><td>返回１０的自然对数（约等于2.302）｜</td></tr><tr><td>LOG2E</td><td>返回以２为底的e的对数（约等于1.442）</td></tr><tr><td>LOG10E</td><td>返回以１０为底的e的对数（约等于0.434）</td></tr><tr><td>PI</td><td>返回圆周率 (约等于3.14159)</td></tr><tr><td>SQRT1_2</td><td>返回２的平方根的倒数（约等于0.707）</td></tr><tr><td>SQRT2</td><td>返回2的平方根（约等于1.414）｜</td></tr></tbody></table><p>Math 对象方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回数的绝对值</td></tr><tr><td>acos(x)</td><td>返回数的反余弦值</td></tr><tr><td>asin(x)</td><td>返回数的反正弦值</td></tr><tr><td>atan(x)</td><td>返回数的反正切值</td></tr><tr><td>atan2(y,x)</td><td>返回由x轴到点(x,y)的角度（以弧度为单位）</td></tr><tr><td>ceil(x)</td><td>对数进行上舍入</td></tr><tr><td>cos(x)</td><td>返回数的余弦</td></tr><tr><td>exp(x)</td><td>返回e的指数</td></tr><tr><td>floor(x)</td><td>对数进行下舍入</td></tr><tr><td>log(x)</td><td>返回数的自然对数（底为e）</td></tr><tr><td>max(x,y)</td><td>返回x和y的最大值</td></tr><tr><td>min(x,y)</td><td>返回x和y的最小值</td></tr><tr><td>pow(x,y)</td><td>返回x的y次幂</td></tr><tr><td>random()</td><td>返回０～１之间的随机数</td></tr><tr><td>round(x)</td><td>把数四舍五入为最接近的整数</td></tr><tr><td>sin(x)</td><td>返回数的正弦</td></tr><tr><td>sqrt()</td><td>返回数的平方根</td></tr><tr><td>tan(x)</td><td>返回角的正切</td></tr><tr><td>toSource()</td><td>返回该对象的源代码</td></tr><tr><td>valueOf()</td><td>返回Math对象的原始值</td></tr></tbody></table><p>向上取整ceil()<br>ceil() 方法可对一个数进行向上取整。</p><p>语法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.<span class="built_in">ceil</span>(x)</div></pre></td></tr></table></figure></p><p>参数说明:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>必需，必须是一个数值</td></tr></tbody></table><p><strong>注意：它返回的是大于或等于x，并且与x最接近的整数。</strong></p><p>我们将把 ceil() 方法运用到不同的数字上，代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">0.8</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">6.3</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">5</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">3.5</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">-5.1</span>) + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">-5.9</span>))</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">-5</span></div><div class="line"><span class="number">-5</span></div></pre></td></tr></table></figure></p><h4 id="随机数-random"><a href="#随机数-random" class="headerlink" title="随机数 random()"></a>随机数 random()</h4><p>random() 方法可返回介于 0 ~ 1（大于或等于 0 但小于 1 )之间的一个随机数。<br>语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.random()<span class="comment">;</span></div></pre></td></tr></table></figure><p>注意：返回一个大于或等于 0 但小于 1 的符号为正的数字值。</p><p>我们取得介于 0 到 1 之间的一个随机数，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="built_in">Math</span>.random());</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0<span class="selector-class">.190305486195328</span></div></pre></td></tr></table></figure><p>注意:因为是随机数，所以每次运行结果不一样，但是0 ~ 1的数值。<br>获得0 ~ 10之间的随机数，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write((<span class="built_in">Math</span>.random())*<span class="number">10</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">8<span class="selector-class">.72153625893887</span></div></pre></td></tr></table></figure><h4 id="Array-数组对象"><a href="#Array-数组对象" class="headerlink" title="Array 数组对象"></a>Array 数组对象</h4><p>数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的</p><p>数组定义的方法：</p><ol><li>定义了一个空数组:</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  数组名= <span class="keyword">new</span> <span class="type">Array</span>();</div></pre></td></tr></table></figure><ol><li>定义时指定有n个空元素的数组：</li></ol><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 数组名 =<span class="keyword">new</span> <span class="type">Array</span>(n);</div></pre></td></tr></table></figure><p>3.定义数组的时候，直接初始化数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  数组名 = [<span class="xml"><span class="tag">&lt;<span class="name">元素1</span>&gt;</span>, <span class="tag">&lt;<span class="name">元素2</span>&gt;</span>, <span class="tag">&lt;<span class="name">元素3</span>&gt;</span>...];</span></div></pre></td></tr></table></figure><p>我们定义myArray数组，并赋值，代码如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myArray = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>];</div></pre></td></tr></table></figure><p>数组属性：</p><p>length 用法：&lt;数组对象&gt;.length；</p><p>数组方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个数组或更多的数组，并返回结果</td></tr><tr><td>join()</td><td>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔</td></tr><tr><td>pop()</td><td>删除并返回数组的最后一个元素</td></tr><tr><td>push()</td><td>向数组的末尾添加一个或更多元素，并返回新的长度</td></tr><tr><td>reverse()</td><td>颠倒数组中元素的顺序</td></tr><tr><td>shift()</td><td>删除并返回数组的第一个元素</td></tr><tr><td>slice()</td><td>从某个已有的数组返回选定的元素</td></tr><tr><td>sort()</td><td>对数组的元素进行排序</td></tr><tr><td>splice()</td><td>删除元素，并向数组添加新元素</td></tr><tr><td>toSource()</td><td>返回该对象的源代码</td></tr><tr><td>toString()</td><td>把数组转换为字符串，并返回结果</td></tr><tr><td>toLocaleString()</td><td>把数组转换为本地数组，并返回结果</td></tr><tr><td>unshift()</td><td>向数组的开头添加一个或多个元素，并返回新的长度</td></tr><tr><td>valueOf()</td><td>返回数组元素的原始值</td></tr></tbody></table><h4 id="数组连接concat"><a href="#数组连接concat" class="headerlink" title="数组连接concat()"></a>数组连接concat()</h4><p>concat() 方法用于连接两个或多个数组。此方法返回一个新数组，不改变原来的数组。</p><p>语法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arrayObject.concat(array1,array2,...,arrayN)</div></pre></td></tr></table></figure><p><strong>注意:  该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</strong></p><p>我们创建一个数组，将把 concat() 中的参数连接到数组 myarr 中，代码如下：</p><p>参数说明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mya = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span></div><div class="line"><span class="actionscript">  mya[<span class="number">0</span>] = <span class="string">"1"</span>;</span></div><div class="line"><span class="actionscript">  mya[<span class="number">1</span>] = <span class="string">"2"</span>;</span></div><div class="line"><span class="actionscript">  mya[<span class="number">2</span>] = <span class="string">"3"</span>;</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mya.concat(<span class="number">4</span>,<span class="number">5</span>)+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mya);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></div><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></div></pre></td></tr></table></figure><p>我们创建了三个数组，然后使用 concat() 把它们连接起来，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mya1= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"hello!"</span>)</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mya2= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"I"</span>,<span class="string">"love"</span>);</span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mya3= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"JavaScript"</span>,<span class="string">"!"</span>);</span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> mya4=mya1.concat(mya2,mya3);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mya4);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello!,I,love,JavaScript,!</div></pre></td></tr></table></figure><h4 id="指定分隔符连接数组元素join"><a href="#指定分隔符连接数组元素join" class="headerlink" title="指定分隔符连接数组元素join()"></a>指定分隔符连接数组元素join()</h4><p>join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。<br>语法：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arrayObject.<span class="keyword">join</span>(分隔符)</div></pre></td></tr></table></figure><p>参数说明:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>separator</td><td>可选，指定要使用的分隔符，若省略，则使用逗号作为分隔符</td></tr></tbody></table><blockquote><p>注意：返回一个字符串，该字符串把数组中的各个元素串起来，用&lt;分隔符&gt;置于元素与元素之间。这个方法不影响数组原本的内容。</p></blockquote><p> 我们使用join（）方法，将数组的所有元素放入一个字符串中，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span></div><div class="line"><span class="actionscript">  myarr[<span class="number">0</span>] = <span class="string">"I"</span>;</span></div><div class="line"><span class="actionscript">  myarr[<span class="number">1</span>] = <span class="string">"love"</span>;</span></div><div class="line"><span class="actionscript">  myarr[<span class="number">2</span>] = <span class="string">"JavaScript"</span>;</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr.join());</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">I,</span>love,JavaScript</div></pre></td></tr></table></figure></p><h4 id="颠倒数组元素顺序reverse"><a href="#颠倒数组元素顺序reverse" class="headerlink" title="颠倒数组元素顺序reverse()"></a>颠倒数组元素顺序reverse()</h4><p>reverse() 方法用于颠倒数组中元素的顺序。</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arrayObject.<span class="keyword">reverse</span>()</div></pre></td></tr></table></figure><p>注意：该方法会改变原来的数组，而不会创建新的数组。</p><p>定义数组myarr并赋值，然后颠倒其元素的顺序：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span></div><div class="line"><span class="actionscript">  myarr[<span class="number">0</span>] = <span class="string">"1"</span></span></div><div class="line"><span class="actionscript">  myarr[<span class="number">1</span>] = <span class="string">"2"</span></span></div><div class="line"><span class="actionscript">  myarr[<span class="number">2</span>] = <span class="string">"3"</span></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr + <span class="string">"&lt;br /&gt;"</span>)</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr.reverse())</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></div><div class="line"><span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span></div></pre></td></tr></table></figure><h4 id="选定元素slice"><a href="#选定元素slice" class="headerlink" title="选定元素slice()"></a>选定元素slice()</h4><p>slice() 方法可从已有的数组中返回选定的元素。</p><p>语法</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arrayObject.slice(<span class="built_in">start</span>,<span class="keyword">end</span>)</div></pre></td></tr></table></figure><p>参数说明：</p><blockquote><p>1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p><ol><li>该方法并不会修改数组，而是返回一个子数组。</li></ol></blockquote><p>注意：</p><ol><li><p>可使用负值从数组的尾部选取元素。</p></li><li><p>如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。</p></li><li><p>String.slice() 与 Array.slice() 相似。</p></li></ol><p>我们将创建一个新数组，然后从其中选取的元素，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr + <span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr.slice(<span class="number">2</span>,<span class="number">4</span>) + <span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></div><div class="line"><span class="number">3</span>,<span class="number">4</span></div><div class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></div></pre></td></tr></table></figure><h4 id="数组排序-sort"><a href="#数组排序-sort" class="headerlink" title="数组排序(sort)"></a>数组排序(sort)</h4><p>sort()方法使数组中的元素按照一定的顺序排列</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">arrayObject</span><span class="selector-class">.sort</span>(方法函数)</div></pre></td></tr></table></figure><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>方法函数</td><td>可选。规定顺序排序。必须是函数</td></tr></tbody></table><ol><li>如果不指定&lt;方法函数&gt;，则按unicode码顺序排列</li><li>如果指定&lt;方法函数&gt;,则按&lt;方法函数&gt;所指定的排序方法排序</li></ol><blockquote><p>注意：该函数要比较两个值，然后返回一个用于说明这两个值相对顺序的数字。比较函数应该具有两个参数a和b,其返回值如下。<br>若返回值 &lt;= -1,则表示A在排序后的序列中出现在Ｂ之前<br>若返回值 &gt; -1　＆＆　&lt; 1，则表示A和Ｂ具有相同的排序顺序<br>若返回子 &gt;= 1 ,则表示Ａ在排序后的序列中出现在Ｂ之后</p></blockquote><p>１，使用sort将数组进行排序</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> myarr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Hello"</span>,<span class="string">"John"</span>,<span class="string">"love"</span>,<span class="string">"JavaScript"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> myarr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"80"</span>,<span class="string">"16"</span>,<span class="string">"50"</span>,<span class="string">"6"</span>,<span class="string">"100"</span>,<span class="string">"1"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(myarr1.sort()+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(myarr2.sort());</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hello,JavaScript,John,love</div><div class="line"><span class="number">1</span>,<span class="number">100</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">80</span></div></pre></td></tr></table></figure></p><p>注意:上面的代码没有按照数值的大小对数字进行排序。</p><p>2.如要实现这一点，就必须使用一个排序函数，代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">sortNum</span><span class="params">(a,b)</span> </span>&#123;</span></div><div class="line"><span class="actionscript">  <span class="keyword">return</span> a - b;</span></div><div class="line"><span class="actionscript"> <span class="comment">//升序，如降序，把“a - b”该成“b - a”</span></span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"80"</span>,<span class="string">"16"</span>,<span class="string">"50"</span>,<span class="string">"6"</span>,<span class="string">"100"</span>,<span class="string">"1"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr + <span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(myarr.sort(sortNum));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">80</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>,<span class="number">1</span></div><div class="line"><span class="number">1</span>,<span class="number">6</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">80</span>,<span class="number">100</span></div></pre></td></tr></table></figure></p><h3 id="浏览器对象"><a href="#浏览器对象" class="headerlink" title="浏览器对象"></a>浏览器对象</h3><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><p><img src="http://img.blog.csdn.net/20171012194337255?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="JavaScript-计时器"><a href="#JavaScript-计时器" class="headerlink" title="JavaScript 计时器"></a>JavaScript 计时器</h4><p>在JavaScript中，我们可以在设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。</p><p>计时器类型：</p><p>一次性计时器：仅在指定的延迟时间之后触发一次。<br>间隔性触发计时器：每隔一定的时间间隔就触发一次。</p><p>计时器setInterval()<br>在执行时,从载入页面后每隔指定的时间执行代码。</p><p>setInterval(代码,交互时间);</p><ol><li>代码：要调用的函数或要执行的代码串。</li><li>交互时间：周期性执行或调用表达式之间的时间间隔，以毫秒计（1s=1000ms）。</li></ol><p>返回值:</p><p>一个可以传递给 clearInterval() 从而取消对”代码”的周期性执行的值。</p><p>调用函数格式(假设有一个clock()函数):<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setInterval</span><span class="params">(<span class="string">"clock()"</span>,<span class="number">1000</span>)</span></span></div></pre></td></tr></table></figure></p><p>或<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">setInterval</span><span class="params">(clock,<span class="number">1000</span>)</span></span></div></pre></td></tr></table></figure></p><p>我们设置一个计时器，每隔100毫秒调用clock()函数，并将时间显示出来，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>计时器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> int=setInterval(clock, <span class="number">100</span>)</span></div><div class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">clock</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"clock"</span>).value = time;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"clock"</span> <span class="attr">size</span>=<span class="string">"50"</span>  /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="取消计时器clearInterval"><a href="#取消计时器clearInterval" class="headerlink" title="取消计时器clearInterval()"></a>取消计时器clearInterval()</h4><p>clearInterval() 方法可取消由 setInterval() 设置的交互时间。</p><p>语法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">clearInterval</span><span class="params">(id_of_setInterval)</span></span></div></pre></td></tr></table></figure><p>参数说明:</p><p><strong>id_of_setInterval：由 setInterval() 返回的 ID 值。</strong></p><p>每隔 100 毫秒调用 clock() 函数,并显示时间。当点击按钮时，停止时间,代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>计时器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">clock</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript">      <span class="keyword">var</span> time=<span class="keyword">new</span> <span class="built_in">Date</span>();                     </span></div><div class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"clock"</span>).value = time;</span></div><div class="line"><span class="undefined">   &#125;</span></div><div class="line"><span class="actionscript"><span class="comment">// 每隔100毫秒调用clock函数，并将返回值赋值给i</span></span></div><div class="line"><span class="actionscript">     <span class="keyword">var</span> i=setInterval(<span class="string">"clock()"</span>,<span class="number">100</span>);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"clock"</span> <span class="attr">size</span>=<span class="string">"50"</span>  /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Stop"</span> <span class="attr">onclick</span>=<span class="string">"clearInterval(i)"</span>  /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="计时器setTimeout"><a href="#计时器setTimeout" class="headerlink" title="计时器setTimeout()"></a>计时器setTimeout()</h4><p>setTimeout()计时器，在载入后延迟指定时间后,去执行一次表达式,仅执行一次。</p><p>语法:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">setTimeout</span>(代码,延迟时间);</div></pre></td></tr></table></figure><p>参数说明：</p><ol><li>要调用的函数或要执行的代码串。</li><li>延时时间：在执行代码前需等待的时间，以毫秒为单位（1s=1000ms)。</li></ol><p>当我们打开网页3秒后，在弹出一个提示框，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  setTimeout(<span class="string">"alert('Hello!')"</span>, <span class="number">3000</span> );</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>当按钮start被点击时，setTimeout()调用函数，在5秒后弹出一个提示框。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">tinfo</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> t=setTimeout(<span class="string">"alert('Hello!')"</span>,<span class="number">5000</span>);</span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"start"</span> <span class="attr">onClick</span>=<span class="string">"tinfo()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>要创建一个运行于无穷循环中的计数器，我们需要编写一个函数来调用其自身。在下面的代码，当按钮被点击后，输入域便从0开始计数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> num=<span class="number">0</span>;</span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">numCount</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"> <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value=num;</span></div><div class="line"><span class="undefined"> num=num+1;</span></div><div class="line"><span class="actionscript"> setTimeout(<span class="string">"numCount()"</span>,<span class="number">1000</span>);</span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Start"</span> <span class="attr">onClick</span>=<span class="string">"numCount()"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="取消计时器clearTimeout"><a href="#取消计时器clearTimeout" class="headerlink" title="取消计时器clearTimeout()"></a>取消计时器clearTimeout()</h4><p>setTimeout()和clearTimeout()一起使用，停止计时器。</p><p>语法:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">clearTimeout</span><span class="params">(id_of_setTimeout)</span></span></div></pre></td></tr></table></figure><p>参数说明:</p><p>id_of_setTimeout：由 setTimeout() 返回的 ID 值。该值标识要取消的延迟执行代码块。</p><p>下面的例子和上节的无穷循环的例子相似。唯一不同是，现在我们添加了一个 “Stop” 按钮来停止这个计数器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">  <span class="keyword">var</span> num=<span class="number">0</span>,i;</span></div><div class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">timedCount</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value=num;</span></div><div class="line"><span class="undefined">    num=num+1;</span></div><div class="line"><span class="undefined">    i=setTimeout(timedCount,1000);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">    setTimeout(timedCount,1000);</span></div><div class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">stopCount</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="undefined">    clearTimeout(i);</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Stop"</span> <span class="attr">onClick</span>=<span class="string">"stopCount()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>History 对象<br>history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。</p><p>注意:从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。</p><p>语法：</p><p>window.history.[属性|方法]<br>注意：window可以省略。</p><p>History 对象属性</p><p><img src="http://img.blog.csdn.net/20171012201955918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>History 对象方法</p><p><img src="http://img.blog.csdn.net/20171012202005085?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>使用length属性，当前窗口的浏览历史总长度，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> HL = <span class="built_in">window</span>.history.length;</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(HL);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>返回前一个浏览的页面</p><p>back()方法，加载 history 列表中的前一个 URL。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.back</span>();</div></pre></td></tr></table></figure><p>比如，返回前一个浏览的页面，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.back</span>();</div></pre></td></tr></table></figure><p>注意：等同于点击浏览器的倒退按钮。</p><p>back()相当于go(-1),代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>(<span class="selector-tag">-1</span>);</div></pre></td></tr></table></figure><p>返回下一个浏览的页面</p><p>forward()方法，加载 history 列表中的下一个 URL。</p><p>如果倒退之后，再想回到倒退之前浏览的页面，则可以使用forward()方法,代码如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.forward</span>();</div></pre></td></tr></table></figure></p><p>注意：等价点击前进按钮。</p><p>forward()相当于go(1),代码如下:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>(1);</div></pre></td></tr></table></figure><p>返回浏览历史中的其他页面<br>go()方法，根据当前所处的页面，加载 history 列表中的某个具体的页面。</p><p>语法：</p><p>window.history.go(number);<br>参数：</p><p><img src="http://img.blog.csdn.net/20171012202641162?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>浏览器中，返回当前页面之前浏览过的第二个历史页面，代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>(<span class="selector-tag">-2</span>);</div></pre></td></tr></table></figure></p><p>注意：和在浏览器中单击两次后退按钮操作一样。</p><p>同理，返回当前页面之后浏览过的第三个历史页面，代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">window</span><span class="selector-class">.history</span><span class="selector-class">.go</span>(3);</div></pre></td></tr></table></figure><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><p>location用于获取或设置窗体的URL，并且可以用于解析URL。</p><p>语法:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.[属性<span class="string">|方法]</span></div></pre></td></tr></table></figure><p>location对象属性图示:</p><p><img src="http://img.blog.csdn.net/20171014115004579?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>location 对象属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>设置或返回从’#’开始的URL(锚)</td></tr><tr><td>host</td><td>设置或返回主机名和当前URL的端口号</td></tr><tr><td>hostname</td><td>设置或返回当前URL的主机名</td></tr><tr><td>href</td><td>设置或返回完整的URL</td></tr><tr><td>pathname</td><td>设置或返回当前URL的路径部分</td></tr><tr><td>port</td><td>设置或返回当前URL的端口号</td></tr><tr><td>protocol</td><td>设置或返回当前URL的协议</td></tr><tr><td>search</td><td>设置或返回从’?’开始的URL(查询部分)</td></tr></tbody></table><p>location 对象方法:</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>assign()</td><td>加载新的文档</td></tr><tr><td>reload()</td><td>重新加载当前文档</td></tr><tr><td>replace()</td><td>用新的文档替换当前文档</td></tr></tbody></table><h4 id="Navigator对象"><a href="#Navigator对象" class="headerlink" title="Navigator对象"></a>Navigator对象</h4><p>Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。</p><p>对象属性:</p><p><img src="http://img.blog.csdn.net/20171014120309572?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>查看浏览器的名称和版本，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript">   <span class="keyword">var</span> browser=navigator.appName;</span></div><div class="line"><span class="actionscript">   <span class="keyword">var</span> b_version=navigator.appVersion;</span></div><div class="line"><span class="javascript">   <span class="built_in">document</span>.write(<span class="string">"Browser name"</span>+browser);</span></div><div class="line"><span class="javascript">   <span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="javascript">   <span class="built_in">document</span>.write(<span class="string">"Browser version"</span>+b_version);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="userAgent"><a href="#userAgent" class="headerlink" title="userAgent"></a>userAgent</h4><p>返回用户代理头的字符串表示(就是包括浏览器版本信息等的字符串)</p><p>语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">navigator</span><span class="selector-class">.userAgent</span></div></pre></td></tr></table></figure></p><p>几种浏览的user_agent.，像360的兼容模式用的是IE、极速模式用的是chrom的内核。</p><p><img src="http://img.blog.csdn.net/20171014121630309?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>使用userAgent判断使用的是什么浏览器(假设使用的是IE8浏览器),代码如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function validB()&#123;</div><div class="line">  var u_agent = navigator.userAgent;</div><div class="line">  var <span class="attribute">B_name</span>=<span class="string">"Failed to identify the browser"</span>;</div><div class="line">  <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Firefox"</span>)&gt;-1)&#123;</div><div class="line">      <span class="attribute">B_name</span>=<span class="string">"Firefox"</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Chrome"</span>)&gt;-1)&#123;</div><div class="line">      <span class="attribute">B_name</span>=<span class="string">"Chrome"</span>;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"MSIE"</span>)&gt;-1&amp;&amp;u_agent.indexOf(<span class="string">"Trident"</span>)&gt;-1)&#123;</div><div class="line">      <span class="attribute">B_name</span>=<span class="string">"IE(8-10)"</span>;  </div><div class="line">  &#125;</div><div class="line">    document.write(<span class="string">"B_name:"</span>+B_name+<span class="string">"&lt;br&gt;"</span>);</div><div class="line">    document.write(<span class="string">"u_agent:"</span>+u_agent+<span class="string">"&lt;br&gt;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h4><p>screen对象用于获取用户的屏幕信息。</p><p>语法：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.<span class="keyword">screen</span>.属性</div></pre></td></tr></table></figure><p>对象属性:</p><p><img src="http://img.blog.csdn.net/20171014121909461?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="屏幕分辨率的高和宽"><a href="#屏幕分辨率的高和宽" class="headerlink" title="屏幕分辨率的高和宽"></a>屏幕分辨率的高和宽</h4><p>window.screen 对象包含有关用户屏幕的信息。</p><ol><li>screen.height 返回屏幕分辨率的高</li><li>screen.width 返回屏幕分辨率的宽</li></ol><p>注意:</p><ol><li>单位以像素计。</li><li>window.screen 对象在编写时可以不使用 window 这个前缀。</li></ol><p>我们来获取屏幕的高和宽，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write( <span class="string">"屏幕宽度："</span>+screen.width+<span class="string">"px&lt;br /&gt;"</span> );</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write( <span class="string">"屏幕高度："</span>+screen.height+<span class="string">"px&lt;br /&gt;"</span> );</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="屏幕可用高和宽度"><a href="#屏幕可用高和宽度" class="headerlink" title="屏幕可用高和宽度"></a>屏幕可用高和宽度</h4><ol><li>screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如任务栏。</li><li>screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如任务栏。</li></ol><p>注意:</p><p>不同系统的任务栏默认高度不一样，及任务栏的位置可在屏幕上下左右任何位置，所以有可能可用宽度和高度不一样。</p><p>我们来获取屏幕的可用高和宽度，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"可用宽度："</span> + screen.availWidth);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"可用高度："</span> + screen.availHeight);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>注意:根据屏幕的不同显示值不同。</strong></p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。</p><p>先来看看下面代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.imooc.com"</span>&gt;</span>javascript DOM<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对HTML元素进行操作，可添加，改变或移除CSS样式等<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>将HTML代码分解为DOM节点层次图:</p><p><img src="http://img.blog.csdn.net/20171014133007390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>HTML文档可以说由节点构成的集合，DOM节点有:</p><ol><li>元素节点：上图中<code>&lt;html&gt;、&lt;body&gt;、&lt;p&gt;</code>等都是元素节点，即标签。</li><li>文本节点:向用户展示的内容，如<code>&lt;li&gt;...&lt;/li&gt;</code>中的JavaScript、DOM、CSS等文本。</li><li>属性节点:元素属性，如<code>&lt;a&gt;</code>标签的链接属性href=”<a href="http://www.imooc.com&quot;。" target="_blank" rel="external">http://www.imooc.com&quot;。</a></li></ol><p>节点属性:</p><p><img src="http://img.blog.csdn.net/20171014133203378?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>遍历节点树:</p><p><img src="http://img.blog.csdn.net/20171014133241474?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>以上图ul为例，它的父级节点body,它的子节点3个li,它的兄弟结点h2、P。</p><p>DOM操作:</p><p><img src="http://img.blog.csdn.net/20171014133417506?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意:前两个是document方法。</p><h4 id="getElementsByName-方法"><a href="#getElementsByName-方法" class="headerlink" title="getElementsByName()方法"></a>getElementsByName()方法</h4><p>返回带有指定名称的节点对象的集合。</p><p>语法：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.getElementsByName(<span class="built_in">name</span>)</div></pre></td></tr></table></figure></p><p>与getElementById() 方法不同的是，通过元素的 name 属性查询元素，而不是通过 id 属性。</p><p>注意:</p><ol><li>因为文档中的 name 属性可能不唯一，所有 getElementsByName() 方法返回的是元素的数组，而不是一个元素。</li><li>和数组类似也有length属性，可以和访问数组一样的方法来访问，从0开始。</li></ol><p>看看下面的代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>getElementsByName<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getElements</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByName(<span class="string">"alink"</span>);</span></div><div class="line"><span class="undefined">alert(x.length);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"alink"</span>&gt;</span>我是链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"alink"</span>&gt;</span>我是连接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"alink"</span>&gt;</span>我是链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"getElements()"</span> <span class="attr">value</span>=<span class="string">"看看几个链接？"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="getElementsByTagName-方法"><a href="#getElementsByTagName-方法" class="headerlink" title="getElementsByTagName()方法"></a>getElementsByTagName()方法</h4><p>返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。</p><p>语法:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName(Tagname)</div></pre></td></tr></table></figure><p>说明:</p><ol><li>Tagname是标签的名称，如p、a、img等标签名。</li><li>和数组类似也有length属性，可以和访问数组一样的方法来访问，所以从0开始。</li></ol><p>看看下面代码，通过getElementsByTagName()获取节点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>getElementsByTagName<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"intro"</span>&gt;</span>我的课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="comment">// 获取所有的li集合</span></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></div><div class="line"><span class="actionscript"><span class="comment">// 访问无序列表：[0]索引</span></span></div><div class="line"><span class="undefined">li = list[0];</span></div><div class="line"><span class="actionscript"><span class="comment">// 获取list长度</span></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(list.length);</span></div><div class="line"><span class="actionscript"><span class="comment">// 弹出li节点对象的内容</span></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(li.innerHTML);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="区别getElementByID-getElementsByName-getElementsByTagName"><a href="#区别getElementByID-getElementsByName-getElementsByTagName" class="headerlink" title="区别getElementByID,getElementsByName,getElementsByTagName"></a>区别getElementByID,getElementsByName,getElementsByTagName</h4><p>以人来举例说明，人有能标识身份的身份证，有姓名，有类别(大人、小孩、老人)等。</p><ol><li>ID 是一个人的身份证号码，是唯一的。所以通过getElementById获取的是指定的一个人。</li><li>Name 是他的名字，可以重复。所以通过getElementsByName获取名字相同的人集合。</li><li>TagName可看似某类，getElementsByTagName获取相同类的人集合。如获取小孩这类人，getElementsByTagName(“小孩”)。</li></ol><p>把上面的例子转换到HTML中，如下:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby1"</span>&gt;  音乐</div></pre></td></tr></table></figure></p><p>input标签就像人的类别。<br>name属性就像人的姓名。<br>id属性就像人的身份证。</p><p>方法总结如下:</p><p><img src="http://img.blog.csdn.net/20171014140132698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>注意：方法区分大小写</p><p>通过下面的例子(6个name=”hobby”的复选项，两个按钮)来区分三种方法的不同:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby1"</span>&gt;  音乐</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby2"</span>&gt;  登山</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby3"</span>&gt;  游泳</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby4"</span>&gt;  阅读</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby5"</span>&gt;  打球</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"checkbox"</span> <span class="attribute">name</span>=<span class="string">"hobby"</span> <span class="attribute">id</span>=<span class="string">"hobby6"</span>&gt;  跑步</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"button"</span> value = <span class="string">"全选"</span> <span class="attribute">id</span>=<span class="string">"button1"</span>&gt;</div><div class="line">&lt;input <span class="attribute">type</span>=<span class="string">"button"</span> value = <span class="string">"全不选"</span> <span class="attribute">id</span>=<span class="string">"button1"</span>&gt;</div></pre></td></tr></table></figure><ol><li>document.getElementsByTagName(“input”)，结果为获取所有标签为input的元素，共8个。</li><li>document.getElementsByName(“hobby”)，结果为获取属性name=”hobby”的元素，共6个。</li><li>document.getElementById(“hobby6”)，结果为获取属性id=”hobby6”的元素，只有一个，”跑步”这个复选项。</li></ol><h4 id="getAttribute-方法"><a href="#getAttribute-方法" class="headerlink" title="getAttribute()方法"></a>getAttribute()方法</h4><p>通过元素节点的属性名称获取属性的值。</p><p>语法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementNode.getAttribute(<span class="built_in">name</span>)</div></pre></td></tr></table></figure><p>说明:</p><ol><li>elementNode：使用getElementById()、getElementsByTagName()等方法，获取到的元素节点。</li><li>name：要想查询的元素节点的属性名字</li></ol><p>看看下面的代码，获取h1标签的属性值：</p><p>运行结果:</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">h1标签的ID ：alink</div><div class="line">h1标签的<span class="built_in">title</span> ：getAttribute()获取标签的属值</div></pre></td></tr></table></figure><h4 id="setAttribute-方法"><a href="#setAttribute-方法" class="headerlink" title="setAttribute()方法"></a>setAttribute()方法</h4><p>setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。</p><p>语法：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementNode.setAttribute(<span class="keyword">name</span>,<span class="keyword">value</span>)</div></pre></td></tr></table></figure><p>说明：</p><ol><li>name: 要设置的属性名。</li><li>value: 要设置的属性值。</li></ol><blockquote><p>注意：</p><p>1.把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。<br>2.类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。</p></blockquote><h4 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h4><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：</p><ol><li>nodeName : 节点的名称</li><li>nodeValue ：节点的值</li><li>nodeType ：节点的类型</li></ol><p><strong>一、nodeName 属性: 节点的名称，是只读的。</strong></p><ol><li>元素节点的 nodeName 与标签名相同</li><li>属性节点的 nodeName 是属性的名称</li><li>文本节点的 nodeName 永远是 #text</li><li>文档节点的 nodeName 永远是 #document</li></ol><p><strong>二、nodeValue 属性：节点的值</strong></p><ol><li>元素节点的 nodeValue 是 undefined 或 null</li><li>文本节点的 nodeValue 是文本自身</li><li>属性节点的 nodeValue 是属性的值</li></ol><p><strong>三、nodeType 属性: 节点的类型，是只读的。以下常用的几种结点类型:</strong></p><table><thead><tr><th>元素类型</th><th>节点类型</th></tr></thead><tbody><tr><td>元素</td><td>1</td></tr><tr><td>属性</td><td>2</td></tr><tr><td>文本</td><td>3</td></tr><tr><td>注释</td><td>8</td></tr><tr><td>文档</td><td>9</td></tr></tbody></table><h4 id="访问子节点childNodes"><a href="#访问子节点childNodes" class="headerlink" title="访问子节点childNodes"></a>访问子节点childNodes</h4><p>访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">elementNode</span><span class="selector-class">.childNodes</span></div></pre></td></tr></table></figure><p><strong>注意：如果选定的节点没有子节点，则该属性返回不包含节点的 NodeList。</strong></p><p>我们来看看下面的代码:</p><p>运行结果:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">IE</span>:</div><div class="line"></div><div class="line">  <span class="selector-tag">UL</span>子节点个数<span class="selector-pseudo">:3</span></div><div class="line">  节点类型<span class="selector-pseudo">:1</span></div></pre></td></tr></table></figure><p>其它浏览器:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">UL</span>子节点个数<span class="selector-pseudo">:7</span></div><div class="line">节点类型<span class="selector-pseudo">:3</span></div></pre></td></tr></table></figure><p>注意:</p><ol><li>IE全系列、firefox、chrome、opera、safari兼容问题</li><li>节点之间的空白符，在firefox、chrome、opera、safari浏览器是文本节点，所以IE是3，其它浏览器是7，如下图所示:</li></ol><p><img src="http://img.blog.csdn.net/20171015213001308?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>如果把代码改成这样:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></div></pre></td></tr></table></figure><p>运行结果:（IE和其它浏览器结果是一样的）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">UL</span>子节点个数<span class="selector-pseudo">:3</span></div><div class="line">节点类型<span class="selector-pseudo">:1</span></div></pre></td></tr></table></figure><h4 id="访问子节点的第一和最后项"><a href="#访问子节点的第一和最后项" class="headerlink" title="访问子节点的第一和最后项"></a>访问子节点的第一和最后项</h4><p>一、firstChild 属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</p><p>语法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span>.<span class="title">firstChild</span></div></pre></td></tr></table></figure><blockquote><p>说明：与elementNode.childNodes[0]是同样的效果。</p></blockquote><p>二、 lastChild 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。</p><p>语法：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span>.<span class="title">lastChild</span></div></pre></td></tr></table></figure><blockquote><p>说明：与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。</p><p>注意: 上一节中，我们知道Internet Explorer 会忽略节点之间生成的空白文本节点，而其它浏览器不会。我们可以通过检测节点类型，过滤子节点。 (以后章节讲解)</p></blockquote><h4 id="访问父节点parentNode"><a href="#访问父节点parentNode" class="headerlink" title="访问父节点parentNode"></a>访问父节点parentNode</h4><p>获取指定节点的父节点</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">elementNode</span><span class="selector-class">.parentNode</span></div></pre></td></tr></table></figure><p>注意:父节点只能有一个。</p><p>看看下面的例子,获取 P 节点的父节点，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span> parentNode 获取指点节点的父节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mynode= <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mynode.parentNode.nodeName);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parentNode 获取指点节点的父节点</div><div class="line"><span class="keyword">DIV</span></div></pre></td></tr></table></figure><p>访问祖节点:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementNode<span class="selector-class">.parentNode</span><span class="selector-class">.parentNode</span></div></pre></td></tr></table></figure><p>看看下面的代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    parentNode      </div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span> 获取指点节点的父节点<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="keyword">var</span> mynode= <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(mynode.parentNode.parentNode.nodeName);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">parentNode获取指点节点的父节点</div><div class="line"><span class="keyword">DIV</span></div></pre></td></tr></table></figure><p><strong>注意: 浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。</strong></p><h4 id="访问兄弟节点"><a href="#访问兄弟节点" class="headerlink" title="访问兄弟节点"></a>访问兄弟节点</h4><ol><li>nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。</li></ol><p>语法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nodeObject</span><span class="selector-class">.nextSibling</span></div></pre></td></tr></table></figure></p><p>说明：如果无此节点，则该属性返回 null。</p><ol><li>previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。</li></ol><p>语法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nodeObject</span><span class="selector-class">.previousSibling</span></div></pre></td></tr></table></figure></p><p>说明：如果无此节点，则该属性返回 null。</p><p><strong>注意: 两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点（例如，换行符号），而其它浏览器不会忽略。</strong></p><p>解决问题方法:</p><p>判断节点nodeType是否为1, 如是为元素节点，跳过。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>nextSibling<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"u1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"u2"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>css3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>php<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>java<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">get_nextSibling</span><span class="params">(n)</span></span></span></div><div class="line"><span class="undefined">&#123;</span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> x = n.nextSibling;</span></div><div class="line"><span class="actionscript"><span class="keyword">while</span>(x.nodeType!=<span class="number">1</span>)</span></div><div class="line"><span class="undefined">&#123;</span></div><div class="line"><span class="undefined">x = x.nextSibling;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="actionscript"><span class="keyword">return</span> x;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(x.nodeName);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">" = "</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(x.innerHTML);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> y = get_nextSibling(x);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;nextsibling:"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(y.nodeName);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">" = "</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(y.innerHTML);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LI = javascript</div><div class="line"><span class="section">nextsibling: LI = jquery</span></div></pre></td></tr></table></figure><h4 id="插入节点appendChild"><a href="#插入节点appendChild" class="headerlink" title="插入节点appendChild()"></a>插入节点appendChild()</h4><p>在指定节点的最后一个子节点列表之后添加一个新的子节点。</p><p>语法:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">appendChild</span><span class="params">(newnode)</span></span></div></pre></td></tr></table></figure></p><blockquote><p>参数:</p><p>newnode：指定追加的节点。</p></blockquote><p>我们来看看，div标签内创建一个新的 P 标签，代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>appendChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"x1"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> otest = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> newnode = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></div><div class="line"><span class="actionscript">newnode.innerHTML = <span class="string">"This is a new p"</span>;</span></div><div class="line"><span class="actionscript"><span class="comment">// appendChild方法添加结点</span></span></div><div class="line"><span class="undefined">otest.appendChild(newnode);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HTML</div><div class="line">JavaScript</div><div class="line">This <span class="keyword">is</span> a <span class="keyword">new</span> p</div></pre></td></tr></table></figure><h4 id="插入节点insertBefore"><a href="#插入节点insertBefore" class="headerlink" title="插入节点insertBefore()"></a>插入节点insertBefore()</h4><p>insertBefore() 方法可在已有的子节点前插入一个新的子节点。</p><p>语法:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insertBefore(newnode,<span class="keyword">node</span><span class="title">);</span></div></pre></td></tr></table></figure><pre><code>参数:newnode: 要插入的新节点。node: 指定此节点前插入节点。</code></pre><p>我们在来看看下面代码，在指定节点前插入节点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>insertBefore<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"x1"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> otest = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">"x1"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> newnode = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></div><div class="line"><span class="actionscript">newnode.innerHTML = <span class="string">"This is a new p"</span>;</span></div><div class="line"><span class="undefined">otest.insertBefore(newnode,node);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This is <span class="selector-tag">a</span> new p</div><div class="line">JavaScript</div><div class="line">HTML</div></pre></td></tr></table></figure><p><strong>注意: otest.insertBefore(newnode,node); 也可以改为:  otest.insertBefore(newnode,otest.childNodes[0]);</strong></p><h5 id="删除节点removeChild"><a href="#删除节点removeChild" class="headerlink" title="删除节点removeChild()"></a>删除节点removeChild()</h5><p>removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。</p><p>语法:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodeObject.removeChild(<span class="keyword">node</span><span class="title">)</span></div></pre></td></tr></table></figure></p><p>参数:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">：必需，指定需要删除的节点。</span></div></pre></td></tr></table></figure></p><p>我们来看看下面代码，删除子点。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>removeChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> otest = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> x = otest.removeChild(otest.childNodes[<span class="number">1</span>]);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"删除节点的内容："</span>+x.innerHTML);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:<br><figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">HTML</span></div><div class="line">删除节点的内容: javascript</div></pre></td></tr></table></figure></p><blockquote><p>注意: 把删除的子节点赋值给 x，这个子节点不在DOM树中，但是还存在内存中，可通过 x 操作。</p></blockquote><p>如果要完全删除对象，给 x 赋 null 值，代码如下:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var otest</span> = document.getElementById(<span class="string">"div1"</span>);</div><div class="line"><span class="attribute">var x</span> = otest.removeChild(otest.childNodes[1]);</div><div class="line"><span class="attribute">x</span> = null;</div></pre></td></tr></table></figure><h4 id="替换元素节点replaceChild"><a href="#替换元素节点replaceChild" class="headerlink" title="替换元素节点replaceChild()"></a>替换元素节点replaceChild()</h4><p>replaceChild 实现子节点(对象)的替换。返回被替换对象的引用。</p><p>语法：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span>.<span class="title">replaceChild</span> (newnode,oldnew )</div></pre></td></tr></table></figure></p><p>参数：</p><pre><code>newnode : 必需，用于替换 oldnew 的对象。oldnew : 必需，被 newnode 替换的对象。</code></pre><p>我们来看看下面的代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>replaceChild<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">replaceMessage</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> newnode = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> newnodeText = <span class="built_in">document</span>.createTextNode(<span class="string">"JavaScript"</span>);</span></div><div class="line"><span class="undefined">newnode.appendChild(newnodeText);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> oldNode = <span class="built_in">document</span>.getElementById(<span class="string">"oldnode"</span>);</span></div><div class="line"><span class="undefined">oldNode.parentNode.replaceChild(newnode,oldNode);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"oldnode"</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:replaceMessage()"</span>&gt;</span>"Java" 替换　"JavaScript"<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>效果: 将文档中的 Java 改为 JavaScript。</p><blockquote><p>注意:</p><ol><li>当 oldnode 被替换时，所有与之相关的属性内容都将被移除。</li><li>newnode 必须先被建立。</li></ol></blockquote><h5 id="创建元素节点createElement"><a href="#创建元素节点createElement" class="headerlink" title="创建元素节点createElement"></a>创建元素节点createElement</h5><p>createElement()方法可创建元素节点。此方法可返回一个 Element 对象。</p><p>语法：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement(tagName)</div></pre></td></tr></table></figure></p><p>参数:</p><pre><code>tagName：字符串值，这个字符串用来指明创建元素的类型。</code></pre><p><strong>注意：要与appendChild() 或 insertBefore()方法联合使用，将元素显示在页面中。</strong></p><p>我们来创建一个按钮，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);  </span></div><div class="line"><span class="actionscript">   input.type = <span class="string">"button"</span>;  </span></div><div class="line"><span class="actionscript">   input.value = <span class="string">"创建一个按钮"</span>;  </span></div><div class="line"><span class="undefined">   body.appendChild(input);  </span></div><div class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>效果：在HTML文档中，创建一个按钮。</p><p>我们也可以使用setAttribute来设置属性，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> body= <span class="built_in">document</span>.body;             </span></div><div class="line"><span class="javascript">   <span class="keyword">var</span> btn = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);  </span></div><div class="line"><span class="actionscript">   btn.setAttribute(<span class="string">"type"</span>, <span class="string">"text"</span>);  </span></div><div class="line"><span class="actionscript">   btn.setAttribute(<span class="string">"name"</span>, <span class="string">"q"</span>);  </span></div><div class="line"><span class="actionscript">   btn.setAttribute(<span class="string">"value"</span>, <span class="string">"使用setAttribute"</span>);  </span></div><div class="line"><span class="actionscript">   btn.setAttribute(<span class="string">"onclick"</span>, <span class="string">"javascript:alert('This is a text!');"</span>);       </span></div><div class="line"><span class="undefined">   body.appendChild(btn);  </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>效果：在HTML文档中，创建一个文本框，使用setAttribute设置属性值。 当点击这个文本框时，会弹出对话框“This is a text!”。</p><h4 id="创建文本节点createTextNode"><a href="#创建文本节点createTextNode" class="headerlink" title="创建文本节点createTextNode"></a>创建文本节点createTextNode</h4><pre><code>createTextNode() 方法创建新的文本节点，返回新创建的 Text 节点。</code></pre><p>语法：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">document</span>.createTextNode(<span class="class"><span class="keyword">data</span>)</span></div></pre></td></tr></table></figure></p><p>参数：</p><pre><code>data : 字符串值，可规定此节点的文本。</code></pre><p>我们来创建一个<code>&lt;div&gt;</code>元素并向其中添加一条消息，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>createTextNode<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.message</span>&#123;</span></div><div class="line"><span class="undefined">width: 200px;</span></div><div class="line"><span class="undefined">height: 100px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#CCC</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></div><div class="line"><span class="actionscript">element.className = <span class="string">"message"</span>;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>);</span></div><div class="line"><span class="undefined">element.appendChild(textNode);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.body.appendChild(element);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>运行结果:</p><p><img src="http://img.blog.csdn.net/20171019204555644?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="浏览器窗口可视区域大小"><a href="#浏览器窗口可视区域大小" class="headerlink" title="浏览器窗口可视区域大小"></a>浏览器窗口可视区域大小</h4><pre><code>获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）的方法:</code></pre><p>一、对于IE9+、Chrome、Firefox、Opera 以及 Safari：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度</li><li>window.innerWidth - 浏览器窗口的内部宽度</li></ul><p>二、对于 Internet Explorer 8、7、6、5：</p><ul><li>document.documentElement.clientHeight表示HTML文档所在窗口的当前高度。</li><li>document.documentElement.clientWidth表示HTML文档所在窗口的当前宽度。</li></ul><p>或者</p><p>Document对象的body属性对应HTML文档的<code>&lt;body&gt;</code>标签</p><ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul><p>在不同浏览器都实用的 JavaScript 方案：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w= <span class="built_in">document</span>.documentElement.clientWidth</div><div class="line">      || <span class="built_in">document</span>.body.clientWidth;</div><div class="line"><span class="keyword">var</span> h= <span class="built_in">document</span>.documentElement.clientHeight</div><div class="line">      || <span class="built_in">document</span>.body.clientHeight;</div></pre></td></tr></table></figure><h4 id="网页尺寸scrollHeight"><a href="#网页尺寸scrollHeight" class="headerlink" title="网页尺寸scrollHeight"></a>网页尺寸scrollHeight</h4><pre><code>scrollHeight和scrollWidth，获取网页内容高度和宽度。</code></pre><p>一、针对IE、Opera:</p><pre><code>scrollHeight 是网页内容实际高度，可以小于 clientHeight。</code></pre><p>二、针对NS、FF:</p><pre><code>scrollHeight 是网页内容高度，不过最小值是 clientHeight。也就是说网页内容实际高度小于 clientHeight 时，scrollHeight 返回 clientHeight 。</code></pre><p>三、浏览器兼容性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w=<span class="built_in">document</span>.documentElement.scrollWidth</div><div class="line">   || <span class="built_in">document</span>.body.scrollWidth;</div><div class="line"><span class="keyword">var</span> h=<span class="built_in">document</span>.documentElement.scrollHeight</div><div class="line">   || <span class="built_in">document</span>.body.scrollHeight;</div></pre></td></tr></table></figure><p>注意:区分大小写</p><pre><code>scrollHeight和scrollWidth还可获取Dom元素中内容实际占用的高度和宽度。</code></pre><h4 id="网页尺寸offsetHeight"><a href="#网页尺寸offsetHeight" class="headerlink" title="网页尺寸offsetHeight"></a>网页尺寸offsetHeight</h4><pre><code>offsetHeight和offsetWidth，获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)。</code></pre><p>一、值</p><p>offsetHeight = clientHeight + 滚动条 + 边框。</p><p>二、浏览器兼容性</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w= <span class="built_in">document</span>.documentElement.offsetWidth</div><div class="line">    || <span class="built_in">document</span>.body.offsetWidth;</div><div class="line"><span class="keyword">var</span> h= <span class="built_in">document</span>.documentElement.offsetHeight</div><div class="line">    || <span class="built_in">document</span>.body.offsetHeight;</div></pre></td></tr></table></figure><h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>制作一个表格，显示班级的学生信息。</p><p>要求：</p><ol><li>鼠标移到不同行上时背景色改为色值为 #f2f2f2，移开鼠标时则恢复为原背景色 #fff</li><li>点击添加按钮，能动态在最后添加一行</li><li>点击删除按钮，则删除当前行</li></ol><p>任务<br>第一步： 首先，我们创建删除函数，并在删除按钮上添加点击事件；</p><p>提示: 使用removeChild()。<br>第二步： 编写一个函数，供添加按钮调用，动态在表格的最后一行添加子节点；</p><p>提示: 使用createElement()、innerHTML、appendChild()。<br>第三步： 更改鼠标移动改变背景则可以通过给每行绑定鼠标移上事件和鼠标移除事件来改变所在行背景色。</p><blockquote><p>提示:</p><ol><li>获取表格的行，getElementsByTagName 。</li><li>使用for进行循环，为每行添加事件及背景颜色设置。</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span> new document <span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gbk"</span>/&gt;</span>   </div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">  </span></div><div class="line"><span class="javascript"> <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="undefined">Highlight();</span></div><div class="line"><span class="undefined"> &#125;  </span></div><div class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">addOne</span><span class="params">(obj)</span></span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">'table'</span>).lastChild;  </span></div><div class="line"><span class="javascript"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);  </span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"> <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span></div><div class="line"><span class="handlebars"><span class="xml"> td.innerHTML = "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>/&gt;</span>";</span></span></div><div class="line"><span class="undefined"> tr.appendChild(td);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>); </span></div><div class="line"><span class="handlebars"><span class="xml"> td.innerHTML = "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>/&gt;</span>";</span></span></div><div class="line"><span class="undefined"> tr.appendChild(td);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span></div><div class="line"><span class="handlebars"><span class="xml"> td.innerHTML = "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'javascript:;'</span> <span class="attr">onclick</span>=<span class="string">'deleteRow(this)'</span>&gt;</span>É¾³ý<span class="tag">&lt;/<span class="name">a</span>&gt;</span>";</span></span></div><div class="line"><span class="undefined"> tr.appendChild(td);   </span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"> tbody.appendChild(tr);   </span></div><div class="line"><span class="undefined">Highlight();</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">deleteRow</span><span class="params">(obj)</span></span>&#123;</span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">'table'</span>).lastChild;  </span></div><div class="line"><span class="actionscript"><span class="keyword">var</span> tr = obj.parentNode.parentNode;</span></div><div class="line"><span class="undefined"> tbody.removeChild(tr);</span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">Highlight</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementById(<span class="string">'table'</span>).lastChild;</span></div><div class="line"><span class="actionscript">trs = tbody.getElementsByTagName(<span class="string">'tr'</span>);   </span></div><div class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>;i&lt;trs.length;i++)&#123;</span></div><div class="line"><span class="actionscript">trs[i].onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript"><span class="keyword">this</span>.style.backgroundColor =<span class="string">"#f2f2f2"</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="actionscript">trs[i].onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript"><span class="keyword">this</span>.style.backgroundColor =<span class="string">"#fff"</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">&#125;  </span></div><div class="line"><span class="undefined"> &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"50%"</span> <span class="attr">id</span>=<span class="string">"table"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>xh001<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>王小明<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"deleteRow(this)"</span>&gt;</span>É¾³ý<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>xh002<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>刘小芳<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">onclick</span>=<span class="string">"deleteRow(this)"</span>&gt;</span>É¾³ý<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </div><div class="line"></div><div class="line">   <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Ìí¼ÓÒ»ÐÐ"</span> <span class="attr">onclick</span>=<span class="string">"addOne()"</span> /&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>####　编程挑战</p><p>  现在利用之前我们学过的JavaScript知识，实现选项卡切换的效果。</p><p>效果图:</p><p><img src="http://img.blog.csdn.net/20171019221255358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>文字素材:</p><p>房产：</p><pre><code>275万购昌平邻铁三居 总价20万买一居200万内购五环三居 140万安家东三环北京首现零首付楼盘 53万购东5环50平京楼盘直降5000 中信府 公园楼王现房</code></pre><p>家居:</p><pre><code>40平出租屋大改造 美少女的混搭小窝经典清新简欧爱家 90平老房焕发新生新中式的酷色温情 66平撞色活泼家居瓷砖就像选好老婆 卫生间烟道的设计</code></pre><p>二手房：</p><pre><code>通州豪华3居260万 二环稀缺2居250w甩西3环通透2居290万 130万2居限量抢购黄城根小学学区仅260万 121平70万抛!独家别墅280万 苏州桥2居优惠价248万</code></pre><p>任务<br>大家先思考和分析实现思路，然后在动手实现</p><p>一、HTML页面布局</p><p>提示:</p><ul><li>选项卡标题使用ul..li</li><li>选项卡内容使用div</li></ul><p>二、CSS样式制作</p><p>提示:</p><ul><li>整个选项卡的样式设置</li><li>选项卡标题的样式设置</li><li>选项卡内容的样式设置</li></ul><p>一开始只显示一个选项卡内容，其它选项卡内容隐藏。</p><p>三、JS实现选项卡切换</p><blockquote><p>提示: 获取选项卡标题和选项卡内容 选项卡内容多个，需要循环遍历来操作，得知哪个选项卡和哪个选项内容匹配<br>通过改变DOM的css类名称,当前点击的选项卡显示，其它隐藏。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实践题 - 选项卡<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">        *&#123;<span class="attribute">padding</span>:<span class="number">0px</span>;<span class="attribute">margin</span>: <span class="number">0px</span>;<span class="attribute">font</span>:<span class="number">12px</span> normal <span class="string">"microsoft yahei"</span>;&#125;</span></div><div class="line"><span class="css">        <span class="selector-id">#tabs</span> &#123;<span class="attribute">width</span>:<span class="number">290px</span>;<span class="attribute">padding</span>:<span class="number">5px</span>;<span class="attribute">height</span>:<span class="number">150px</span>;<span class="attribute">margin</span>:<span class="number">20px</span>;&#125;</span></div><div class="line"><span class="css">        <span class="selector-id">#tabs</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;<span class="attribute">display</span>: block;<span class="attribute">height</span>:<span class="number">30px</span>;<span class="attribute">line-height</span>:<span class="number">30px</span>;<span class="attribute">border-bottom</span>:<span class="number">2px</span> saddlebrown solid;&#125;</span></div><div class="line"><span class="css">        <span class="selector-id">#tabs</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">float</span>:left;<span class="attribute">list-style</span>:none;<span class="attribute">height</span>:<span class="number">28px</span>;<span class="attribute">line-height</span>:<span class="number">28px</span>;<span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">3px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#aaaaaa</span>;<span class="attribute">border-bottom</span>:none;<span class="attribute">display</span>:inline-block;<span class="attribute">width</span>:<span class="number">60px</span>;<span class="attribute">text-align</span>: center;&#125;</span></div><div class="line"><span class="css">        <span class="selector-id">#tabs</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-class">.on</span>&#123;<span class="attribute">border-top</span>:<span class="number">2px</span> solid saddlebrown;<span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;&#125;</span></div><div class="line"><span class="css">        <span class="selector-id">#tabs</span> <span class="selector-tag">div</span>&#123;<span class="attribute">height</span>:<span class="number">120px</span>;<span class="attribute">line-height</span>: <span class="number">25px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#336699</span>;<span class="attribute">border-top</span>:none;<span class="attribute">padding</span>:<span class="number">5px</span>;&#125;</span></div><div class="line"><span class="css">        <span class="selector-class">.hide</span>&#123;<span class="attribute">display</span>: none;&#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">         <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">             <span class="keyword">var</span> oTab = <span class="built_in">document</span>.getElementById(<span class="string">"tabs"</span>);</span></div><div class="line"><span class="actionscript">             <span class="keyword">var</span> oUl = oTab.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span></div><div class="line"><span class="actionscript">             <span class="keyword">var</span> oLis = oUl.getElementsByTagName(<span class="string">"li"</span>);</span></div><div class="line"><span class="actionscript">             <span class="keyword">var</span> oDivs= oTab.getElementsByTagName(<span class="string">"div"</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">             <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>,len = oLis.length;i&lt;len;i++)&#123;</span></div><div class="line"><span class="undefined">                 oLis[i].index = i;</span></div><div class="line"><span class="actionscript">                 oLis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></div><div class="line"><span class="actionscript">                     <span class="keyword">for</span>(<span class="keyword">var</span> n= <span class="number">0</span>;n&lt;len;n++)&#123;</span></div><div class="line"><span class="actionscript">                         oLis[n].className = <span class="string">""</span>;</span></div><div class="line"><span class="actionscript">                         oDivs[n].className = <span class="string">"hide"</span>;</span></div><div class="line"><span class="undefined">                     &#125;</span></div><div class="line"><span class="actionscript">                     <span class="keyword">this</span>.className = <span class="string">"on"</span>;</span></div><div class="line"><span class="actionscript">                     oDivs[<span class="keyword">this</span>.index].className = <span class="string">""</span>;</span></div><div class="line"><span class="undefined">                 &#125;</span></div><div class="line"><span class="undefined">             &#125;;</span></div><div class="line"><span class="undefined">         &#125;</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"tabs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"on"</span>&gt;</span>房产<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>家居<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>二手房<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        275万购昌平邻铁三居 总价20万买一居<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        200万内购五环三居 140万安家东三环<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        北京首现零首付楼盘 53万购东5环50平<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        京楼盘直降5000 中信府 公园楼王现房<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span></div><div class="line">        40平出租屋大改造 美少女的混搭小窝<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        经典清新简欧爱家 90平老房焕发新生<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        新中式的酷色温情 66平撞色活泼家居<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        瓷砖就像选好老婆 卫生间烟道的设计<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hide"</span>&gt;</span></div><div class="line">        通州豪华3居260万 二环稀缺2居250w甩<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        西3环通透2居290万 130万2居限量抢购<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        黄城根小学学区仅260万 121平70万抛!<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">        独家别墅280万 苏州桥2居优惠价248万<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;p&gt;创建数组语法：&lt;/p&gt;
&lt;figure class=&quot;highlight haxe&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://wustxiao.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>相对定位与绝对定位的区别</title>
    <link href="http://wustxiao.cn/2017/10/10/%E7%9B%B8%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%B8%8E%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://wustxiao.cn/2017/10/10/相对定位与绝对定位的区别/</id>
    <published>2017-10-10T12:00:54.000Z</published>
    <updated>2017-10-10T12:02:34.053Z</updated>
    
    <content type="html"><![CDATA[<pre><code>你对CSS相对定位和绝对定位区别是否了解，这里和大家分享一下，CSS绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与CSS相对定位不同，CSS相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。</code></pre><h3 id="CSS相对定位和绝对定位区别"><a href="#CSS相对定位和绝对定位区别" class="headerlink" title="CSS相对定位和绝对定位区别"></a>CSS相对定位和绝对定位区别</h3><p><strong>CSS相对定位</strong></p><pre><code>CSS相对定位是一个非常容易掌握的概念。如果对一个元素进行CSS相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动。</code></pre><blockquote><p>如果将top设置为20px，那么框将在原位置顶部下面20像素的地方。如果left设置为30像素，那么会在元素左边创建30像素的空间，也就是将元素向右移动。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box_relative</span>&#123;  </div><div class="line"><span class="attribute">position</span>:relative;  </div><div class="line"><span class="attribute">left</span>:<span class="number">30px</span>;  </div><div class="line"><span class="attribute">top</span>:<span class="number">20px</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如下图所示：<br><img src="http://img.blog.csdn.net/20171010194956602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>CSS相对定位</strong></p><pre><code>注意，在使用CSS相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</code></pre><blockquote><p>设置为CSS绝对定位的元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p></blockquote><p><strong>CSS绝对定位</strong></p><blockquote><p>CSS绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与CSS相对定位不同，CSS相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。</p></blockquote><p><strong>普通流中其它元素的布局就像CSS绝对定位的元素不存在一样：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box_relative</span>&#123;  </div><div class="line"><span class="attribute">position</span>:absolute;  </div><div class="line"><span class="attribute">left</span>:<span class="number">30px</span>;  </div><div class="line"><span class="attribute">top</span>:<span class="number">20px</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如下图所示：<br><img src="http://img.blog.csdn.net/20171010195504180?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>CSS绝对定位</p><p><strong>CSS绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。</strong></p><pre><code>对于定位的主要问题是要记住每种定位的意义。所以，现在让我们复习一下学过的知识吧：CSS相对定位是“相对于”元素在文档中的初始位置，而CSS绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么“相对于”最初的包含块。</code></pre><blockquote><p>提示：因为CSS绝对定位的框与文档流无关，所以它们可以覆盖页面上的其它元素。可以通过设置z-index属性来控制这些框的堆放次序。</p></blockquote><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;你对CSS相对定位和绝对定位区别是否了解，这里和大家分享一下，CSS绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与CSS相对定位不同，CSS相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。
&lt;/code&gt;&lt;/p
      
    
    </summary>
    
      <category term="前端学习" scheme="http://wustxiao.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="前端" scheme="http://wustxiao.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wustxiao.cn/2017/10/10/hello-world/"/>
    <id>http://wustxiao.cn/2017/10/10/hello-world/</id>
    <published>2017-10-10T11:05:48.121Z</published>
    <updated>2017-10-10T11:05:48.121Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端基本布局</title>
    <link href="http://wustxiao.cn/2017/10/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80/"/>
    <id>http://wustxiao.cn/2017/10/10/前端基本布局/</id>
    <published>2017-10-10T10:20:02.000Z</published>
    <updated>2017-10-10T11:41:02.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>两列布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">margin: 0px;</span></div><div class="line"><span class="undefined">padding: 0px;</span></div><div class="line"><span class="undefined">border: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">body,html&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#zuo</span>&#123;</span></div><div class="line"><span class="undefined">width: 400px;</span></div><div class="line"><span class="undefined">height: 600px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#960</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#you</span>&#123;</span></div><div class="line"><span class="undefined">height: 600px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#0FC</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>效果图为：</p><p><img src="http://img.blog.csdn.net/20171010182959593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="两列自适应居中"><a href="#两列自适应居中" class="headerlink" title="两列自适应居中"></a>两列自适应居中</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>两列自适应居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">margin: 0px;</span></div><div class="line"><span class="undefined">padding: 0px;</span></div><div class="line"><span class="undefined">border: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined">body,html&#123;</span></div><div class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100</span>%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#zuo</span>&#123;</span></div><div class="line"><span class="undefined">width: 30%;</span></div><div class="line"><span class="undefined">height: 600px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#960</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#you</span>&#123;</span></div><div class="line"><span class="undefined">width: 70%;</span></div><div class="line"><span class="undefined">height: 600px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#0FC</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>效果图为：<br><img src="http://img.blog.csdn.net/20171010192828512?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="三列布局中间自适应"><a href="#三列布局中间自适应" class="headerlink" title="三列布局中间自适应"></a>三列布局中间自适应</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>三列布局中间自适应<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">margin: 0px;</span></div><div class="line"><span class="undefined">padding: 0px;</span></div><div class="line"><span class="undefined">border: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">html,body&#123;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="undefined">width: 100%;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#zuo</span>&#123;</span></div><div class="line"><span class="undefined">width: 200px;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#960</span>;</span></div><div class="line"><span class="undefined">position: absolute;</span></div><div class="line"><span class="undefined">top: 0px;</span></div><div class="line"><span class="undefined">left: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#you</span>&#123;</span></div><div class="line"><span class="undefined">width: 200px;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#960</span>;</span></div><div class="line"><span class="undefined">position: absolute;</span></div><div class="line"><span class="undefined">top: 0px;</span></div><div class="line"><span class="undefined">right: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#ong</span>&#123;</span></div><div class="line"><span class="undefined">height: 100%;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#0FC</span>;</span></div><div class="line"><span class="undefined">margin-left: 200px;</span></div><div class="line"><span class="undefined">margin-right: 200px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ong"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"you"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>效果图为：<br><img src="http://img.blog.csdn.net/20171010193717714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="复杂页面排版"><a href="#复杂页面排版" class="headerlink" title="复杂页面排版"></a>复杂页面排版</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>复杂页面排版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">*&#123;</span></div><div class="line"><span class="undefined">margin: 0px;</span></div><div class="line"><span class="undefined">padding: 0px;</span></div><div class="line"><span class="undefined">border: 0px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#box</span>&#123;</span></div><div class="line"><span class="undefined">height: 1330px;</span></div><div class="line"><span class="undefined">width: 950px;</span></div><div class="line"><span class="undefined">margin: auto;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#hen</span>&#123;</span></div><div class="line"><span class="undefined">height: 245px;</span></div><div class="line"><span class="undefined">width: 950px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#963</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#zuo</span>&#123;</span></div><div class="line"><span class="undefined">height: 915px;</span></div><div class="line"><span class="undefined">width: 386px;</span></div><div class="line"><span class="undefined">margin-top: 10px;</span></div><div class="line"><span class="undefined">margin-bottom: 10px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#C30</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#xia1</span>&#123;</span></div><div class="line"><span class="undefined">height: 540px;</span></div><div class="line"><span class="undefined">width: 272px;</span></div><div class="line"><span class="undefined">margin-top: 10px;</span></div><div class="line"><span class="undefined">margin-left: 10px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#099</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#xia2</span>&#123;</span></div><div class="line"><span class="undefined">height: 540px;</span></div><div class="line"><span class="undefined">width: 272px;</span></div><div class="line"><span class="undefined">margin-top: 10px;</span></div><div class="line"><span class="undefined">margin-left: 10px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#099</span>;</span></div><div class="line"><span class="undefined">float: left;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#xia3</span>&#123;</span></div><div class="line"><span class="undefined">height: 365px;</span></div><div class="line"><span class="undefined">width: 554px;</span></div><div class="line"><span class="undefined">margin-top: 10px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#C66</span>;</span></div><div class="line"><span class="undefined">float: right;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#dib</span>&#123;</span></div><div class="line"><span class="undefined">height: 150px;</span></div><div class="line"><span class="undefined">width: 950px;</span></div><div class="line"><span class="undefined">margin-top: 10px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#639</span>;</span></div><div class="line"><span class="undefined">clear: both</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hen"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"zuo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xia1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xia2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"xia3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dib"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>效果图为：</p><p><img src="http://img.blog.csdn.net/20171010193938672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;两列布局&quot;&gt;&lt;a href=&quot;#两列布局&quot; class=&quot;headerlink&quot; title=&quot;两列布局&quot;&gt;&lt;/a&gt;两列布局&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript入门篇</title>
    <link href="http://wustxiao.cn/2017/10/09/JavaScript%E5%85%A5%E9%97%A8%E7%AF%87/"/>
    <id>http://wustxiao.cn/2017/10/09/JavaScript入门篇/</id>
    <published>2017-10-09T14:52:45.000Z</published>
    <updated>2017-10-14T07:56:54.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="javascript介绍"><a href="#javascript介绍" class="headerlink" title="javascript介绍"></a>javascript介绍</h3><pre><code>JavaScript代码写在`&lt;script&gt;&lt;/script&gt;`之间。`&lt;script type=&quot;text/javascript&quot;&gt;表示在&lt;script&gt;&lt;/script&gt;`之间的是文本类型(text),javascript是为了告诉浏览器里面的文本是属于JavaScript语言。</code></pre><h3 id="JS文件放在哪？"><a href="#JS文件放在哪？" class="headerlink" title="JS文件放在哪？"></a>JS文件放在哪？</h3><ol><li>放在<code>&lt;body&gt;&lt;/body&gt;</code>内部引用</li><li>放在<code>&lt;head&gt;&lt;/head&gt;</code>内部引用</li><li><p>单独写一个js文件存放，需要在哪个地方引用就在哪个地方用`<script src="script.js"></script>引用</p><p> 我们可以把HTML文件和JS代码分开,并单独创建一个JavaScript文件(简称JS文件),其文件后缀通常为.js，然后将JS代码直接写在JS文件中。</p><p> <strong>注意:在JS文件中，不需要<code>&lt;script&gt;</code>标签,直接编写JavaScript代码就可以了。</strong></p></li></ol><p>JS文件不能直接运行，需嵌入到HTML文件中执行，我们需在HTML中添加如下代码，就可将JS文件嵌入HTML文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"script.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171009195315588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>放在<code>&lt;head&gt;</code>部分</li></ul><p>最常用的方式是在页面中head部分放置<code>&lt;script&gt;</code>元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分。</p><ul><li>放在<code>&lt;body&gt;</code>部分</li></ul><p>JavaScript代码在网页读取到该语句的时候就会执行。</p><p><strong>注意:</strong> javascript作为一种脚本语言可以放在html页面中任何位置，但是浏览器解释html时是按先后顺序的，所以前面的script就先被执行。比如进行页面显示初始化的js必须放在head里面，因为初始化都要求提前进行（如给页面body设置css等）；而如果是通过事件调用执行的function那么对位置没什么要求的。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名可以任意取名，但要遵循命名规则:</p><pre><code>1.变量必须使用字母、下划线(_)或者美元符($)开始。2.然后可以使用任意多个英文字母、数字、下划线(_)或者美元符($)组成。3.不能使用JavaScript关键词与JavaScript保留字。</code></pre><p>变量要先声明再赋值，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mychar;</div><div class="line">mychar=<span class="string">"javascript"</span>;</div><div class="line"><span class="keyword">var</span> mynum = <span class="number">6</span>;</div></pre></td></tr></table></figure><p>变量可以重复赋值，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mychar;</div><div class="line">mychar=<span class="string">"javascript"</span>;</div><div class="line">mychar=<span class="string">"hello"</span>;</div></pre></td></tr></table></figure><p><strong>注意:</strong></p><ol><li>在JS中区分大小写，如变量mychar与myChar是不一样的，表示是两个变量。</li><li>变量虽然也可以不声明，直接使用，但不规范，需要先声明，后使用。</li></ol><h3 id="if-else判断语句"><a href="#if-else判断语句" class="headerlink" title="if else判断语句"></a>if else判断语句</h3><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(条件)</div><div class="line">&#123; 条件成立时执行的代码 &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123; 条件不成立时执行的代码 &#125;</div></pre></td></tr></table></figure><p>假设我们通过年龄来判断是否为成年人，如年龄大于等于18岁，是成年人，否则不是成年人。代码表示如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> myage = <span class="number">18</span>;</div><div class="line">   <span class="keyword">if</span>(myage&gt;=<span class="number">18</span>)  <span class="comment">//myage&gt;=18是判断条件</span></div><div class="line">   &#123; <span class="built_in">document</span>.write(<span class="string">"你是成年人。"</span>);&#125;</div><div class="line">   <span class="keyword">else</span>  <span class="comment">//否则年龄小于18</span></div><div class="line">   &#123; <span class="built_in">document</span>.write(<span class="string">"未满18岁，你不是成年人。"</span>);&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>如何定义一个函数呢？基本语法如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">     函数代码;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明:</p><ol><li>function定义函数的关键字。</li><li>“函数名”你为函数取的名字。</li><li>“函数代码”替换为完成特定功能的代码。</li></ol><p>我们来编写一个实现两数相加的简单函数,并给函数起个有意义的名字：“add2”，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> sum = <span class="number">3</span> + <span class="number">2</span>;</div><div class="line">   alert(sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>函数调用:</p><p>函数定义好后，是不能自动执行的，所以需调用它,只需直接在需要的位置写函数就ok了,代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>函数<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">add2</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="undefined">sum = 5 + 6;</span></div><div class="line"><span class="undefined">alert(sum);</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"add2()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="输出内容（document-write）"><a href="#输出内容（document-write）" class="headerlink" title="输出内容（document.write）"></a>输出内容（document.write）</h3><pre><code>document.write() 可用于直接向 HTML 输出流写内容。简单的说就是直接在网页中输出内容。</code></pre><p>第一种:输出内容用””括起，直接输出””号内的内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">"I love JavaScript！"</span>); <span class="comment">//内容用""括起来，""里的内容直接输出。</span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>第二种:通过变量，输出内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">var</span> mystr=<span class="string">"hello world!"</span>;</div><div class="line">  <span class="built_in">document</span>.write(mystr);  <span class="comment">//直接写变量名，输出变量存储的内容。</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><p>第三种:输出多项内容，内容之间用+号连接。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">var</span> mystr=<span class="string">"hello"</span>;</div><div class="line">  <span class="built_in">document</span>.write(mystr+<span class="string">"I love JavaScript"</span>); <span class="comment">//多项内容之间用+号连接</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><p>第四种:输出HTML标签，并起作用，标签使用””括起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  <span class="keyword">var</span> mystr=<span class="string">"hello"</span>;</div><div class="line"><span class="built_in">document</span>.write(mystr+<span class="string">"&lt;br&gt;"</span>);<span class="comment">//输出hello后，输出一个换行符</span></div><div class="line">  <span class="built_in">document</span>.write(<span class="string">"JavaScript"</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="警告（alert-消息对话框）"><a href="#警告（alert-消息对话框）" class="headerlink" title="警告（alert 消息对话框）"></a>警告（alert 消息对话框）</h3><p>我们在访问网站的时候，有时会突然弹出一个小窗口，上面写着一段提示信息文字。如果你不点击“确定”，就不能对网页做任何操作，这个小窗口就是使用alert实现的。</p><p>语法:</p><pre><code>alert(字符串或变量);  </code></pre><p>看下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> mynum = <span class="number">30</span>;</div><div class="line">   alert(<span class="string">"hello!"</span>);</div><div class="line">   alert(mynum);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="确认（confirm-消息对话框）"><a href="#确认（confirm-消息对话框）" class="headerlink" title="确认（confirm 消息对话框）"></a>确认（confirm 消息对话框）</h3><p>confirm 消息对话框通常用于允许用户做选择的动作，如：“你对吗？”等。弹出对话框(包括一个确定按钮和一个取消按钮)。</p><p>语法:</p><pre><code>confirm(str);</code></pre><p>参数说明:</p><pre><code>str：在消息对话框中要显示的文本</code></pre><p>返回值: Boolean值</p><pre><code>当用户点击&quot;确定&quot;按钮时，返回true当用户点击&quot;取消&quot;按钮时，返回false</code></pre><p><strong>注: 通过返回值可以判断用户点击了什么按钮</strong></p><p>看下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> mymessage=confirm(<span class="string">"你喜欢JavaScript吗?"</span>);</div><div class="line">    <span class="keyword">if</span>(mymessage==<span class="literal">true</span>)</div><div class="line">    &#123;   <span class="built_in">document</span>.write(<span class="string">"很好,加油!"</span>);   &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;  <span class="built_in">document</span>.write(<span class="string">"JS功能强大，要学习噢!"</span>);   &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="提问（prompt-消息对话框）"><a href="#提问（prompt-消息对话框）" class="headerlink" title="提问（prompt 消息对话框）"></a>提问（prompt 消息对话框）</h3><p>prompt弹出消息对话框,通常用于询问一些需要与用户交互的信息。弹出消息对话框（包含一个确定按钮、取消按钮与一个文本输入框）。</p><p>语法:</p><pre><code>prompt(str1, str2);</code></pre><p>参数说明：</p><pre><code>str1: 要显示在消息对话框中的文本，不可修改str2：文本框中的内容，可以修改</code></pre><p>返回值:</p><pre><code>1. 点击确定按钮，文本框中的内容将作为函数返回值2. 点击取消按钮，将返回null</code></pre><p>看看下面代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myname=prompt(<span class="string">"请输入你的姓名:"</span>);</div><div class="line"><span class="keyword">if</span>(myname!=<span class="literal">null</span>)</div><div class="line">  &#123;   alert(<span class="string">"你好"</span>+myname); &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;  alert(<span class="string">"你好 my friend."</span>);  &#125;</div></pre></td></tr></table></figure><h3 id="打开新窗口（window-open）"><a href="#打开新窗口（window-open）" class="headerlink" title="打开新窗口（window.open）"></a>打开新窗口（window.open）</h3><p>open() 方法可以查找一个已经存在或者新建的浏览器窗口。</p><p>语法：</p><pre><code>window.open([URL], [窗口名称], [参数字符串])</code></pre><p>参数说明:</p><pre><code>URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。窗口名称：可选参数，被打开窗口的名称。    1. 该名称由字母、数字和下划线字符组成。    2. &quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。       _blank：在新窗口显示目标网页       _self：在当前窗口显示目标网页       _top：框架网页中在上部窗口中显示目标网页    3. 相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。    4. name 不能包含有空格。参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。</code></pre><p>参数表：</p><table><thead><tr><th>参数</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>top</td><td>Number</td><td>窗口顶部离开屏幕顶部的像素数</td></tr><tr><td>left</td><td>Number</td><td>窗口左端离开屏幕左端的像素数</td></tr><tr><td>width</td><td>Number</td><td>窗口的宽度</td></tr><tr><td>height</td><td>Number</td><td>窗口的高度</td></tr><tr><td>menubar</td><td>yes,no</td><td>窗口有没有菜单</td></tr><tr><td>toolbar</td><td>yes,no</td><td>窗口有没有工具条</td></tr><tr><td>scrollbars</td><td>yes,no</td><td>窗口有没有滚动条</td></tr><tr><td>status</td><td>yes,no</td><td>窗口有没有状态栏</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>prompt<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">Wopen</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="built_in">window</span>.open(<span class="string">'http://www.imooc.com'</span>,<span class="string">'_blank'</span>,<span class="string">'width=600,height=400,menubar=no,toolbar=no,status=no,scrollbars=yes,top=10,left=0'</span>)</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击我，打开新窗口"</span> <span class="attr">onclick</span>=<span class="string">"Wopen()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="关闭窗口（window-close）"><a href="#关闭窗口（window-close）" class="headerlink" title="关闭窗口（window.close）"></a>关闭窗口（window.close）</h3><p>close()关闭窗口</p><p>用法：</p><pre><code>window.close();   //关闭本窗口</code></pre><p>或</p><pre><code>&lt;窗口对象&gt;.close();   //关闭指定的窗口</code></pre><p>例如:关闭新建的窗口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">   <span class="keyword">var</span> mywin=<span class="built_in">window</span>.open(<span class="string">'http://www.imooc.com'</span>); <span class="comment">//将新打的窗口对象，存储在变量mywin中</span></div><div class="line">   mywin.close();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="认识DOM"><a href="#认识DOM" class="headerlink" title="认识DOM"></a>认识DOM</h3><p>文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。</p><p>先来看看下面代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.imooc.com"</span>&gt;</span>javascript DOM<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>对HTML元素进行操作，可添加，改变或移除CSS样式等<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>将HTML代码分解为DOM节点层次图:</p><p><img src="http://img.blog.csdn.net/20171009215827315?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>HTML文档可以说由节点构成的集合，三种常见的DOM节点:</p><ol><li><p>元素节点：上图中<code>&lt;html&gt;、&lt;body&gt;、&lt;p&gt;</code>等都是元素节点，即标签。</p></li><li><p>文本节点:向用户展示的内容，如<code>&lt;li&gt;...&lt;/li&gt;</code>中的JavaScript、DOM、CSS等文本。</p></li><li><p>属性节点:元素属性，如<code>&lt;a&gt;</code>标签的链接属性href=”<a href="http://www.imooc.com&quot;。" target="_blank" rel="external">http://www.imooc.com&quot;。</a></p></li></ol><p>看下面代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.imooc.com"</span>&gt;</span>JavaScript DOM<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171009215921046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="通过ID获取元素"><a href="#通过ID获取元素" class="headerlink" title="通过ID获取元素"></a>通过ID获取元素</h3><p>学过HTML/CSS样式，都知道，网页由标签将信息组织起来，而标签的id属性值是唯一的，就像是每人有一个身份证号一样，只要通过身份证号就可以找到相对应的人。那么在网页中，我们通过id先找到标签，然后进行操作。</p><p>语法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(“id”)</div></pre></td></tr></table></figure><p>看看下面代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>获取元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> mychar = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"结果："</span>+mychar);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>结果:null或[object HTMLParagraphElement]</p><p><strong>注:获取的元素是一个对象，如想对元素进行操作，我们要通过它的属性或方法。</strong></p><h3 id="innerHTML-属性"><a href="#innerHTML-属性" class="headerlink" title="innerHTML 属性"></a>innerHTML 属性</h3><p>innerHTML 属性用于获取或替换 HTML 元素的内容。</p><p>语法:</p><pre><code>Object.innerHTML</code></pre><p>注意:</p><pre><code>1.Object是获取的元素对象，如通过document.getElementById(&quot;ID&quot;)获取的元素。2.注意书写，innerHTML区分大小写。</code></pre><p>我们通过id=”con”获取<code>&lt;p&gt;</code> 元素，并将元素的内容输出和改变元素内容，代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>innerHTML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> mycon = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"p标签原始内容："</span>+mycon.innerHTML+<span class="string">"&lt;br&gt;"</span>)</span></div><div class="line"><span class="actionscript"><span class="comment">// 输入元素内容</span></span></div><div class="line"><span class="actionscript">mycon.innerHTML=<span class="string">"New text!"</span>;</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"p标签修改后内容："</span>+mycon.innerHTML);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h3><p>HTML DOM 允许 JavaScript 改变 HTML 元素的样式。如何改变 HTML 元素的样式呢？</p><p>语法:</p><pre><code>Object.style.property=new style;</code></pre><p><strong>注意:Object是获取的元素对象，如通过document.getElementById(“id”)获取的元素。</strong></p><p>看看下面的代码:</p><pre><code>改变 &lt;p&gt; 元素的样式，将颜色改为红色，字号改为20,背景颜色改为蓝：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;p id=<span class="string">"pcon"</span>&gt;Hello World!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> mychar = <span class="built_in">document</span>.getElementById(<span class="string">"pcon"</span>);</div><div class="line">   mychar.style.color=<span class="string">"red"</span>;</div><div class="line">   mychar.style.fontSize=<span class="string">"20"</span>;</div><div class="line">   mychar.style.backgroundColor =<span class="string">"blue"</span>;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><h3 id="显示和隐藏（display属性）"><a href="#显示和隐藏（display属性）" class="headerlink" title="显示和隐藏（display属性）"></a>显示和隐藏（display属性）</h3><pre><code>网页中经常会看到显示和隐藏的效果，可通过display属性来设置。</code></pre><p>语法：</p><pre><code>Object.style.display = value</code></pre><p><strong>注意:Object是获取的元素对象，如通过document.getElementById(“id”)获取的元素。</strong></p><p>value取值:</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>此元素不会被显示，即隐藏</td></tr><tr><td>block</td><td>此元素将显示为块级元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>display<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">hidetext</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> mychar = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="actionscript">mychar.style.display=<span class="string">"none"</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showtext</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> mychar = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="actionscript">mychar.style.display=<span class="string">"block"</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span>作为一个web开发师来说，如果你想提供漂亮的网页，令用户满意的上网体验，JavaScript是必不可少的工具<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"hidetext()"</span> <span class="attr">value</span>=<span class="string">"隐藏内容"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"showtext()"</span> <span class="attr">value</span>=<span class="string">"显示内容"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="控制类名（className-属性）"><a href="#控制类名（className-属性）" class="headerlink" title="控制类名（className 属性）"></a>控制类名（className 属性）</h3><p>className 属性设置或返回元素的class 属性。</p><p>语法：</p><pre><code>object.className = classname</code></pre><p>作用:</p><pre><code>1.获取元素的class 属性2. 为网页内的某个元素指定一个css样式来更改该元素的外观</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>className属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">input&#123;</span></div><div class="line"><span class="undefined">font-size: 10px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.one</span>&#123;</span></div><div class="line"><span class="undefined">width: 200px;</span></div><div class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#CCC</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-class">.two</span>&#123;</span></div><div class="line"><span class="undefined">font-size: 18px;</span></div><div class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#F00</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"con"</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点击更改"</span> <span class="attr">onclick</span>=<span class="string">"modifyclass()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> mychar = <span class="built_in">document</span>.getElementById(<span class="string">"con"</span>);</span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">"p元素Class值为："</span>+mychar.className+<span class="string">"&lt;br&gt;"</span>);</span></div><div class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">modifyclass</span><span class="params">()</span></span>&#123;</span></div><div class="line"><span class="actionscript">mychar.className = <span class="string">"two"</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;javascript介绍&quot;&gt;&lt;a href=&quot;#javascript介绍&quot; class=&quot;headerlink&quot; title=&quot;javascript介绍&quot;&gt;&lt;/a&gt;javascript介绍&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;JavaScript代码写在`&amp;lt;scr
      
    
    </summary>
    
      <category term="JavaScript学习" scheme="http://wustxiao.cn/categories/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://wustxiao.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取(三)：网络爬虫之实战</title>
    <link href="http://wustxiao.cn/2017/10/09/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96-%E4%B8%89-%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B9%8B%E5%AE%9E%E6%88%98/"/>
    <id>http://wustxiao.cn/2017/10/09/Python网络爬虫与信息提取-三-：网络爬虫之实战/</id>
    <published>2017-10-09T11:30:11.000Z</published>
    <updated>2017-10-10T11:15:25.845Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Re(正则表达式)库入门</strong></p><pre><code>regular expression = regex = RE是一种通用的字符串表达框架,用来简洁表达一组字符串的表达式,也可用来判断某字符串的特征归属</code></pre><p><strong>正则表达式的语法</strong><br><img src="http://img.blog.csdn.net/20171003172550881?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>常用操作符</strong><br><img src="http://img.blog.csdn.net/20171003172903007?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>实例</strong><br><img src="http://img.blog.csdn.net/20171003173123271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171003173148932?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Re库的基本使用</strong></p><ul><li>正则表达式的表示类型为raw string类型(原生字符串类型),表示为r’text’</li><li><p>Re库主要功能函数<br><img src="http://img.blog.csdn.net/20171003173600313?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>功能函数</p></li><li><strong>re.search(pattern,string,flags=0)</strong></li></ul><p><img src="http://img.blog.csdn.net/20171003174502422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171003175004492?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><p><strong>re.match(pattern,string,flags=0)</strong></p><p> 因为match为从开始位置开始匹配,使用时要加if进行判别返回结果是否为空,否则会报错</p></li></ul><p><img src="http://img.blog.csdn.net/20171003174827459?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><strong>re.findall(pattern,string,flags=0)</strong><br><img src="http://img.blog.csdn.net/20171003175333187?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li><li><p><strong>re.split(pattern,string,maxsplit=0,flags=0)</strong></p><pre><code>maxsplit为最大分割数,剩余部分作为最后一个元素输出</code></pre></li></ul><p><img src="http://img.blog.csdn.net/20171003175818527?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><strong>re.finditer(pattern,string,flags=0)</strong></li></ul><p><img src="http://img.blog.csdn.net/20171003180036474?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><p><strong>re.sub(pattern,repl,string,count=0,flags=0)</strong></p><pre><code>repl是用来替换的字符串,count为替换次数</code></pre></li></ul><p><img src="http://img.blog.csdn.net/20171003180256096?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li><strong>Re库的另一种等价用法</strong></li></ul><p>Re库的函数式用法为一次性操作,还有一种为面向对象用法,可在编译后多次操作</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">regex</span> = re.compile(pattern,flags=<span class="number">0</span>)</div></pre></td></tr></table></figure><p><strong>通过compile生成的regex对象才能被叫做正则表达式</strong><br><img src="http://img.blog.csdn.net/20171003180754812?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Match对象的属性</strong></p><p><img src="http://img.blog.csdn.net/20171003212506588?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Match对象的方法</strong></p><p><img src="http://img.blog.csdn.net/20171003212601752?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>例子</strong></p><p><img src="http://img.blog.csdn.net/20171003212745305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><pre><code>Re库的贪婪匹配和最小匹配Re库默认采取贪婪匹配,即输出匹配最长的子串</code></pre><p><img src="http://img.blog.csdn.net/20171003212936289?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>实例二:淘宝商品比价定向爬虫(requests-re)</strong></p><pre><code>步骤1:提交商品搜索请求,循环获取页面步骤2:对于每个页面,提取商品名称和价格信息步骤3:将信息输出显示</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        r.encoding = r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        plt = re.findall(<span class="string">r'\"view_price\"\:\"[\d\.]*\"'</span>,html)</div><div class="line">        tlt = re.findall(<span class="string">r'\"raw_title\"\:\".*?\"'</span>,html)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</div><div class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</div><div class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</div><div class="line">            ilt.append([price , title])</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">""</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></div><div class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></div><div class="line">    print(tplt.format(<span class="string">"序号"</span>, <span class="string">"价格"</span>, <span class="string">"商品名称"</span>))</div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</div><div class="line">        count = count + <span class="number">1</span></div><div class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    goods = <span class="string">'书包'</span></div><div class="line">    depth = <span class="number">3</span></div><div class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</div><div class="line">    infoList = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</div><div class="line">            html = getHTMLText(url)</div><div class="line">            parsePage(infoList, html)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    printGoodsList(infoList)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p><strong>实例三:股票数据定向爬虫</strong></p><pre><code>步骤1:从东方财富网获取股票列表步骤2:根据股票列表逐个到百度股票获取个股信息步骤3:将结果存储到文件</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#CrawBaiduStocksB.py</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url, code=<span class="string">"utf-8"</span>)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url)</div><div class="line">        r.raise_for_status()</div><div class="line">        r.encoding = code</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockList</span><span class="params">(lst, stockURL)</span>:</span></div><div class="line">    html = getHTMLText(stockURL, <span class="string">"GB2312"</span>)</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">    a = soup.find_all(<span class="string">'a'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            href = i.attrs[<span class="string">'href'</span>]</div><div class="line">            lst.append(re.findall(<span class="string">r"[s][hz]\d&#123;6&#125;"</span>, href)[<span class="number">0</span>])</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getStockInfo</span><span class="params">(lst, stockURL, fpath)</span>:</span></div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> stock <span class="keyword">in</span> lst:</div><div class="line">        url = stockURL + stock + <span class="string">".html"</span></div><div class="line">        html = getHTMLText(url)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> html==<span class="string">""</span>:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            infoDict = &#123;&#125;</div><div class="line">            soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">            stockInfo = soup.find(<span class="string">'div'</span>,attrs=&#123;<span class="string">'class'</span>:<span class="string">'stock-bets'</span>&#125;)</div><div class="line"></div><div class="line">            name = stockInfo.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'bets-name'</span>&#125;)[<span class="number">0</span>]</div><div class="line">            infoDict.update(&#123;<span class="string">'股票名称'</span>: name.text.split()[<span class="number">0</span>]&#125;)</div><div class="line"></div><div class="line">            keyList = stockInfo.find_all(<span class="string">'dt'</span>)</div><div class="line">            valueList = stockInfo.find_all(<span class="string">'dd'</span>)</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(keyList)):</div><div class="line">                key = keyList[i].text</div><div class="line">                val = valueList[i].text</div><div class="line">                infoDict[key] = val</div><div class="line"></div><div class="line">            <span class="keyword">with</span> open(fpath, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">                f.write( str(infoDict) + <span class="string">'\n'</span> )</div><div class="line">                count = count + <span class="number">1</span></div><div class="line">                print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            count = count + <span class="number">1</span></div><div class="line">            print(<span class="string">"\r当前进度: &#123;:.2f&#125;%"</span>.format(count*<span class="number">100</span>/len(lst)),end=<span class="string">""</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    stock_list_url = <span class="string">'http://quote.eastmoney.com/stocklist.html'</span></div><div class="line">    stock_info_url = <span class="string">'https://gupiao.baidu.com/stock/'</span></div><div class="line">    output_file = <span class="string">'D:/BaiduStockInfo.txt'</span></div><div class="line">    slist=[]</div><div class="line">    getStockList(slist, stock_list_url)</div><div class="line">    getStockInfo(slist, stock_info_url, output_file)</div><div class="line"></div><div class="line">main()</div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Re(正则表达式)库入门&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;regular expression = regex = RE
是一种通用的字符串表达框架,用来简洁表达一组字符串的表达式,也可用来判断某字符串的特征归属
&lt;/code&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
      <category term="Python学习" scheme="http://wustxiao.cn/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://wustxiao.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取(二)：网络爬虫之提取</title>
    <link href="http://wustxiao.cn/2017/10/09/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96-%E4%BA%8C-%EF%BC%9A%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B9%8B%E6%8F%90%E5%8F%96/"/>
    <id>http://wustxiao.cn/2017/10/09/Python网络爬虫与信息提取-二-：网络爬虫之提取/</id>
    <published>2017-10-09T11:28:12.000Z</published>
    <updated>2017-10-10T11:15:16.613Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Beautiful Soup库可对HTML/XML格式进行解析并提取相关信息</strong></p><p>安装:  <code>pip install beautifulsoup4</code></p><p>小测：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; import requests</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; r.text</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; demo = r.text</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; from bs4 import BeautifulSoup</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; soup = BeautifulSoup(demo,<span class="string">"html.parser"</span>)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">print</span>(soup.prettify())</span></div></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171003111747222?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><img src="http://img.blog.csdn.net/20171003111805980?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Beautiful Soup库是解析/遍历/维护”标签熟”的功能库,引用方式:</strong></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> bs4</div></pre></td></tr></table></figure><p><strong>Beautiful Soup库的4种解析器:</strong></p><p><img src="http://img.blog.csdn.net/20171003125633014?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Beautiful Soup类的基本元素:</strong></p><p><img src="http://img.blog.csdn.net/20171003125726046?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>bs类基本元素</strong></p><ul><li><p>Tag标签<br><img src="http://img.blog.csdn.net/20171003130356706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>任何存在于HTML语法中的标签都可用**soup.<tag>访问获得,存在多个取第一个</tag></p></li><li><p>Tag的name<br><img src="http://img.blog.csdn.net/20171003130504074?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>每个<tag>有自己的名字,通过<tag>.name获取,字符串类型</tag></tag></p></li><li><p>Tag的attrs<br><img src="http://img.blog.csdn.net/20171003130840431?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>Tag的NavigableString<br><img src="http://img.blog.csdn.net/20171003131039781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>Tag的Comment<br><img src="http://img.blog.csdn.net/20171003131409233?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li><li><p>由find_all()扩展的七个方法:<br><img src="http://img.blog.csdn.net/20171003132419274?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p></li></ul><p><strong>实例一:中国大学排名爬虫</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="keyword">import</span> bs4</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</div><div class="line">        r.raise_for_status()</div><div class="line">        r.encoding=r.apparent_encoding</div><div class="line">        <span class="keyword">return</span> r.text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="string">"error"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist,html)</span>:</span></div><div class="line">    soup=BeautifulSoup(html,<span class="string">"html.parser"</span>)</div><div class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</div><div class="line">        <span class="keyword">if</span> isinstance(tr,bs4.element.Tag):</div><div class="line">            tds = tr(<span class="string">'td'</span>)</div><div class="line">            ulist.append([tds[<span class="number">0</span>].string,tds[<span class="number">1</span>].string,tds[<span class="number">2</span>].string])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist,num)</span>:</span></div><div class="line">    tplt=<span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></div><div class="line">    print(tplt.format(<span class="string">"排名"</span>,<span class="string">"学校名称"</span>,<span class="string">"总分"</span>,chr(<span class="number">12288</span>)))</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">        u=ulist[i]</div><div class="line">        print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    uinfo=[]</div><div class="line">    url = <span class="string">"http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html"</span></div><div class="line">    html = getHTMLText(url)</div><div class="line">    fillUnivList(uinfo,html)</div><div class="line">    printUnivList(uinfo,<span class="number">20</span>)</div><div class="line">main()</div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Beautiful Soup库可对HTML/XML格式进行解析并提取相关信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装:  &lt;code&gt;pip install beautifulsoup4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;小测：&lt;/p&gt;
&lt;figure class=
      
    
    </summary>
    
      <category term="Python学习" scheme="http://wustxiao.cn/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://wustxiao.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫与信息提取(一)</title>
    <link href="http://wustxiao.cn/2017/10/09/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%8E%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96-%E4%B8%80/"/>
    <id>http://wustxiao.cn/2017/10/09/Python网络爬虫与信息提取-一/</id>
    <published>2017-10-09T11:24:30.000Z</published>
    <updated>2017-10-10T11:15:36.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Requests库的七个主要方法:</strong></p><p><img src="http://img.blog.csdn.net/20171003091430199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>get方法</strong></p><pre><code>r = requests.get(url):右边构造一个向服务器请求资源的Requests对象,左边返回一个包含服务器资源的Response对象给r完整参数:requests.get(url,params=None,**kwargs),实则由request方法封装</code></pre><p><strong>Response对象的五个属性:</strong></p><p><img src="http://img.blog.csdn.net/20171003091835125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>爬取网页的通用代码框架</strong></p><pre><code>Requests库爬取网页会遇到异常:6种常见异常：</code></pre><p><img src="http://img.blog.csdn.net/20171003092400462?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>使用r.raise_for_status()方法构建通用代码框架:</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line">def getHTMLText(url)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">r = request.<span class="keyword">get</span>(url,<span class="keyword">timeout</span> = <span class="number">30</span>)</div><div class="line">r.raise_for_status()</div><div class="line">r.encoding = r.apparent_encoding</div><div class="line"><span class="built_in">return</span> r.<span class="built_in">text</span></div><div class="line">except:</div><div class="line"><span class="built_in">return</span> <span class="string">"产生异常"</span></div></pre></td></tr></table></figure><p><strong>HTTP协议对资源的操作:</strong></p><p><img src="http://img.blog.csdn.net/20171003094035525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><strong>Requests库主要方法:requests.request(method,url,</strong>kwargs)**</p><pre><code>method(请求方式)包括:    GET/HEAD/POST/PUT/PATCH/delete/OPTIONS**kwargs(控制访问参数)包括:    params(添加键值到url后)/data(字典/字节序列等作为Request的内容)/json/headers(HTTP定制头)/cookies(Request中的cookie)/auth(元祖,支持HTTP认证)/files(传输文件)/timeout/proxies(设定访问代理服务器)/allow_redirects(重定向开关)/stream(获取内容立即下载开关)/verify(认证SSL证书开关)/cert(本地SSL证书路径)</code></pre><p><strong>Requests库爬取实例</strong></p><ul><li>京东商品页面的爬取</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">url = <span class="string">"http://item.jd.com/2967929.html"</span></div><div class="line">try:</div><div class="line">    <span class="attribute">r</span>=requests.get(url)</div><div class="line">    r.raise_for_status()</div><div class="line">    r.<span class="attribute">encoding</span>=r.apparent_encoding</div><div class="line">    <span class="builtin-name">print</span>(r.text[:1000])</div><div class="line">except:</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure><ul><li>亚马逊商品页面的爬取<br>由于亚马逊有自身的头部审查,故我们模拟浏览器访问:</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = <span class="string">"http://www.amazon.cn/gp/product/B01M8L5Z3Y"</span></div><div class="line"><span class="built_in">try</span>:</div><div class="line">    kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</div><div class="line">    r= requests.<span class="built_in">get</span>(url,headers = kv)</div><div class="line">    r.raise_for_status()</div><div class="line">    r.encoding=r.apparent_encoding</div><div class="line">    <span class="built_in">print</span>(r.<span class="built_in">text</span>[<span class="number">1000</span>:<span class="number">2000</span>])</div><div class="line">except:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure><ul><li>百度/360搜索关键词提交<br>首先我们需要知道搜索关键词的提交接口:<br>百度:<a href="http://www.baidu.com/s?wd=keyword" target="_blank" rel="external">http://www.baidu.com/s?wd=keyword</a><br>360:<a href="http://www.so.com/s?q=keyword" target="_blank" rel="external">http://www.so.com/s?q=keyword</a><br>接下来我们可以利用params参数将关键词加入,代码如下:</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">keyword = <span class="string">"Python"</span></div><div class="line"><span class="built_in">try</span>:</div><div class="line">    kv = &#123;<span class="string">'wd'</span>:keyword&#125;</div><div class="line">    r= requests.<span class="built_in">get</span>(<span class="string">"http://www.baidu.com/s"</span>,params = kv)</div><div class="line">    <span class="built_in">print</span>(r.request.url)</div><div class="line">    r.raise_for_status()</div><div class="line">    <span class="built_in">print</span>(len(r.<span class="built_in">text</span>))</div><div class="line">except:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure><ul><li>网络图片的爬取和存储</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf<span class="number">-8</span></div><div class="line">import requests</div><div class="line">import <span class="built_in">os</span></div><div class="line">url = <span class="string">"http://image.nationalgeographic.com.cn/2017/0311/20170311024522382.jpg"</span></div><div class="line"></div><div class="line">root = <span class="string">"/home/xiaorui/文档/Python/"</span></div><div class="line"><span class="built_in">path</span> = root +url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</div><div class="line">try:</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(root):</div><div class="line">        <span class="built_in">os</span>.mkdir(root)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">os</span>.<span class="built_in">path</span>.exists(<span class="built_in">path</span>):</div><div class="line">        r=requests.get(url)</div><div class="line">        with <span class="built_in">open</span>(<span class="built_in">path</span>,<span class="string">'wb'</span>) as f:</div><div class="line">            f.<span class="built_in">write</span>(r.content)</div><div class="line">            f.<span class="built_in">close</span>()</div><div class="line">            <span class="built_in">print</span>(<span class="string">"文件保存成功"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="built_in">print</span>(<span class="string">"文件已存在"</span>)</div><div class="line">except:</div><div class="line">    <span class="built_in">print</span>(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure><ul><li>IP地址归属地的查询</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line">import requests</div><div class="line">url = <span class="string">"http://m.ip138.com/ip.asp?ip="</span></div><div class="line">try:</div><div class="line">    <span class="attribute">r</span>=requests.get(url+'202.204.80.112')</div><div class="line">    r.raise_for_status()</div><div class="line">    r.<span class="attribute">encoding</span>=r.apparent_encoding</div><div class="line">    <span class="builtin-name">print</span>(r.text[-500:])</div><div class="line">except:</div><div class="line">    <span class="builtin-name">print</span>(<span class="string">"爬取失败"</span>)</div></pre></td></tr></table></figure><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Requests库的七个主要方法:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20171003091430199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZ
      
    
    </summary>
    
      <category term="Python学习" scheme="http://wustxiao.cn/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Python" scheme="http://wustxiao.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>markdown新手指南手册</title>
    <link href="http://wustxiao.cn/2017/10/09/markdown%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97%E6%89%8B%E5%86%8C/"/>
    <id>http://wustxiao.cn/2017/10/09/markdown新手指南手册/</id>
    <published>2017-10-09T10:48:18.000Z</published>
    <updated>2017-10-10T11:14:03.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 一级标题</span></div><div class="line"><span class="section">## 二级标题</span></div><div class="line"><span class="section">### 三级标题</span></div><div class="line"><span class="section">#### 四级标题</span></div><div class="line"><span class="section">##### 五级标题</span></div><div class="line"><span class="section">###### 六级标题</span></div></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>文本1</div><div class="line"><span class="bullet">- </span>文本2</div><div class="line"><span class="bullet">- </span>文本3</div></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>文本1</div><div class="line"><span class="bullet">2. </span>文本2</div><div class="line"><span class="bullet">3. </span>文本3</div></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">显示文本</span>](<span class="link">链接地址</span>)</div></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](图片链接地址)</div></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 需要引用的文本</span></div></pre></td></tr></table></figure><h3 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**文本**</span></div></pre></td></tr></table></figure><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*文本*</span></div></pre></td></tr></table></figure><h3 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h3><p>用两个、、、包围需要引用的代码即可</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">|Tables     |Are         |Cool   |</div><div class="line">|-----------------|:-----------|----|</div><div class="line">|col 3 is   |right-aligned | $1600  |</div><div class="line">|col 2 is   |centered    |  $12  |</div><div class="line">|zebra stripes  | are neat     | $1 |</div></pre></td></tr></table></figure><p><strong>显示效果：</strong></p><table><thead><tr><th>Tables</th><th style="text-align:left">Are</th><th>Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:left">right-aligned</td><td>$1600</td></tr><tr><td>col 2 is</td><td style="text-align:left">centered</td><td>$12</td></tr><tr><td>zebra stripes</td><td style="text-align:left">are neat</td><td>$1</td></tr></tbody></table><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h3&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
      
    
    </summary>
    
      <category term="Linux学习" scheme="http://wustxiao.cn/categories/Linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="markdown" scheme="http://wustxiao.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next主题 文章添加阅读次数，访问量等</title>
    <link href="http://wustxiao.cn/2017/10/06/Hexo-Next%E4%B8%BB%E9%A2%98-%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0%EF%BC%8C%E8%AE%BF%E9%97%AE%E9%87%8F%E7%AD%89/"/>
    <id>http://wustxiao.cn/2017/10/06/Hexo-Next主题-文章添加阅读次数，访问量等/</id>
    <published>2017-10-06T09:38:07.000Z</published>
    <updated>2017-10-10T11:14:36.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示："><a href="#本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示：" class="headerlink" title="本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示："></a>本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示：</h3><p><img src="http://img.blog.csdn.net/20171006173642716?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="打开-Hexo-目录下的-themes-next-config-yml-文件"><a href="#打开-Hexo-目录下的-themes-next-config-yml-文件" class="headerlink" title="打开 Hexo 目录下的 \themes\next\ _config.yml 文件"></a>打开 Hexo 目录下的 \themes\next\ _config.yml 文件</h3><p><img src="http://img.blog.csdn.net/20171006173704062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示：&quot;&gt;&lt;a href=&quot;#本章所讲给文章设置阅读量，启用不蒜子统计，仅限于文章页面显示阅读书，在首页不显示。效果如下图所示：&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Hexo学习" scheme="http://wustxiao.cn/categories/Hexo%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="hexo" scheme="http://wustxiao.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>markdown 编辑器： remarkable 安装(ubuntu)</title>
    <link href="http://wustxiao.cn/2017/10/06/markdown-%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9A-remarkable-%E5%AE%89%E8%A3%85-ubuntu/"/>
    <id>http://wustxiao.cn/2017/10/06/markdown-编辑器：-remarkable-安装-ubuntu/</id>
    <published>2017-10-06T08:49:00.000Z</published>
    <updated>2017-10-10T11:13:55.626Z</updated>
    
    <content type="html"><![CDATA[<ul><li>下载安装包</li><li><a href="http://remarkableapp.github.io/linux/download.html" target="_blank" rel="external">http://remarkableapp.github.io/linux/download.html</a></li></ul><ul><li>安装之：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -i remarkable_1.62_all.deb</div></pre></td></tr></table></figure><ul><li>补上依赖项：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -f</div></pre></td></tr></table></figure><ul><li>运行：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remarkable &amp;</div></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171006170128354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHI0Njk3ODY3MDY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;下载安装包&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://remarkableapp.github.io/linux/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://remarkableapp.git
      
    
    </summary>
    
      <category term="安装软件" scheme="http://wustxiao.cn/categories/%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="http://wustxiao.cn/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建（next主题系列详解）</title>
    <link href="http://wustxiao.cn/2017/10/06/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88next%E4%B8%BB%E9%A2%98%E7%B3%BB%E5%88%97%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
    <id>http://wustxiao.cn/2017/10/06/Hexo博客搭建（next主题系列详解）/</id>
    <published>2017-10-06T07:34:50.000Z</published>
    <updated>2017-10-10T11:14:43.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hexo的next主题配置详解"><a href="#hexo的next主题配置详解" class="headerlink" title="hexo的next主题配置详解"></a><a href="http://michael728.github.io/2015/11/30/hexo-next-optimize/" target="_blank" rel="external">hexo的next主题配置详解</a></h3><p><div id="disqus_thread"></div></p><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/(function() { // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://https-xrlrf-github-io.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" target="_blank" rel="external">comments powered by Disqus.</a></noscript><script id="dsq-count-scr" src="//https-xrlrf-github-io.disqus.com/count.js" async></script><!-- Global Site Tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-107582762-1"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-107582762-1');</script><!-- UY BEGIN --><p><div id="uyan_frame"></div></p><p><script type="text/javascript" src="http://v2.uyan.cc/code/uyan.js?uid=2145975"></script><br><!-- UY END --></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;hexo的next主题配置详解&quot;&gt;&lt;a href=&quot;#hexo的next主题配置详解&quot; class=&quot;headerlink&quot; title=&quot;hexo的next主题配置详解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://michael728.github.io/2015
      
    
    </summary>
    
      <category term="Hexo学习" scheme="http://wustxiao.cn/categories/Hexo%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Hexo" scheme="http://wustxiao.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
